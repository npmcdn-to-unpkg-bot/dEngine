<?xml version="1.0"?>
<doc>
    <assembly>
        <name>dEngine</name>
    </assembly>
    <members>
        <member name="T:dEngine.API">
            <summary>
            Class for API.
            </summary>
        </member>
        <member name="P:dEngine.API.Comments">
            <summary>
            The XML comments.
            </summary>
        </member>
        <member name="M:dEngine.API.Dump">
            <summary>
            Dumps the API as a string.
            </summary>
        </member>
        <member name="T:dEngine.Data.TextSource">
            <summary>
            Asset that contains a text string.
            </summary>
        </member>
        <member name="P:dEngine.Data.TextSource.Text">
            <summary>
            The source code.
            </summary>
        </member>
        <member name="P:dEngine.Data.TextSource.ContentType">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Data.TextSource.OnSave(System.IO.BinaryWriter)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Data.TextSource.OnLoad(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Data.TextSource.OnNonAsset(System.IO.BinaryReader)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Data.TextSource.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Data.AssetBase">
            <summary>
            Base class for assets.
            </summary>
        </member>
        <member name="F:dEngine.Data.AssetBase._disposed">
            <summary>
            Determines whether the asset is disposed.
            </summary>
        </member>
        <member name="P:dEngine.Data.AssetBase.SourceFile">
            <summary>
            The path to the source file.
            </summary>
        </member>
        <member name="P:dEngine.Data.AssetBase.Tags">
            <summary>
            A list of tags.
            </summary>
        </member>
        <member name="P:dEngine.Data.AssetBase.ContentType">
            <summary>
            The <see cref="P:dEngine.Data.AssetBase.ContentType" /> of this asset.
            </summary>
        </member>
        <member name="P:dEngine.Data.AssetBase.IsDisposed">
            <summary>
            Determines if the geometry has been disposed.
            </summary>
        </member>
        <member name="P:dEngine.Data.AssetBase.IsLoaded">
            <summary>
            Determines if data was successfuly loaded into the asset.
            </summary>
        </member>
        <member name="M:dEngine.Data.AssetBase.Dispose">
            <summary>
            Disposes of the asset.
            </summary>
        </member>
        <member name="M:dEngine.Data.AssetBase.PeekContent(System.IO.Stream)">
            <summary>
            Returns the content type of the given stream.
            </summary>
        </member>
        <member name="M:dEngine.Data.AssetBase.Save(System.IO.Stream)">
            <summary>
            Saves the asset to a stream.
            </summary>
        </member>
        <member name="M:dEngine.Data.AssetBase.Load(System.IO.Stream)">
            <summary>
            Loads the asset from a stream.
            </summary>
        </member>
        <member name="M:dEngine.Data.AssetBase.OnNonAsset(System.IO.BinaryReader)">
            <summary>
            Invoked when the stream header does not match the expected asset header.
            </summary>
            <returns>
            A boolean determining if the file was successfully loaded.
            </returns>
        </member>
        <member name="M:dEngine.Data.AssetBase.OnSave(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="M:dEngine.Data.AssetBase.OnLoad(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.Data.AssetBase.Finalize">
            <summary />
        </member>
        <member name="M:dEngine.Data.AssetBase.Dispose(System.Boolean)">
            <summary>
            Dispoes of the asset.
            </summary>
            <param name="disposing">Determines whether object was disposed or deconstructed.</param>
        </member>
        <member name="M:dEngine.Data.AudioData.BeforeSerialization">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Data.AudioData.AfterDeserialization">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Data.AudioData.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Data.Texture">
            <summary>
            A 2D texture.
            </summary>
        </member>
        <member name="M:dEngine.Data.Texture.#ctor">
            <summary>
            Creates an empty texture.
            </summary>
        </member>
        <member name="M:dEngine.Data.Texture.#ctor(SharpDX.Direct3D11.Texture2D)">
            <summary>
            Creates a texture with an existing <see cref="T:SharpDX.Direct3D11.Texture2D" />.
            </summary>
        </member>
        <member name="M:dEngine.Data.Texture.#ctor(System.Drawing.Bitmap,SharpDX.Direct3D11.BindFlags)">
            <summary>
            Loads a bitmap into a texture.
            </summary>
        </member>
        <member name="M:dEngine.Data.Texture.#ctor(System.Int32,System.Int32,SharpDX.DXGI.Format,System.Boolean,SharpDX.Direct3D11.BindFlags,System.Int32)">
            <summary>
            Creates a texture with the given width, height and format.
            </summary>
        </member>
        <member name="P:dEngine.Data.Texture.NativeTexture">
            <summary>
            The <see cref="T:SharpDX.Direct3D11.Texture2D" />
            </summary>
        </member>
        <member name="P:dEngine.Data.Texture.ContentType">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Data.Texture.IsStaging">
            <summary>
            Determines if this is a staging texture.
            </summary>
        </member>
        <member name="P:dEngine.Data.Texture.Width">
            <summary>
            The width of the texture.
            </summary>
        </member>
        <member name="P:dEngine.Data.Texture.Height">
            <summary>
            The height of the texture.
            </summary>
        </member>
        <member name="P:dEngine.Data.Texture.TexelSize">
            <summary>
            The texel size of the texture.
            </summary>
        </member>
        <member name="M:dEngine.Data.Texture.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Data.Texture.BeforeSerialization">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Data.Texture.AfterDeserialization">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Data.Texture.GetBytesPBGRA">
            <summary>
            Copies the texture to a byte array in PBGRA format.
            </summary>
            <returns>The byte array.</returns>
        </member>
        <member name="M:dEngine.Data.Texture.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes an existing texture.
            </summary>
        </member>
        <member name="T:dEngine.Data.Cubemap">
            <summary>
            A texture with 6 faces.
            </summary>
        </member>
        <member name="P:dEngine.Data.Cubemap.ContentType">
            <summary/>
        </member>
        <member name="M:dEngine.Data.Cubemap.OnNonAsset(System.IO.BinaryReader)">
            <summary/>
        </member>
        <member name="T:dEngine.Data.Geometry">
            <summary>
            Represents a geometry. Instances of a geometry are rendered with a <see cref="T:dEngine.Graphics.RenderObject" />.
            </summary>
        </member>
        <member name="M:dEngine.Data.Geometry.#ctor">
            <summary>
            Creates an empty geometry.
            </summary>
        </member>
        <member name="M:dEngine.Data.Geometry.#ctor(System.String,dEngine.Graphics.Structs.Vertex[],System.Int32[],dEngine.Graphics.Structs.WeightedVertex[],SharpDX.Direct3D.PrimitiveTopology,dEngine.Instances.Materials.Material)">
            <summary>
            Creates a new geometry.
            </summary>
            <param name="name">The name of the geometry.</param>
            <param name="vertices">An array of vertices.</param>
            <param name="indices">An array of indices.</param>
            <param name="topology">The type of primitive to draw with.</param>
            <param name="weights">An optional array of weights, if provided this geometry will be treated as a skeletal mesh.</param>
            <param name="material">The material to use.</param>
        </member>
        <member name="P:dEngine.Data.Geometry.Vertices">
            <summary>
            The vertices.
            </summary>
        </member>
        <member name="P:dEngine.Data.Geometry.Weights">
            <summary>
            The bone data.
            </summary>
        </member>
        <member name="P:dEngine.Data.Geometry.Indices">
            <summary>
            The indices.
            </summary>
        </member>
        <member name="P:dEngine.Data.Geometry.PrimitiveTopology">
            <summary>
            The primitive topology that this geometry renders with.
            </summary>
        </member>
        <member name="P:dEngine.Data.Geometry.Name">
            <summary>
            The name of the geometry.
            </summary>
        </member>
        <member name="P:dEngine.Data.Geometry.Guid">
            <summary>
            The GUID of the geometry.
            </summary>
        </member>
        <member name="P:dEngine.Data.Geometry.Material">
            <summary>
            The content url of the material to use.
            </summary>
        </member>
        <member name="P:dEngine.Data.Geometry.IsSkinned">
            <summary>
            If true, this mesh uses bone weights.
            </summary>
        </member>
        <member name="P:dEngine.Data.Geometry.IndexCount">
            <summary>
            The number of indices.
            </summary>
        </member>
        <member name="P:dEngine.Data.Geometry.TriangleCount">
            <summary>
            The number of triangle.
            </summary>
        </member>
        <member name="P:dEngine.Data.Geometry.ContentType">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Data.Geometry.MaterialIndex">
            <summary>
            Used by the FBX importer.
            </summary>
        </member>
        <member name="M:dEngine.Data.Geometry.Equals(dEngine.Data.Geometry)">
            <summary>
            Determins if two geometries are equal.
            </summary>
        </member>
        <member name="E:dEngine.Data.Geometry.Rebuilt">
            <summary>
            Fired when the buffers are rebuilt.
            </summary>
        </member>
        <member name="M:dEngine.Data.Geometry.OnSave(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="M:dEngine.Data.Geometry.OnNonAsset(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.Data.Geometry.OnLoad(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.Data.Geometry.Dispose(System.Boolean)">
            <summary />
        </member>
        <member name="M:dEngine.Data.Geometry.AfterDeserialization">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Data.Geometry.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Data.Geometry.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Data.AnimationData">
            <summary>
            Container class for animation data;
            </summary>
        </member>
        <member name="P:dEngine.Data.AnimationData.ContentType">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Data.AnimationData.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:dEngine.BlurMode">
            <summary>
            Blurring methods to use in <see cref="!:AmbientOcclusionEffect" />.
            </summary>
        </member>
        <member name="T:dEngine.EngineMode">
            <summary>
            Enum for application types.
            </summary>
        </member>
        <member name="F:dEngine.EngineMode.Game">
            <summary>
            A regular game.
            </summary>
        </member>
        <member name="F:dEngine.EngineMode.LevelEditor">
            <summary>
            A level editor.
            </summary>
        </member>
        <member name="F:dEngine.EngineMode.Server">
            <summary>
            A standalone server.
            </summary>
        </member>
        <member name="T:dEngine.AvatarSize">
            <summary>
            Enum for Steam Avatar sizes.
            </summary>
        </member>
        <member name="F:dEngine.AvatarSize.Small">
            <summary />
        </member>
        <member name="F:dEngine.AvatarSize.Medium">
            <summary />
        </member>
        <member name="F:dEngine.AvatarSize.Large">
            <summary />
        </member>
        <member name="T:dEngine.CameraType">
            <summary>
            Enum for types of camera movement.
            </summary>
        </member>
        <member name="F:dEngine.CameraType.Fixed">
            <summary>
            </summary>
        </member>
        <member name="F:dEngine.CameraType.Attach">
            <summary>
            </summary>
        </member>
        <member name="F:dEngine.CameraType.Watch">
            <summary>
            </summary>
        </member>
        <member name="F:dEngine.CameraType.Track">
            <summary>
            </summary>
        </member>
        <member name="F:dEngine.CameraType.Follow">
            <summary>
            </summary>
        </member>
        <member name="F:dEngine.CameraType.Custom">
            <summary>
            </summary>
        </member>
        <member name="F:dEngine.CameraType.Scriptable">
            <summary>
            Uses the raw CFrame of the camera.
            </summary>
        </member>
        <member name="T:dEngine.ContentType">
            <summary>
            Enum for content types.
            </summary>
        </member>
        <member name="T:dEngine.DecalType">
            <summary>
            The decal type.
            </summary>
        </member>
        <member name="F:dEngine.DecalType.Face">
            <summary>
            Draws the decal on the side of the part.
            </summary>
        </member>
        <member name="F:dEngine.DecalType.Projection">
            <summary>
            Projects the decal onto the part.
            </summary>
        </member>
        <member name="M:dEngine.Graphics.PhysicsDebugDraw.#ctor">
            <summary />
        </member>
        <member name="T:dEngine.Graphics.WorldRenderer">
            <summary>
            A container class for holding <see cref="T:dEngine.Graphics.RenderObject" />s for a specific <see cref="T:dEngine.Instances.IWorld" />.
            </summary>
        </member>
        <member name="P:dEngine.Graphics.WorldRenderer.Item(dEngine.Data.Geometry,dEngine.Instances.Materials.Material)">
            <summary>
            Gets a renderer for the given mesh name.
            </summary>
        </member>
        <member name="P:dEngine.Graphics.WorldRenderer.Item(dEngine.Shape)">
            <summary>
            Gets a renderer for the given shape.
            </summary>
        </member>
        <member name="M:dEngine.Graphics.WorldRenderer.Dispose">
            <summary />
        </member>
        <member name="M:dEngine.Graphics.GfxShader.Pass.Load">
            <summary>
            Loads bytecode into a shader object.
            </summary>
        </member>
        <member name="M:dEngine.Graphics.GfxShader.Pass.Compile(System.String,System.String)">
            <summary>
            Compiles the shader source into bytecode.
            </summary>
        </member>
        <member name="T:dEngine.Graphics.SphericalHarmonics">
            <summary>
            Spherical Harmonics library for IBL.
            </summary>
        </member>
        <member name="T:dEngine.Graphics.Structs.Vertex2D">
            <summary>
            Vertex data structure for 2D guis.
            </summary>
        </member>
        <member name="T:dEngine.Graphics.Structs.WeightedVertex">
            <summary>
            Vertex data structure for shaders.
            </summary>
        </member>
        <member name="T:dEngine.Graphics.Structs.CameraData">
            <summary>
            Camera data structure for shaders.
            </summary>
        </member>
        <member name="T:dEngine.Graphics.Structs.InstanceRenderData">
            <summary>
            Instance data structure for shaders.
            </summary>
        </member>
        <member name="F:dEngine.Graphics.Structs.InstanceRenderData.Transparency">
            <summary>
            The transparency of the instance.
            </summary>
        </member>
        <member name="F:dEngine.Graphics.Structs.InstanceRenderData.Size">
            <summary>
            The size of the instance.
            </summary>
        </member>
        <member name="F:dEngine.Graphics.Structs.InstanceRenderData.Colour">
            <summary>
            The base colour.
            </summary>
        </member>
        <member name="F:dEngine.Graphics.Structs.InstanceRenderData.ShadingModel">
            <summary>
            The shading model.
            </summary>
        </member>
        <member name="F:dEngine.Graphics.Structs.InstanceRenderData.Emissive">
            <summary>
            The emissive multiplier.
            </summary>
        </member>
        <member name="F:dEngine.Graphics.Structs.InstanceRenderData.Smoothness">
            <summary>
            Roughness
            </summary>
        </member>
        <member name="F:dEngine.Graphics.Structs.InstanceRenderData.Metallic">
            <summary>
            Roughness
            </summary>
        </member>
        <member name="F:dEngine.Graphics.Structs.InstanceRenderData.ModelMatrix">
            <summary>
            The model matrix.
            </summary>
        </member>
        <member name="T:dEngine.Graphics.Structs.Vertex">
            <summary>
            Vertex data structure for shaders.
            </summary>
        </member>
        <member name="T:dEngine.Graphics.Primitives">
            <summary>
            RenderBufferObject for primitives.
            </summary>
        </member>
        <member name="M:dEngine.Graphics.Primitives.Load">
            <summary>
            Loads primitive geometry.
            </summary>
        </member>
        <member name="T:dEngine.Graphics.RenderObject">
            <summary>
            An object which holds and renders a collection of instances for a given mesh.
            </summary>
        </member>
        <member name="M:dEngine.Graphics.RenderObject.#ctor(System.String,dEngine.Data.Geometry,dEngine.Instances.Materials.Material)">
            <summary>
            Creates a <see cref="T:dEngine.Graphics.RenderObject" /> from a <see cref="P:dEngine.Graphics.RenderObject.Geometry" />.
            </summary>
            <param name="name">An identifier for debug purposes.</param>
            <param name="geometry">The mesh to use.</param>
            <param name="material">The material to use.</param>
        </member>
        <member name="P:dEngine.Graphics.RenderObject.Name">
            <summary>
            The name of this object. Used for debug purposes.
            </summary>
        </member>
        <member name="P:dEngine.Graphics.RenderObject.InstanceCount">
            <summary>
            The total number of instances this object contains.
            </summary>
        </member>
        <member name="P:dEngine.Graphics.RenderObject.IsBuilt">
            <summary>
            Determines if the buffers for this object have been built.
            </summary>
        </member>
        <member name="P:dEngine.Graphics.RenderObject.IsDisposed">
            <summary>
            If true, this object has been disposed.
            </summary>
        </member>
        <member name="M:dEngine.Graphics.RenderObject.Dispose">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Graphics.RenderObject.Build">
            <summary>
            Builds the buffer objects.
            </summary>
            <remarks>
            Must be called after <see cref="M:dEngine.Graphics.Renderer.Init" /> has finished.
            </remarks>
        </member>
        <member name="M:dEngine.Graphics.RenderObject.Update(SharpDX.Direct3D11.DeviceContext@)">
            <summary>
            Uploads instance data to the GPU.
            </summary>
        </member>
        <member name="M:dEngine.Graphics.RenderObject.Draw(SharpDX.Direct3D11.DeviceContext@,dEngine.Instances.Camera@,System.Boolean)">
            <summary>
            Draws instances to the current render target.
            </summary>
        </member>
        <member name="M:dEngine.Graphics.RenderObject.Add(dEngine.Instances.IRenderable)">
            <summary>
            Adds an <see cref="T:dEngine.Instances.IRenderable" /> instance to the instance list.
            </summary>
        </member>
        <member name="M:dEngine.Graphics.RenderObject.Remove(dEngine.Instances.IRenderable)">
            <summary>
            Remove an <see cref="T:dEngine.Instances.IRenderable" /> instance from the instance list.
            </summary>
        </member>
        <member name="M:dEngine.Graphics.RenderObject.Clear">
            <summary>
            Clears the instance list.
            </summary>
        </member>
        <member name="M:dEngine.Graphics.RenderObject.ToString">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Graphics.Renderer">
            <summary>
            Class for managing graphics.
            </summary>
        </member>
        <member name="P:dEngine.Graphics.Renderer.IsInitialized">
            <summary>
            If true, the manager has been initialized.
            </summary>
        </member>
        <member name="P:dEngine.Graphics.Renderer.ResizeNextFrame">
            <summary>
            When set to true, all resources will be resized the following frame.
            </summary>
        </member>
        <member name="P:dEngine.Graphics.Renderer.ControlSize">
            <summary>
            The size of the <see cref="P:dEngine.Engine.Control" />.
            </summary>
        </member>
        <member name="E:dEngine.Graphics.Renderer.Initialized">
            <summary>
            Fired when the <see cref="T:dEngine.Graphics.Renderer" /> has been initialized.
            </summary>
        </member>
        <member name="M:dEngine.Graphics.Renderer.Render(dEngine.Instances.IWorld,dEngine.Graphics.Renderer.PassType)">
            <summary>
            Draws the scene from the perspective of the given camera to its <see cref="P:dEngine.Instances.Camera.BackBuffer" />
            </summary>
        </member>
        <member name="M:dEngine.Graphics.Renderer.GetNearestResolution(dEngine.Vector2)">
            <summary>
            Gets the nearest 16:9 resolution.
            </summary>
        </member>
        <member name="M:dEngine.Graphics.Renderer.InvokeResourceDependent(System.Action)">
            <summary>
            If the renderer has not yet been initialized, subscribe to the event, otherwise invoke the callback immediately.
            </summary>
            <param name="callback">The function to call if/when the renderer is initialized.</param>
        </member>
        <member name="F:dEngine.Graphics.Renderer.PassType.Scene">
            <summary>
            Draws all objects.
            </summary>
        </member>
        <member name="F:dEngine.Graphics.Renderer.PassType.Reflection">
            <summary>
            Draws a minimal render of the environment: terrain, sky and important buildings.
            </summary>
        </member>
        <member name="F:dEngine.Graphics.Renderer.PassType.PostProcess">
            <summary>
            Performs post-process.
            </summary>
        </member>
        <member name="F:dEngine.Graphics.Renderer.PassType.GUI">
            <summary>
            Draws GUI objects.
            </summary>
        </member>
        <member name="F:dEngine.Graphics.Renderer.PassType.Lighting">
            <summary>
            Performs lighting pass.
            </summary>
        </member>
        <member name="F:dEngine.Graphics.Renderer.PassType.PhysicsDebug">
            <summary>
            Draws physics debug.
            </summary>
        </member>
        <member name="F:dEngine.Graphics.Renderer.PassType.Irradiance">
            <summary>
            </summary>
        </member>
        <member name="T:dEngine.Instances.Attributes.WarningAttribute">
            <summary>
            An attribute which defines a warning in the documentation.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Attributes.WarningAttribute.#ctor(System.String)">
            <summary />
        </member>
        <member name="T:dEngine.Instances.Attributes.RangeAttribute">
            <summary>
            An attribute for hinting at the intended range of a property.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Attributes.RangeAttribute.#ctor(System.Double,System.Double)">
            <summary />
        </member>
        <member name="P:dEngine.Instances.Attributes.RangeAttribute.Max">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Attributes.RangeAttribute.Min">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Attributes.ScriptSecurityAttribute">
            <summary>
            Defines the required script identity to access this member.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Attributes.ScriptSecurityAttribute.#ctor(dEngine.ScriptIdentity)">
            <summary />
        </member>
        <member name="P:dEngine.Instances.Attributes.ScriptSecurityAttribute.Identity">
            <summary />
        </member>
        <member name="T:dEngine.Instances.Attributes.TypeIdAttribute">
            <summary>
            An attribute for specifying the sub-type ID for classes which inherit from <see cref="T:dEngine.Instances.Instance" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Attributes.TypeIdAttribute.#ctor(System.Int16)">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Attributes.TypeIdAttribute.Id">
            <summary>
            The ID.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Attributes.YieldFunctionAttribute">
            <summary>
            Marker for methods which yield.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Attributes.ContentIdAttribute">
            <summary>
            An attribute for telling the level editor what this string property represents a content url.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Attributes.ContentIdAttribute.#ctor(dEngine.ContentType)">
            <summary>
            </summary>
        </member>
        <member name="P:dEngine.Instances.Attributes.ContentIdAttribute.ContentType">
            <summary>
            The type of content this string represents.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Attributes.LevelEditorRelatedAttribute">
            <summary>
            An attribute for members related to level editors.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Attributes.ExplorerOrderAttribute">
            <summary>
            The order of the instance in the explorer.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Attributes.UncreatableAttribute">
            <summary>
            Prevents scripts from creating an instance of this type.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Attributes.EditorVisibleAttribute">
            <summary>
            Attribute for defining inspector property group.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Attributes.EditorVisibleAttribute.#ctor(System.String,System.String,System.Object)">
            <summary>
            Sets the group name in the inspector.
            </summary>
            <param name="group">The group name.</param>
            <param name="displayName">The name to display in the inspector.</param>
            <param name="unknown"></param>
        </member>
        <member name="P:dEngine.Instances.Attributes.EditorVisibleAttribute.Group">
            <summary>
            The group name.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Attributes.EditorVisibleAttribute.DisplayName">
            <summary>
            The group name.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Attributes.ToolboxGroupAttribute">
            <summary>
            Attribute for group names in the toolbox.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Attributes.ToolboxGroupAttribute.#ctor(System.String)">
            <summary>
            Sets the group name.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Attributes.ToolboxGroupAttribute.GroupName">
            <summary>
            The group name.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Camera">
            <summary>
            A camera is used to render the scene from a certain perspective.
            </summary>
            <remarks>
            In a game, each client has its own Camera object.
            Cameras exist only on the viewer's client, within in a user's local <see cref="T:dEngine.Services.Workspace" />. This means it can't be
            edited from the server.
            When code is [running on a client](index.html?title=LocalScript) it can access the Camera through the
            <see cref="P:dEngine.Services.Workspace.CurrentCamera" /> property.
            ## State
            A camera's state is defined in the following way:
            * The <see cref="P:dEngine.Instances.Camera.CFrame" /> property represents the position and orientation of the camera.
            * The <see cref="P:dEngine.Instances.Camera.Focus" /> property represents the point the camera is looking at. It's important to set this property,
            as it also represents where the game thinks you are in the world. Certain visuals will be more detailed and will update
            more frequently, depending on how close they are to the Focus.
            * The <see cref="P:dEngine.Instances.Camera.CameraType" /> property represents the behaviour of the camera every frame.
            * The <see cref="P:dEngine.Instances.Camera.FieldOfView" /> property represents the angle the user can see out of the sides of the Camera.
            </remarks>
        </member>
        <member name="M:dEngine.Instances.Camera.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Camera.RenderHandle">
            <summary>
            The handle to the render control.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Camera.Buffer0">
            <summary>
            Diffuse Colour, Occlusion
            </summary>
        </member>
        <member name="P:dEngine.Instances.Camera.Buffer1">
            <summary>
            Metallic, Specular, Roughness
            </summary>
        </member>
        <member name="P:dEngine.Instances.Camera.Buffer2">
            <summary>
            World space normal, ShadingModelID
            </summary>
        </member>
        <member name="P:dEngine.Instances.Camera.Buffer3">
            <summary>
            Emission, PerObjectData
            </summary>
        </member>
        <member name="P:dEngine.Instances.Camera.FieldOfView">
            <summary>
            The vertical field of view in degrees.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Camera.ClipNear">
            <summary>
            The minimum draw distance.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Camera.ClipFar">
            <summary>
            The maximum draw distance.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Camera.CFrame">
            <summary>
            The position/rotation of the camera.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Camera.Projection">
            <summary>
            The type of projection this camera uses.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Camera.CameraType">
            <summary>
            The type of camera movement.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Camera.FrustumCulling">
            <summary>
            Determines whether the camera uses frustum culling.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Camera.Focus">
            <summary>
            The focus position of the camera.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Camera.CameraSubject">
            <summary>
            The camera subject.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Camera.ViewportSize">
            <summary>
            The size of the client's viewport.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Camera.AspectRatio">
            <summary>
            The aspect ratio of the <see cref="P:dEngine.Instances.Camera.ViewportSize" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Camera.OnChildAdded(dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Camera.OnChildRemoved(dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Camera.Resize(SharpDX.Direct3D11.Device)">
            <summary>
            Resizes the GBuffer.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Camera.ScreenPointToRay(dEngine.Vector2@)">
            <summary>
            Gets a 3D ray from a 2D point on the screen.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Camera.ScreenPointToRay(dEngine.Vector2)">
            <summary>
            Gets a 3D ray from a 2D point on the screen.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Camera.GetMouseRay">
            <summary>
            Gets a picking ray for the cursor.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Camera.Destroy">
            <inheritdoc />
        </member>
        <member name="F:dEngine.Instances.Camera.Moved">
            <summary>
            Fired when the camera's CFrame is changed.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Camera.ViewportSizeChanged">
            <summary>
            Fires when <see cref="P:dEngine.Instances.Camera.ViewportSize" /> changes.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Diagnostics.DebuggerManager">
            <summary>
            Manager for <see cref="T:dEngine.Instances.ScriptDebugger" />s.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Diagnostics.DebuggerManager.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.Diagnostics.DebuggerManager.DebuggingEnabled">
            <summary>
            Gets whether or not debugging is enabled.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Diagnostics.DebuggerManager.AddDebugger(dEngine.Instances.LuaSourceContainer)">
            <summary>
            Registers a script with a debugger.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Diagnostics.DebuggerManager.GetDebuggers">
            <summary>
            Returns an array of all <see cref="T:dEngine.Instances.ScriptDebugger" />s.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Diagnostics.DebuggerManager.Resume">
            <summary>
            Resumes the debug manager.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Diagnostics.DebuggerManager.StepIn">
            <summary>
            Steps into the current line.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Diagnostics.DebuggerManager.StepOut">
            <summary>
            Steps out of the current line.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Diagnostics.DebuggerManager.StepOver">
            <summary>
            Step over the current line.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Explosion">
            <summary>
            An explosion applies force to objects within the blast radius at the position of the parent <see cref="T:dEngine.Instances.Part" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Explosion.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.Explosion.BlastPressure">
            <summary>
            Determines the amount of force to apply to objects within the <see cref="P:dEngine.Instances.Explosion.BlastRadius" />
            </summary>
        </member>
        <member name="P:dEngine.Instances.Explosion.BlastRadius">
            <summary>
            The radius of the explosion.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Explosion.Craters">
            <summary>
            Determines whether the explosion will make craters terrain.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Explosion.Visible">
            <summary>
            Determines whether the explosion is visible.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Explosion.Destroy">
            <summary />
        </member>
        <member name="F:dEngine.Instances.Explosion.OnHit">
            <summary>
            Fires for every physical object that is caught in the <see cref="P:dEngine.Instances.Explosion.BlastRadius" />.
            </summary>
            <eventParam name="object" />
            <eventParam name="distance" />
        </member>
        <member name="T:dEngine.Instances.GuiAnimation">
            <summary>
            Base class for GUI animations.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiAnimation.IsAnimating">
            <summary>
            Determines if the animation is being played.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiAnimation.Duration">
            <summary>
            The duration of the animation.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiAnimation.PlaybackPosition">
            <summary>
            Gets/Sets the playback position of the animation.
            </summary>
        </member>
        <member name="M:dEngine.Instances.GuiAnimation.GetTarget">
            <summary>
            Returns the target element and property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.Instances.GuiAnimation.SetTarget(dEngine.Instances.GuiElement,System.String)">
            <summary>
            Sets the element and property that the animation will be applied to.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Storyboard">
            <summary>
            A storyboard allows the organization of multiple GUI animations.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Storyboard.#ctor">
            <summary />
        </member>
        <member name="M:dEngine.Instances.Storyboard.OnChildAdded(dEngine.Instances.Instance)">
            <summary />
        </member>
        <member name="M:dEngine.Instances.Storyboard.OnChildRemoved(dEngine.Instances.Instance)">
            <summary />
        </member>
        <member name="M:dEngine.Instances.Storyboard.Begin">
            <summary>
            Begins the storyboard.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Storyboard.End">
            <summary>
            Ends the storyboard.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Storyboard.Ended">
            <summary>
            Fired once all the animations have finished.
            </summary>
        </member>
        <member name="T:dEngine.Instances.DoubleAnimation">
            <summary>
            Tweens a double property.
            </summary>
        </member>
        <member name="P:dEngine.Instances.DoubleAnimation.From">
            <summary>
            The starting number.
            </summary>
        </member>
        <member name="P:dEngine.Instances.DoubleAnimation.To">
            <summary>
            The ending number.
            </summary>
        </member>
        <member name="T:dEngine.Instances.UDim2Animation">
            <summary>
            Tweens a UDim2 property.
            </summary>
        </member>
        <member name="P:dEngine.Instances.UDim2Animation.From">
            <summary>
            The starting UDim2.
            </summary>
        </member>
        <member name="P:dEngine.Instances.UDim2Animation.To">
            <summary>
            The ending UDim2.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Hint">
            <summary>
            Displays a black text bar at the top of the screen.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Hint.#ctor">
            <summary />
        </member>
        <member name="T:dEngine.Instances.Materials.Material">
            <summary>
            </summary>
        </member>
        <member name="M:dEngine.Instances.Materials.Material.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.Materials.Material.Domain">
            <summary>
            The material domain.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Material.ShadingModel">
            <summary>
            The shading model.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Material.Nodes">
            <summary>
            The nodes that this material contains.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Materials.Material.AddNode(dEngine.Instances.Materials.Node)">
            <summary>
            Adds the node to this material.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Materials.Material.RemoveNode(dEngine.Instances.Materials.Node)">
            <summary>
            Removes the node from this material.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Materials.Material.CreateInstance">
            <summary>
            Returns a <see cref="T:dEngine.Instances.Materials.MaterialInstance" /> of this material.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Materials.MaterialInstance">
            <summary>
            An instance of a <see cref="P:dEngine.Instances.Materials.MaterialInstance.Material" /> which can be used to modify paramaters on the fly.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.MaterialInstance.Domain">
            <summary>
            The <see cref="T:dEngine.MaterialDomain" /> of the parent material.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.MaterialInstance.ShadingModel">
            <summary>
            The <see cref="T:dEngine.ShadingModel" /> of the parent material.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Materials.MaterialInstance.SetParameter(System.String,System.Object)">
            <summary>
            Sets the value of a material paramater.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Materials.Node">
            <summary>
            Base class for material nodes.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Materials.Node.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.Materials.Node.Position">
            <summary>
            The position of the node.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Node.Size">
            <summary>
            The size of the node.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Node.Comment">
            <summary>
            The comment attached to the node.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Materials.Node.GetSlots(dEngine.InOut)">
            <summary>
            Gets the slots of the given mode.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Materials.Node.SlotConnected">
            <summary>
            Fired when a slot is connected.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Materials.Nodes.FinalNode">
            <summary>
            The final node of the material graph.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Nodes.FinalNode.BaseColour">
            <summary>
            The colour of the material.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Nodes.FinalNode.Metallic">
            <summary>
            Determiens how metallic the material is.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Nodes.FinalNode.Smoothness">
            <summary>
            Determines how smooth the material is.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Nodes.FinalNode.EmissiveColour">
            <summary>
            Determines the colour/power of the glow.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Nodes.FinalNode.Opacity">
            <summary>
            The opacity of the material.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Nodes.FinalNode.OpacityMask">
            <summary>
            Determines whether the pixel is clipped or not.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Nodes.FinalNode.SubsurfaceColour">
            <summary>
            The colour of the subsurface scattering.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Nodes.FinalNode.Refraction">
            <summary>
            The colour of the refraction.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Nodes.FinalNode.VertexOffset">
            <summary>
            The world-space offset of the vertex.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Materials.Nodes.TextureParameterNode">
            <summary>
            A node which samples a static texture.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Nodes.TextureParameterNode.TextureId">
            <summary>
            The texture to sample.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Nodes.TextureParameterNode.TexCoord">
            <summary>
            The UV input.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Nodes.TextureParameterNode.R">
            <summary>
            Outputs the R channel.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Nodes.TextureParameterNode.G">
            <summary>
            Outputs the G channel.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Nodes.TextureParameterNode.B">
            <summary>
            Outputs the B channel.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Nodes.TextureParameterNode.A">
            <summary>
            Outputs the A channel.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Nodes.TextureParameterNode.RGB">
            <summary>
            Outputs the A channel.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Materials.Slot.Node">
            <summary>
            The node this slot is attached to.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Message">
            <summary>
            Fills the entire screen with a semi-transparent grey background, and centered text in the middle of the screen.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Message.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.Message.Text">
            <summary>
            The text to display.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Message.OnWorldChanged(dEngine.Instances.IWorld,dEngine.Instances.IWorld)">
            <summary />
        </member>
        <member name="T:dEngine.Instances.LensFlareEffect">
            <summary>
            Lens flare.
            </summary>
        </member>
        <member name="M:dEngine.Instances.LensFlareEffect.#ctor">
            <summary />
        </member>
        <member name="T:dEngine.Instances.BindableEvent">
            <summary>
            Acts as a custom event to allow communication between scripts.
            </summary>
        </member>
        <member name="M:dEngine.Instances.BindableEvent.#ctor">
            <summary />
        </member>
        <member name="M:dEngine.Instances.BindableEvent.Fire(System.Object[])">
            <summary>
            Fires the <see cref="F:dEngine.Instances.BindableEvent.Event" />.
            </summary>
            <param name="arguments">The arguments to pass to the event.</param>
        </member>
        <member name="F:dEngine.Instances.BindableEvent.Event">
            <summary>
            An event which is fired by <see cref="M:dEngine.Instances.BindableEvent.Fire(System.Object[])" />.
            </summary>
            <eventParam name="arguments" />
        </member>
        <member name="T:dEngine.Instances.BindableFunction">
            <summary>
            Acts as a custom function to allow communication between scripts.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BindableFunction.OnInvoke">
            <summary>
            A function to be invoked when <see cref="M:dEngine.Instances.BindableFunction.Invoke(System.Object[])" /> is called.
            </summary>
        </member>
        <member name="M:dEngine.Instances.BindableFunction.Invoke(System.Object[])">
            <summary>
            Invokes the <see cref="P:dEngine.Instances.BindableFunction.OnInvoke" /> method.
            </summary>
            <param name="args">The arguments to pass to the callback.</param>
            <returns>The return value of the callback.</returns>
        </member>
        <member name="T:dEngine.Instances.BoolValue">
            <summary>
            A <see cref="T:dEngine.Instances.ValueContainer" /> that holds a boolean.
            </summary>
        </member>
        <member name="M:dEngine.Instances.BoolValue.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.BoolValue.Value">
            <summary>
            The value this container holds.
            </summary>
        </member>
        <member name="T:dEngine.Instances.IntValue">
            <summary>
            A <see cref="T:dEngine.Instances.ValueContainer" /> that holds an integer.
            </summary>
        </member>
        <member name="M:dEngine.Instances.IntValue.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.IntValue.Value">
            <summary>
            The value this container holds.
            </summary>
        </member>
        <member name="T:dEngine.Instances.RayValue">
            <summary>
            A <see cref="T:dEngine.Instances.ValueContainer" /> that holds a <see cref="T:dEngine.Ray" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.RayValue.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.RayValue.Value">
            <summary>
            The value that this container holds.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Vector4Value">
            <summary>
            A <see cref="T:dEngine.Instances.ValueContainer" /> that holds a <see cref="T:dEngine.Vector4" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Vector4Value.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Vector4Value.Value">
            <summary>
            The value that this containers holds.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Bone">
            <summary>
            A bone.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Bone.CFrame">
            <summary>
            The transform of the bone relative to <see cref="P:dEngine.Instances.Skeleton.RootBone" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Bone.ToString">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.Animation">
            <summary>
            An animation for a <see cref="T:dEngine.Instances.SkeletalMesh" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Animation.AnimationId">
            <summary>
            The content id for the animation data.
            </summary>
        </member>
        <member name="T:dEngine.Instances.CanvasWin32">
            <summary>
            Canvas for rendering to a form.
            </summary>
        </member>
        <member name="T:dEngine.Instances.GlobalDataStore">
            <summary>
            A GlobalDataStore allows manipulation of a data base.
            </summary>
        </member>
        <member name="M:dEngine.Instances.GlobalDataStore.#ctor">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.DataStores.OrderedDataStore">
            <summary>
            A type of DataStore where the value must be a positive integer.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Forcefield">
            <summary>
            Protects a <see cref="T:dEngine.Instances.Character" /> from damage by <see cref="M:dEngine.Instances.Character.TakeDamage(System.Single)" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Forcefield.#ctor">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.Button">
            <summary>
            An element made to visually look like a button.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Button.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Button.BackgroundColour">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Button.OnMouseEnter(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Button.OnMouseLeave(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.Interfaces.ICameraSubject">
            <summary>
            An interface for instances which can be a <see cref="P:dEngine.Instances.Camera.CameraSubject" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Interfaces.ICameraSubject.GetVelocity">
            <summary>
            Returns the velocity of the subject for use by the sound listener.
            </summary>
        </member>
        <member name="T:dEngine.Instances.PlaneMesh">
            <summary>
            A BlockMesh changes the appearance of its parent <see cref="T:dEngine.Instances.Part" />, regardless of <see cref="P:dEngine.Instances.Part.Size" /> and
            <see cref="P:dEngine.Instances.Part.Shape" /> properties.
            </summary>
        </member>
        <member name="M:dEngine.Instances.PlaneMesh.#ctor">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.FriendPages">
            <summary>
            A variation of pages used by <see cref="M:dEngine.Services.Players.GetFriendsAsync(System.UInt32)" />
            </summary>
        </member>
        <member name="M:dEngine.Instances.FriendPages.AdvanceToNextPage">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.Pages">
            <summary>
            A table of pages, where a page is a sorted list of key/value pairs.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Pages._currentPage">
            <summary>
            The current page.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Pages.IsFinished">
            <summary>
            Determines if there are any more pages.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Pages.GetCurrentPage">
            <summary>
            Returns the current page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.Instances.Pages.AdvanceToNextPage">
            <summary>
            Requests the next page.
            </summary>
        </member>
        <member name="T:dEngine.Instances.GuiContainerBase">
            <summary>
            Base class for gui containers.
            </summary>
        </member>
        <member name="M:dEngine.Instances.GuiContainerBase.#ctor">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.GuiContainerBase.OnChildAdded(dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.GuiContainerBase.OnChildRemoved(dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.GuiContainerBase.Destroy">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.PlayerGui">
            <summary>
            Container for the player's GUIs.
            </summary>
        </member>
        <member name="T:dEngine.Instances.ScrollFrame">
            <summary>
            A frame with a scrollbar.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ScrollFrame.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.ScrollFrame.TopImage">
            <summary>
            The image for the top of the scrollbar.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ScrollFrame.MiddleImage">
            <summary>
            The image for the middle of the scrollbar.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ScrollFrame.BottomImage">
            <summary>
            The texture for the bottom of the scrollbar.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ScrollFrame.ScrollBarVisibilityX">
            <summary>
            The visiblity of the horizontal scrollbar.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ScrollFrame.ScrollBarVisibilityY">
            <summary>
            The visiblity of the vertical scrollbar.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ScrollFrame.ScrollBarThickness">
            <summary>
            The thickness of the scrollbars.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ScrollFrame.CanvasSize">
            <summary>
            The size of the scrollable area.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ScrollFrame.ScrollOffset">
            <summary>
            The scroll offset of the canvas.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ScrollFrame.ScrollTo(System.Int32,System.Int32)">
            <summary>
            Scrolls the canvas to the given coordinates.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ScrollFrame.ScrollBy(System.Int32,System.Int32)">
            <summary>
            Scrolls the canvas by the given coordinates.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ScrollFrame.Measure">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.Fire">
            <summary>
            A fire particle emitter.
            </summary>
        </member>
        <member name="T:dEngine.Instances.ParticleEmitter">
            <summary>
            A generic particle system.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ParticleEmitter.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.Acceleration">
            <summary>
            Applies constant acceleration to all particles.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.Colour">
            <summary>
            A sequence of colours a particle will use over their lifetime.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.Drag">
            <summary>
            Determines how much drag the particles have.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.EmissionDirection">
            <summary>
            The direction that the particles will emit in.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.Enabled">
            <summary>
            Determines if the emitter is enabled.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.Lifetime">
            <summary>
            The lifetime of the particles.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.Blending">
            <summary>
            Determines how much the particles blend with eachother.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.LockedToPart">
            <summary>
            Determines whether particles rigidly move with the part they're emitted from.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.Rate">
            <summary>
            The rate at which particles are emitted.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.RotSpeed">
            <summary>
            Defines minimum/maximum rotational speed.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.Rotation">
            <summary>
            Defines minimum/maximum rotation.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.Size">
            <summary>
            The size of the particles over their lifeitme.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.Speed">
            <summary>
            The speed of the particles.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.Texture">
            <summary>
            The texture for each particle.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.Transparency">
            <summary>
            The transparency of a particle over its lifetime.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.VelocityInheritance">
            <summary>
            Determines how the particles move relative to the emitter part.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.VelocitySpread">
            <summary>
            Determines how offset a particle can be fired from the local positive Z of the emitter part.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ParticleEmitter.ZOffset">
            <summary>
            Used to order the drawing of emitters.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ParticleEmitter.Emit(System.Int32)">
            <summary>
            Emits the given number of particles.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Smoke">
            <summary>
            A smoke particle emitter.
            </summary>
        </member>
        <member name="T:dEngine.Instances.BodyAngularVelocity">
            <summary>
            Applies angular force on an object.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BodyAngularVelocity.AngularVelocity">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.BodyAngularVelocity.MaxTorque">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.BodyAngularVelocity.Power">
            <summary>
            How aggressively the object tries to reach its goal.
            </summary>
        </member>
        <member name="M:dEngine.Instances.BodyAngularVelocity.OnStep(dEngine.Instances.Part)">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.BodyGyro">
            <summary>
            BodyGyro attempts to keep a fixed orientation of its parent relative to <see cref="P:dEngine.Instances.BodyGyro.CFrame" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BodyGyro.CFrame">
            <summary>
            The target orientation of the object.
            </summary>
            <remarks>
            Only the rotation of the CFrame is used.
            </remarks>
        </member>
        <member name="P:dEngine.Instances.BodyGyro.Damping">
            <summary>
            The amount of dampening to apply.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BodyGyro.Power">
            <summary>
            Determines how aggressively the object tries to reach its goal.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BodyGyro.MaxTorque">
            <summary>
            The maximum amount of torque that can be applied.
            </summary>
        </member>
        <member name="T:dEngine.Instances.BodyPosition">
            <summary>
            Applies a force on its parent to move towards a position.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BodyPosition.position">
            <summary />
        </member>
        <member name="P:dEngine.Instances.BodyPosition.Position">
            <summary>
            The target position of the object.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BodyPosition.MaxForce">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.BodyPosition.Damping">
            <summary>
            The amount of dampening to apply.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BodyPosition.Power">
            <summary>
            Determines how aggressively the object tries to reach its goal.
            </summary>
        </member>
        <member name="T:dEngine.Instances.BodyThrust">
            <summary>
            Applies a force on its parent towards a direction.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BodyThrust.Force">
            <summary>
            The amount of force applied on each axis.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BodyThrust.Location">
            <summary>
            The offset from the center of the part where force is applied.
            </summary>
        </member>
        <member name="T:dEngine.Instances.BodyVelocity">
            <summary>
            Applies a force to maintain a certain velocity.
            </summary>
        </member>
        <member name="M:dEngine.Instances.BodyVelocity.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.BodyVelocity.MaxForce">
            <summary>
            The amount of force applied on each axis.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BodyVelocity.P">
            <summary>
            Determines how aggressively the object tries to reach its goal.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BodyVelocity.Velocity">
            <summary>
            The desired velocity.
            </summary>
        </member>
        <member name="M:dEngine.Instances.BodyVelocity.OnStep(dEngine.Instances.Part)">
            <summary />
        </member>
        <member name="T:dEngine.Instances.RocketPropulsion">
            <summary>
            Applies force to its parent in a similar manner to a rocket.
            </summary>
        </member>
        <member name="P:dEngine.Instances.RocketPropulsion.CartoonFactor">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.RocketPropulsion.MaxSpeed">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.RocketPropulsion.MaxThrust">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.RocketPropulsion.MaxTorque">
            <summary>
            The maximum amount of torque that can be applied.
            </summary>
        </member>
        <member name="P:dEngine.Instances.RocketPropulsion.Target">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.RocketPropulsion.TargetOffset">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.RocketPropulsion.TargetRadius">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.RocketPropulsion.ThrustD">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.RocketPropulsion.ThrustP">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.RocketPropulsion.TurnD">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.RocketPropulsion.TurnP">
            <summary>
            Summary
            </summary>
        </member>
        <member name="M:dEngine.Instances.RocketPropulsion.Abort">
            <summary>
            Stops the rocket moving from its target, causing it to fall.
            </summary>
        </member>
        <member name="M:dEngine.Instances.RocketPropulsion.Fire">
            <summary>
            Makes the rocket fly towards its target.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Attachment">
            <summary>
            An attachment represents an offset relative to the object it is parented to.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Attachment.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.Attachment.CFrame">
            <summary>
            The offset CFrame of the attachment.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Attachment.Position">
            <summary>
            The offset position of the attachment.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Attachment.Rotation">
            <summary>
            The offset rotation of the attachment.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Attachment.Axis">
            <summary>
            The X axis of the offset.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Attachment.SecondaryAxis">
            <summary>
            The Y axis of the direction.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Attachment.WorldPosition">
            <summary>
            The world-space offset position.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Attachment.WorldRotation">
            <summary>
            The world-space offset rotation.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Attachment.WorldAxis">
            <summary>
            The X axis of the world-space offset.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Attachment.WorldSecondaryAxis">
            <summary>
            The Y axis of the world-space offset.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Attachment.op_Implicit(dEngine.Instances.Attachment)~BulletSharp.RigidBody">
            <summary />
        </member>
        <member name="M:dEngine.Instances.Attachment.OnParentFilter(dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.BallSocketConstraint">
            <summary>
            The Ball socket joint limits the translation so that the local pivot points of two parts match in world-space.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BallSocketConstraint.LimitsEnabled">
            <summary>
            Determines whether a limit is set on the rotation based on <see cref="P:dEngine.Instances.BallSocketConstraint.UpperAngle" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BallSocketConstraint.Restitution">
            <summary>
            How elastic the <see cref="T:dEngine.Instances.Attachment" />s will be when they reach the end of the range specified by
            <see cref="P:dEngine.Instances.BallSocketConstraint.UpperAngle" />.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Constraint">
            <summary>
            Base class for constraints.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Constraint.Attachment0">
            <summary>
            The <see cref="T:dEngine.Instances.Attachment" /> which is connected to <see cref="P:dEngine.Instances.Constraint.Attachment1" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Constraint.Attachment1">
            <summary>
            The <see cref="T:dEngine.Instances.Attachment" /> which is connected to <see cref="P:dEngine.Instances.Constraint.Attachment0" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Constraint.Enabled">
            <summary>
            Toggles whether or not the constraint is enabled.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Constraint.op_Implicit(dEngine.Instances.Constraint)~BulletSharp.TypedConstraint">
            <summary />
        </member>
        <member name="M:dEngine.Instances.Constraint.Validate">
            <summary>
            Determines if both attachments have a valid <see cref="T:dEngine.Instances.Part" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Constraint.RebuildConstraint">
            <summary>
            Called when an attachment is set or changed.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Constraint.DestroyConstraint">
            <summary>
            Removes the current constraint from the world.
            </summary>
        </member>
        <member name="T:dEngine.Instances.HingeConstraint">
            <summary>
            A hinge allows two <see cref="T:dEngine.Instances.Attachment" />s to rotate about one axis.
            </summary>
        </member>
        <member name="M:dEngine.Instances.HingeConstraint.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.HingeConstraint.CurrentAngle">
            <summary>
            The current angle of the hinge.
            </summary>
        </member>
        <member name="P:dEngine.Instances.HingeConstraint.ActuatorType">
            <summary>
            Determines whether the rotation is actuated and, if so, what kind of actutation.
            </summary>
        </member>
        <member name="P:dEngine.Instances.HingeConstraint.LimitsEnabled">
            <summary>
            Determines whether the range of rotation should be limited.
            </summary>
        </member>
        <member name="M:dEngine.Instances.HingeConstraint.RebuildConstraint">
            <summary />
        </member>
        <member name="P:dEngine.Instances.HingeConstraint.AngularSpeed">
            <summary>
            </summary>
        </member>
        <member name="P:dEngine.Instances.HingeConstraint.ServoMaxTorque">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.HingeConstraint.TargetAngle">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.HingeConstraint.AngularVelocity">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.HingeConstraint.MotorMaxAcceleration">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.HingeConstraint.MotorMaxTorque">
            <summary>
            Summary
            </summary>
        </member>
        <member name="T:dEngine.Instances.RodConstraint">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.RodConstraint.CurrentDistance">
            <summary>
            The current distance between the two attachments.
            </summary>
        </member>
        <member name="P:dEngine.Instances.RodConstraint.Length">
            <summary>
            Summary
            </summary>
        </member>
        <member name="M:dEngine.Instances.RodConstraint.RebuildConstraint">
            <summary />
        </member>
        <member name="T:dEngine.Instances.RopeConstraint">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.RopeConstraint.CurrentDistance">
            <summary>
            The current distance between the two attachments.
            </summary>
        </member>
        <member name="P:dEngine.Instances.RopeConstraint.Length">
            <summary>
            The length of the rope.
            </summary>
        </member>
        <member name="P:dEngine.Instances.RopeConstraint.Restitution">
            <summary>
            Summary
            </summary>
        </member>
        <member name="T:dEngine.Instances.SpringConstraint">
            <summary>
            A spring applies a force to its <see cref="T:dEngine.Instances.Attachment" />s based on spring and damper behaviour.
            </summary>
        </member>
        <member name="P:dEngine.Instances.SpringConstraint.CurrentDistance">
            <summary>
            The current distance between the two attachments.
            </summary>
        </member>
        <member name="P:dEngine.Instances.SpringConstraint.Damping">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.SpringConstraint.FreeLength">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.SpringConstraint.LimitsEnabled">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.SpringConstraint.MaxForce">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.SpringConstraint.MaxLength">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.SpringConstraint.MinLength">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.SpringConstraint.Stiffness">
            <summary>
            The strength of the string.
            </summary>
            <remarks>
            The higher this value the more force will be applied when the attachments are separated a different length than the
            FreeLength.
            </remarks>
        </member>
        <member name="M:dEngine.Instances.SpringConstraint.RebuildConstraint">
            <summary />
        </member>
        <member name="T:dEngine.Instances.BloomEffect">
            <summary>
            An effect which makes bright parts of the screen glow.
            </summary>
        </member>
        <member name="M:dEngine.Instances.BloomEffect.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.BloomEffect.Intensity">
            <summary>
            The intensity of the bloom.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BloomEffect.Size">
            <summary>
            The size in percent of the screen width.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BloomEffect.Threshold">
            <summary>
            The size in percent of the screen width.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BloomEffect.DirtMask">
            <summary>
            The texture to use for the dirty lens effect.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BloomEffect.DirtIntensity">
            <summary>
            The intensity of the dirty lens effect.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BloomEffect.DirtColour">
            <summary>
            The intensity of the dirty lens effect.
            </summary>
        </member>
        <member name="T:dEngine.Instances.EyeAdaptationEffect">
            <summary>
            Summary
            </summary>
        </member>
        <member name="M:dEngine.Instances.ColourCorrectionEffect.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.ColourCorrectionEffect.TintColour">
            <summary>
            The colour filter that is applied to the HDR scene colour.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ColourCorrectionEffect.ToeFactor">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Instances.ColourCorrectionEffect.Intensity">
            <summary>
            The intensity of the colour grading.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ColourCorrectionEffect.LookupId">
            <summary>
            The lookup texture for the colour correction.
            </summary>
        </member>
        <member name="T:dEngine.Instances.DepthOfField">
            <summary>
            Blurs parts of the scene outside a specified range.
            </summary>
        </member>
        <member name="M:dEngine.Instances.DepthOfField.#ctor">
            <summary />
        </member>
        <member name="T:dEngine.Instances.GodRaysEffect">
            <summary>
            Renders sun shafts.
            </summary>
        </member>
        <member name="M:dEngine.Instances.GodRaysEffect.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.GodRaysEffect.Intensity">
            <summary>
            The intensity of the sun rays.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GodRaysEffect.Spread">
            <summary>
            Determines how much the sun rays spread out.
            </summary>
        </member>
        <member name="M:dEngine.Instances.GodRaysEffect.Destroy">
            <summary />
        </member>
        <member name="M:dEngine.Instances.GodRaysEffect.UpdateSize(dEngine.Instances.Camera)">
            <summary />
        </member>
        <member name="M:dEngine.Instances.MotionBlurEffect.#ctor">
            <summary />
        </member>
        <member name="T:dEngine.Instances.PostEffect">
            <summary>
            Abstract class for post processing effects. PostEffects must be parented to the <see cref="P:dEngine.Services.Workspace.CurrentCamera" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.PostEffect.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.PostEffect.Enabled">
            <summary>
            Determines if the effect is applied.
            </summary>
        </member>
        <member name="M:dEngine.Instances.PostEffect.Destroy">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.AmbientOcclusionEffect.Radius">
            <summary>
            The maximum radius of a gap that will introduce ambient occlusion.
            </summary>
        </member>
        <member name="P:dEngine.Instances.AmbientOcclusionEffect.Intensity">
            <summary>
            The degree of darkness added by ambient occlusion.
            </summary>
        </member>
        <member name="P:dEngine.Instances.AmbientOcclusionEffect.Distance">
            <summary>
            The distance between an occluded sample and its occluder.
            </summary>
        </member>
        <member name="P:dEngine.Instances.AmbientOcclusionEffect.Bias">
            <summary>
            Offsets the occlusion cone.
            </summary>
        </member>
        <member name="P:dEngine.Instances.AmbientOcclusionEffect.LumContribution">
            <summary>
            Determines how much ambient occlusion should be added in bright areas.
            </summary>
        </member>
        <member name="P:dEngine.Instances.AmbientOcclusionEffect.OcclusionColour">
            <summary>
            The colour of the occlusion. Usually black.
            </summary>
        </member>
        <member name="P:dEngine.Instances.AmbientOcclusionEffect.BlurBilateralThreshold">
            <summary>
            Determines how sharp the bilateral blur is.
            </summary>
        </member>
        <member name="P:dEngine.Instances.AmbientOcclusionEffect.MaxDistance">
            <summary>
            The maximum distance at which ambient occlusion is applied to objects.
            </summary>
        </member>
        <member name="P:dEngine.Instances.AmbientOcclusionEffect.Falloff">
            <summary>
            The falloff of the effect beyond <see cref="P:dEngine.Instances.AmbientOcclusionEffect.MaxDistance" />.
            </summary>
        </member>
        <member name="T:dEngine.Instances.VignetteEffect">
            <summary>
            Darkens the corners of the screen.
            </summary>
        </member>
        <member name="P:dEngine.Instances.VignetteEffect.Intensity">
            <summary>
            Determines how dark the corners get.
            </summary>
        </member>
        <member name="T:dEngine.Instances.LuaSourceContainer">
            <summary>
            Base class for an object containing Lua source code.
            </summary>
        </member>
        <member name="M:dEngine.Instances.LuaSourceContainer.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.LuaSourceContainer.IsRunning">
            <summary>
            Gets whether or not the script is currently running code.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Seat">
            <summary>
            A brick which can be occupied by a <see cref="T:dEngine.Instances.Character" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Seat.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.Seat.Occupant">
            <summary>
            The character that currently occupies this seat.
            </summary>
            <remarks>
            This property can be manually set, which will eject the current occupant if there is one,
            and force the new character to sit on it.
            </remarks>
        </member>
        <member name="P:dEngine.Instances.Seat.OccupyOnTouch">
            <summary>
            Determines if this object can be occupied by touching it.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Seat.Destroy">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.VehicleSeat">
            <summary>
            A seat which allows <see cref="T:dEngine.Instances.Character" />s to drive a vehicle.
            </summary>
        </member>
        <member name="P:dEngine.Instances.VehicleSeat.CameraOffset">
            <summary>
            The offset from the seat of the <see cref="P:dEngine.Instances.Seat.Occupant" />'s camera.
            </summary>
        </member>
        <member name="P:dEngine.Instances.VehicleSeat.Disabled">
            <summary>
            Determines if the seat can be sat in.
            </summary>
        </member>
        <member name="P:dEngine.Instances.VehicleSeat.MaxSpeed">
            <summary>
            The maximum speed the vehicle can go at.
            </summary>
        </member>
        <member name="P:dEngine.Instances.VehicleSeat.Steer">
            <summary>
            Determines how far to the left or right to steer.
            </summary>
        </member>
        <member name="P:dEngine.Instances.VehicleSeat.Speed">
            <summary>
            Gets the speed that the vehicle is going at.
            </summary>
        </member>
        <member name="P:dEngine.Instances.VehicleSeat.Throttle">
            <summary>
            The direction of movement.
            </summary>
        </member>
        <member name="P:dEngine.Instances.VehicleSeat.Torque">
            <summary>
            Determines how fast the vehicle is able to reach its <see cref="P:dEngine.Instances.VehicleSeat.MaxSpeed" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.VehicleSeat.TurnSpeed">
            <summary>
            The speed at which the vehicle will turn.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Team">
            <summary>
            A player team.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Team.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.Team.AutoAssignable">
            <summary>
            Determines if this team can be balanced.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Team.Players">
            <summary>
            Gets a list of players that are a member of this team.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Team.GetPlayers">
            <summary>
            Returns a list of players that are a member of this team.
            </summary>
        </member>
        <member name="T:dEngine.Instances.ColourValue">
            <summary>
            A <see cref="T:dEngine.Instances.ValueContainer" /> that holds a <see cref="T:dEngine.Colour" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ColourValue.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.ColourValue.Value">
            <summary>
            The value that this container holds.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Volume">
            <summary>
            A volume represents an area of space which can detect when a player enters it.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Volume.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.Volume.CFrame">
            <summary>
            The position/orientation of the volume.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Volume.Position">
            <summary>
            The position of <see cref="P:dEngine.Instances.Volume.CFrame" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Volume.Rotation">
            <summary>
            The rotation of <see cref="P:dEngine.Instances.Volume.CFrame" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Volume.Size">
            <summary>
            The size of the volume.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Volume.Shape">
            <summary>
            Summary
            </summary>
        </member>
        <member name="M:dEngine.Instances.Volume.Destroy">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Volume.OnWorldChanged(dEngine.Instances.IWorld,dEngine.Instances.IWorld)">
            <summary />
        </member>
        <member name="T:dEngine.Instances.TransvoxelTables">
            <summary>
            Contains the Lengyel Transvoxel Lookup Tables
            </summary>
        </member>
        <member name="T:dEngine.Instances.Character">
            <summary>
            A character is an instance which can be controlled by players or AI.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Character.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Character.IsShielded">
            <summary>
            Determines if the character is protected by a forcefield.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Character.MoveDirection">
            <summary>
            The direction the character is moving.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Character.WalkSpeed">
            <summary>
            The speed at which the character moves.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Character.Health">
            <summary>
            The amount of health the Humanoid has.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Character.CapsuleRadius">
            <summary>
            The radius of the collision capsule.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Character.CapsuleHeight">
            <summary>
            The height of the collision capsule.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Character.HeadOffset">
            <summary>
            The camera offset from the center of the capsule.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Character.Skeleton">
            <summary>
            The skeleton this character is using.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Character.SkeletalMesh">
            <summary>
            The skeletal mesh this character is using.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Character.Player">
            <summary>
            The player that owns this character.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Character.TakeDamage(System.Single)">
            <summary>
            Subtracts health if the Humanoid is not protected by a <see cref="T:dEngine.Instances.Forcefield" />.
            </summary>
            <param name="amount">The amount of damage to take.</param>
        </member>
        <member name="M:dEngine.Instances.Character.Heal(System.Single)">
            <summary>
            Adds health to the Humanoid.
            </summary>
            <param name="amount">The amount of health to give.</param>
        </member>
        <member name="M:dEngine.Instances.Character.Destroy">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Character.OnChildAdded(dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Character.OnChildRemoved(dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Character.GetMass">
            <summary>
            Calculates the mass of this part.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Character.Teleport(dEngine.Vector3)">
            <summary>
            Teleports the character to the given position.
            </summary>
            <param name="position">The position the teleport to.</param>
        </member>
        <member name="M:dEngine.Instances.Character.Teleport(dEngine.Vector3,dEngine.Vector3)">
            <summary>
            Teleports the character to the given position.
            </summary>
            <param name="position">The position the teleport to.</param>
            <param name="lookVector">The direction to face.</param>
        </member>
        <member name="F:dEngine.Instances.Character.Died">
            <summary>
            Fired when <see cref="P:dEngine.Instances.Character.Health" /> reaches zero.
            </summary>
        </member>
        <member name="T:dEngine.Instances.TextElement">
            <summary>
            Base class for text elements.
            </summary>
        </member>
        <member name="M:dEngine.Instances.TextElement.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.TextElement.TextBounds">
            <summary>
            The size of the space the text takes up.
            </summary>
        </member>
        <member name="P:dEngine.Instances.TextElement.Text">
            <summary>
            The text to draw.
            </summary>
        </member>
        <member name="P:dEngine.Instances.TextElement.TextColour">
            <summary>
            The colour of the text.
            </summary>
        </member>
        <member name="P:dEngine.Instances.TextElement.FontSize">
            <summary>
            The size of the text in points.
            </summary>
        </member>
        <member name="P:dEngine.Instances.TextElement.Font">
            <summary>
            The font to use.
            </summary>
        </member>
        <member name="P:dEngine.Instances.TextElement.TextAlignmentX">
            <summary>
            The horizontal alignment of the text.
            </summary>
        </member>
        <member name="P:dEngine.Instances.TextElement.TextAlignmentY">
            <summary>
            The vertical alignment of the text.
            </summary>
        </member>
        <member name="P:dEngine.Instances.TextElement.FontWeight">
            <summary>
            The weight of the text.
            </summary>
        </member>
        <member name="P:dEngine.Instances.TextElement.WordWrapping">
            <summary>
            Determines the method of word wrapping to use.
            </summary>
        </member>
        <member name="P:dEngine.Instances.TextElement.TextStrokeColour">
            <summary>
            The colour of the text stroke.
            </summary>
        </member>
        <member name="M:dEngine.Instances.TextElement.Arrange">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.TextElement.Destroy">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.TextBox">
            <summary>
            A text box which allows typing.
            </summary>
        </member>
        <member name="M:dEngine.Instances.TextBox.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.TextBox.CaretIndex">
            <summary>
            The index of the caret.
            </summary>
        </member>
        <member name="P:dEngine.Instances.TextBox.ClearTextOnFocus">
            <summary>
            Determines if the current text should be cleared when the TextBox is focused.
            </summary>
        </member>
        <member name="P:dEngine.Instances.TextBox.AllowMultiLine">
            <summary>
            Determines if new lines can be inputed.
            </summary>
            <remarks>
            This does not affect text manually set by the <see cref="P:dEngine.Instances.TextElement.Text" /> property.
            </remarks>
        </member>
        <member name="P:dEngine.Instances.TextBox.AllowSelection">
            <summary>
            Determines if text can be selected by dragging.
            </summary>
        </member>
        <member name="M:dEngine.Instances.TextBox.Destroy">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.TextBox.MoveCaret(System.Int32)">
            <summary>
            Moves caret N spaces to right.
            </summary>
        </member>
        <member name="T:dEngine.Instances.ISingleton">
            <summary>
            An interface for types which can only have one instance.
            Implementations must have a static "GetExisting()" object, which returns the singleton instance.
            </summary>
        </member>
        <member name="T:dEngine.Instances.SpotLight">
            <summary>
            A spot light.
            </summary>
            <seealso cref="T:dEngine.Instances.PointLight" />
        </member>
        <member name="M:dEngine.Instances.SpotLight.Destroy">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.Skeleton">
            <summary>
            A skeleton.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Skeleton.RootBone">
            <summary>
            The root bone of this skeleton.
            </summary>
        </member>
        <member name="T:dEngine.Instances.BlockMesh">
            <summary>
            A BlockMesh changes the appearance of its parent <see cref="T:dEngine.Instances.Part" />, regardless of <see cref="P:dEngine.Instances.Part.Size" /> and
            <see cref="P:dEngine.Instances.Part.Shape" /> properties.
            </summary>
        </member>
        <member name="M:dEngine.Instances.BlockMesh.#ctor">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.CylinderMesh">
            <summary>
            A CylinderMesh changes the appearance of its parent <see cref="T:dEngine.Instances.Part" />, regardless of <see cref="P:dEngine.Instances.Part.Size" /> and
            <see cref="P:dEngine.Instances.Part.Shape" /> properties.
            </summary>
        </member>
        <member name="M:dEngine.Instances.CylinderMesh.#ctor">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.FileMesh.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.FileMesh.MeshId">
            <summary>
            The content ID of the mesh data.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Mesh">
            <summary>
            A base class for meshes.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Mesh._geometry">
            <summary>
            The geometry to render.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Mesh.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Mesh.Offset">
            <summary>
            The offset of the mesh from its origin.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Mesh.Scale">
            <summary>
            The scale of the mesh.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Mesh.UsePartSize">
            <summary>
            Determines whether the mesh uses the parent's <see cref="P:dEngine.Instances.Part.Size" /> property.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Mesh.Material">
            <summary>
            The material to use for this mesh.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Mesh.OnAncestryChanged(dEngine.Instances.Instance,dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Mesh.InvokeGeometryUpdated">
            <summary>
            </summary>
        </member>
        <member name="M:dEngine.Instances.Mesh.SetGeometry(dEngine.Data.Geometry)">
            <summary>
            </summary>
        </member>
        <member name="T:dEngine.Instances.SkeletalMesh">
            <summary>
            A mesh which can be animated with a skeleton.
            </summary>
        </member>
        <member name="T:dEngine.Instances.StaticMesh">
            <summary>
            A regular mesh.
            </summary>
        </member>
        <member name="P:dEngine.Instances.StaticMesh.SimulatePhysics">
            <summary>
            Determines if the parent <see cref="T:dEngine.Instances.Part" />'s physics model is overridden by the mesh.
            </summary>
        </member>
        <member name="T:dEngine.Instances.EnumValue">
            <summary>
            A <see cref="T:dEngine.Instances.ValueContainer" /> that holds an enum value.
            </summary>
        </member>
        <member name="M:dEngine.Instances.EnumValue.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.EnumValue.Type">
            <summary>
            The type of enum to store.
            </summary>
        </member>
        <member name="P:dEngine.Instances.EnumValue.Value">
            <summary>
            The value that the container holds.
            </summary>
        </member>
        <member name="T:dEngine.Instances.BodyForce">
            <summary>
            Applies a constant force to the parent <see cref="T:dEngine.Instances.Part" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BodyForce.Force">
            <summary>
            The force to be applied.
            </summary>
        </member>
        <member name="M:dEngine.Instances.BodyForce.Destroy">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.BodyMover">
            <summary>
            Base class for physics force-related objects.
            </summary>
        </member>
        <member name="F:dEngine.Instances.BodyMover._parentPart">
            <summary>
            The part to apply force to.
            </summary>
        </member>
        <member name="M:dEngine.Instances.BodyMover.OnStep(dEngine.Instances.Part)">
            <summary>
            Called when the world this mover belongs to is stepped.
            </summary>
            <param name="part">The parent part at the time of the step.</param>
        </member>
        <member name="M:dEngine.Instances.BodyMover.OnAncestryChanged(dEngine.Instances.Instance,dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.BodyMover.OnWorldChanged(dEngine.Instances.IWorld,dEngine.Instances.IWorld)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.BodyMover.OnParentPartChanged(dEngine.Instances.Part)">
            <summary>
            Fired when <see cref="F:dEngine.Instances.BodyMover._parentPart" /> changes.
            </summary>
            <param name="parentPart"></param>
        </member>
        <member name="T:dEngine.Instances.CoreGui">
            <summary>
            A gui container that always renders to <see cref="P:dEngine.Services.Workspace.CurrentCamera" /> and is hidden from the Explorer view.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Flex">
            <summary />
        </member>
        <member name="T:dEngine.Instances.ArcHandles">
            <summary>
            An object which draws 3D handles around the axes of <see cref="P:dEngine.Instances.PVAdornment.Adornee" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ArcHandles.#ctor">
            <summary />
        </member>
        <member name="F:dEngine.Instances.ArcHandles.LeftMouseButtonDown">
            <summary>
            Fires when the left mouse button is pressed on a handle.
            </summary>
        </member>
        <member name="F:dEngine.Instances.ArcHandles.MouseDrag">
            <summary>
            Fires when the mouse moves while the left mouse button is held.
            </summary>
        </member>
        <member name="F:dEngine.Instances.ArcHandles.MouseEnter">
            <summary>
            Fires when the mouse enters the handle.
            </summary>
        </member>
        <member name="F:dEngine.Instances.ArcHandles.MouseLeave">
            <summary>
            Fires when the mouse leaves the handle.
            </summary>
        </member>
        <member name="F:dEngine.Instances.ArcHandles.RightMouseButtonUp">
            <summary>
            Fires when the left mouse button is pressed on a handle.
            </summary>
        </member>
        <member name="T:dEngine.Instances.AxisHandles">
            <summary>
            An object which draws 3D handles around the axes of <see cref="P:dEngine.Instances.PVAdornment.Adornee" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.AxisHandles.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.AxisHandles.Style">
            <summary>
            The style for the handles.
            </summary>
        </member>
        <member name="M:dEngine.Instances.AxisHandles.ChangeRenderObject">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.AxisHandles.OnAdorneeSet(dEngine.Instances.PVInstance,dEngine.Instances.PVInstance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.AxisHandles.Destroy">
            <inheritdoc />
        </member>
        <member name="F:dEngine.Instances.AxisHandles.MouseButton1Down">
            <summary>
            Fired when the left mouse button is pressed over a handle.
            </summary>
        </member>
        <member name="F:dEngine.Instances.AxisHandles.MouseButton1Up">
            <summary>
            Fired when the left mouse button is released over a handle.
            </summary>
        </member>
        <member name="F:dEngine.Instances.AxisHandles.MouseDrag">
            <summary>
            Fired when a handle is dragged.
            </summary>
        </member>
        <member name="F:dEngine.Instances.AxisHandles.MouseEnter">
            <summary>
            Fired when the mouse button enters a handle.
            </summary>
        </member>
        <member name="F:dEngine.Instances.AxisHandles.MouseLeave">
            <summary>
            Fired when the mouse leaves a handle.
            </summary>
        </member>
        <member name="T:dEngine.Instances.BaseHandles">
            <summary>
            An abstract class for drawing handles around the <see cref="P:dEngine.Instances.PVAdornment.Adornee" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BaseHandles.HeldHandles">
            <summary>
            Determines whether any handles are blocking the mouse.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Stack">
            <summary>
            Stacks child elements.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Stack.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Stack.Reversed">
            <summary>
            Determines whether to stack elements in reverse-order.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Stack.Orientation">
            <summary>
            The direction to stack child elements.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Stack.Offset">
            <summary>
            The space inbetween elements.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Stack.Measure">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Stack.OnChildAdded(dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Stack.OnChildRemoved(dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.Stack.FrameIndexComparer">
            <summary>
            Comparer for <see cref="P:dEngine.Instances.GuiElement.FrameIndex" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Stack.FrameIndexComparer.Compare(dEngine.Instances.GuiElement,dEngine.Instances.GuiElement)">
            <summary>
            Compares two GuiElements by their <see cref="P:dEngine.Instances.GuiElement.FrameIndex" />.
            </summary>
        </member>
        <member name="T:dEngine.Instances.PartOperation">
            <summary>
            A base class for CSG operations.
            </summary>
        </member>
        <member name="M:dEngine.Instances.PartOperation.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.PartOperation.ApplyMaterial">
            <summary>
            Determines whether <see cref="P:dEngine.Instances.Part.Material" /> and <see cref="P:dEngine.Instances.Part.BrickColour" /> properties are applied.
            </summary>
        </member>
        <member name="P:dEngine.Instances.PartOperation.CollisionFidelity">
            <summary>
            Determines the quality of the collision mesh for this operation.
            </summary>
        </member>
        <member name="T:dEngine.Instances.IntersectOperation">
            <summary>
            A part representing a Subtract CSG operation - a portion common to both objects.
            </summary>
        </member>
        <member name="T:dEngine.Instances.NegateOperation">
            <summary>
            A part representing a CSG Negate operation - a subtraction of one object from another.
            </summary>
        </member>
        <member name="M:dEngine.Instances.NegateOperation.#ctor">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.NegateOperation.Destroy">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.UnionOperation">
            <summary>
            A part representing a Union CSG operation - a merger of two objects into one.
            </summary>
        </member>
        <member name="M:dEngine.Instances.UnionOperation.#ctor">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.UnionOperation.Destroy">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.Canvas3D">
            <summary>
            A gui element which renders a 3D scene.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Canvas3D.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Canvas3D.IsLoaded">
            <summary />
        </member>
        <member name="P:dEngine.Instances.Canvas3D.CurrentCamera">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Canvas3D.Physics">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Canvas3D.RenderObjectProvider">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Canvas3D.IsRenderable">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Canvas3D.FindPartOnRay(dEngine.Ray,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Canvas3D.FindPartOnRay(dEngine.Ray,Neo.IronLua.LuaTable,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Canvas3D.FindPartOnRay(dEngine.Ray,System.Func{System.Object,System.Object},System.Single)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Canvas3D.Arrange">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Canvas3D.Destroy">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.Decal">
            <summary>
            Projects a texture onto a surface.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Decal.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.Decal.Material">
            <summary>
            The material to apply to the decal.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Decal.TextureId">
            <summary>
            Comment
            </summary>
        </member>
        <member name="M:dEngine.Instances.Decal.OnAncestryChanged(dEngine.Instances.Instance,dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Decal.Destroy">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Decal.RenderObject">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Decal.RenderIndex">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Decal.RenderData">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Decal.UpdateRenderData">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.BillboardGui">
            <summary>
            A gui which renders to a billboard - a plane that always faces the camera.
            </summary>
        </member>
        <member name="M:dEngine.Instances.BillboardGui.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.BillboardGui.Size">
            <summary>
            The size of the billboard.
            </summary>
            <remarks>
            <see cref="P:dEngine.UDim2.Scale" /> is relative to the size of the adornee.
            <see cref="P:dEngine.UDim2.Absolute" /> is in screen pixels.
            </remarks>
        </member>
        <member name="P:dEngine.Instances.BillboardGui.Offset">
            <summary>
            The offset from the adornee Position.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BillboardGui.Adornee">
            <summary>
            The object this billboard is adorned to.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BillboardGui.AlwaysOnTop">
            <summary>
            Determines if the billboard is rendered ontop of other objects.
            </summary>
        </member>
        <member name="P:dEngine.Instances.BillboardGui.AbsolutePosition">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.BillboardGui.AbsoluteSize">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.BillboardGui.Destroy">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.GuiBase">
            <summary>
            Base class for 2D and 3D guis.
            </summary>
        </member>
        <member name="T:dEngine.Instances.GuiBase2D">
            <summary>
            The base class of all gui screens and elements.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiBase2D.AbsolutePosition">
            <summary>
            Gets the absolute Position of the gui object.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiBase2D.AbsoluteSize">
            <summary>
            Gets the absolute size of the gui object.
            </summary>
        </member>
        <member name="M:dEngine.Instances.GuiBase2D.BoundsCheck(dEngine.Vector2)">
            <summary>
            Returns true if the given point is within the bounds of this element,
            </summary>
        </member>
        <member name="T:dEngine.Instances.GuiBase3D">
            <summary>
            Base class for 3D GUI objects.
            </summary>
        </member>
        <member name="M:dEngine.Instances.GuiBase3D.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.GuiBase3D.Colour">
            <summary>
            The colour of the gui.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiBase3D.Transparency">
            <summary>
            The transparency of the gui.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiBase3D.Visible">
            <summary>
            Determines if the gui object is visible.
            </summary>
        </member>
        <member name="T:dEngine.Instances.LayerCollector">
            <summary>
            A object draws <see cref="T:dEngine.Instances.GuiElement" />s.
            </summary>
            <remarks>
            Must be parented to a <see cref="T:dEngine.Instances.Camera" /> to render.
            </remarks>
        </member>
        <member name="M:dEngine.Instances.LayerCollector.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.LayerCollector.AbsolutePosition">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.LayerCollector.AbsoluteSize">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.LayerCollector.Enabled">
            <summary>
            Determines if the container and its elements are visible/usable.
            </summary>
        </member>
        <member name="M:dEngine.Instances.LayerCollector.HitTest(System.Single,System.Single)">
            <summary>
            Returns the topmost element that contains the given point.
            </summary>
        </member>
        <member name="M:dEngine.Instances.LayerCollector.HitTest(System.Single,System.Single,dEngine.Instances.GuiElement@)">
            <summary>
            Returns the topmost element that contains the given point.
            </summary>
        </member>
        <member name="M:dEngine.Instances.LayerCollector.HitTestMultiple(dEngine.Vector2)">
            <summary>
            Returns a list of elements that contain the given point;
            </summary>
        </member>
        <member name="M:dEngine.Instances.LayerCollector.Destroy">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.Part">
            <summary>
            A building block.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Part.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Part.BrickColour">
            <summary>
            The colour of the block.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Part.Shape">
            <summary>
            The shape of the part.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Part.CanCollide">
            <summary>
            Determines if this block can collide with other objects.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Part.Material">
            <summary>
            The material to render this part with.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Part.Locked">
            <summary>
            If false, this part should not be selectable by 3D pickers.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Part.Transparency">
            <summary>
            The transparency of the part.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Part.Smoothness">
            <summary>
            Determines how smooth the surface is.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Part.Metallic">
            <summary>
            Determines how metallic the surface is.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Part.CFrame">
            <summary>
            The 3D position/rotation.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Part.Size">
            <summary>
            The size of the instance.
            </summary>
            <remarks>
            When accessed by a model this may calculate the bounding box.
            </remarks>
        </member>
        <member name="P:dEngine.Instances.Part.PhysicalProperties">
            <summary>
            The properties of the physics engine.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Part.Position">
            <summary>
            The position of <see cref="P:dEngine.Instances.Part.CFrame" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Part.Rotation">
            <summary>
            The rotation of <see cref="P:dEngine.Instances.Part.CFrame" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Part.Velocity">
            <summary>
            The linear velocity of this object.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Part.RotVelocity">
            <summary>
            The angular velocity of this object.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Part.Anchored">
            <summary>
            If true, the part will be physically immovable and static.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Part.RenderObject">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Part.RenderIndex">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Part.RenderData">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Part.UpdateRenderData">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Part.op_Implicit(dEngine.Instances.Part)~BulletSharp.RigidBody">
            <summary />
        </member>
        <member name="M:dEngine.Instances.Part.SetNetworkOwner(dEngine.Instances.Player)">
            <summary>
            Sets the player who should own this part.
            </summary>
            <remarks>
            If `player` is set to null, the server will take ownership.
            </remarks>
        </member>
        <member name="M:dEngine.Instances.Part.GetNetworkOwner">
            <summary>
            Returns the player that owns this part.
            </summary>
            <remarks>
            If `nil` is returned it means the server is the owner.
            </remarks>
        </member>
        <member name="M:dEngine.Instances.Part.OnWorldChanged(dEngine.Instances.IWorld,dEngine.Instances.IWorld)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Part.GetMesh">
            <summary>
            Gets the mesh representing this part. If the part has a Mesh, the child geometry will be returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.Instances.Part.Destroy">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Part.BreakJoints">
            <summary>
            Breaks any joint or constraint this object is a part of.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Part.GetConnectedParts(System.Boolean)">
            <summary>
            Returns a list of parts that this part is connected to.
            </summary>
            <param name="recursive">If true, includes all parts in the assembly.</param>
        </member>
        <member name="M:dEngine.Instances.Part.GetConstraints">
            <summary>
            Returns a list of constraints this object is an attachment of.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.Instances.Part.GetMass">
            <summary>
            Calculates the mass of this part.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Part.RebuildRigidBody">
            <summary>
            Called when a property that requires the RigidBody to be recreated is changed.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Part.GetRenderCFrame">
            <summary>
            Returns the interpolated CFrame.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Part.CanRender">
            <summary>
            Returns true if the part can be rendered.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Part.ChangeRenderObject">
            <summary>
            Removes this part from the current <see cref="T:dEngine.Graphics.RenderObject" />, and, if <see cref="M:dEngine.Instances.Part.CanRender" />, adds it to a
            new one.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Part.Moved">
            <summary>
            Fired when <see cref="P:dEngine.Instances.Part.CFrame" /> is set or the part is moved in the physics engine.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Part.Touched">
            <summary>
            Fired when another object comes into contact with this object.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Part.TouchEnded">
            <summary>
            Fired when another object stops touching this object.
            </summary>
        </member>
        <member name="T:dEngine.Instances.PartAdornment">
            <summary>
            A base class for adornments which can be attached to a <see cref="T:dEngine.Instances.Part" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.PartAdornment.Adornee">
            <summary>
            The object to adorn to.
            </summary>
        </member>
        <member name="M:dEngine.Instances.PartAdornment.Destroy">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.PVAdornment">
            <summary>
            A base class for adornments which can be attached to a <see cref="T:dEngine.Instances.PVInstance" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.PVAdornment.Adornee">
            <summary>
            The object to adorn to.
            </summary>
        </member>
        <member name="M:dEngine.Instances.PVAdornment.OnAdorneeSet(dEngine.Instances.PVInstance,dEngine.Instances.PVInstance)">
            <summary>
            Invoked when the <see cref="P:dEngine.Instances.PVAdornment.Adornee" /> property is changed.
            </summary>
        </member>
        <member name="M:dEngine.Instances.PVAdornment.OnAdorneeDestroyed">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.PVAdornment.Destroy">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.ScriptDebugger">
            <summary>
            A debug system for a script.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ScriptDebugger.#ctor(dEngine.Instances.LuaSourceContainer)">
            <summary />
        </member>
        <member name="P:dEngine.Instances.ScriptDebugger.CurrentLine">
            <summary>
            The current line that the script is on.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ScriptDebugger.IsPaused">
            <summary>
            Determines if the script is paused.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ScriptDebugger.Script">
            <summary>
            The script this debugger is attached to.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ScriptDebugger.AddWatch(System.String)">
            <summary>
            Adds a watch to the debugger.
            </summary>
            <param name="expression">The expression to compute the watch value.</param>
            <returns>The watch.</returns>
        </member>
        <member name="M:dEngine.Instances.ScriptDebugger.SetBreakpoint(System.Int32)">
            <summary>
            Adds a breakpoint to the debugger.
            </summary>
            <param name="line">The line to add the breakpoint to.</param>
            <returns>The breakpoint.</returns>
        </member>
        <member name="M:dEngine.Instances.ScriptDebugger.GetBreakpoints">
            <summary>
            Returns a list of breakpoints.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ScriptDebugger.GetWatches">
            <summary>
            Returns a list of watches.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ScriptDebugger.GetGlobals">
            <summary>
            Returns all global variables in the script.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ScriptDebugger.GetLocals">
            <summary>
            Returns all local variables in the script.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ScriptDebugger.SetGlobal(System.String,System.Object)">
            <summary>
            Sets a global variable in the script.
            </summary>
        </member>
        <member name="F:dEngine.Instances.ScriptDebugger.BreakpointAdded">
            <summary>
            Fired when a breakpoint is added to the script.
            </summary>
        </member>
        <member name="F:dEngine.Instances.ScriptDebugger.BreakpointRemoved">
            <summary>
            Fired when a breakpoint is removed from the script.
            </summary>
        </member>
        <member name="F:dEngine.Instances.ScriptDebugger.EncounteredBreak">
            <summary>
            Fired when a breakpoint is hit.
            </summary>
        </member>
        <member name="F:dEngine.Instances.ScriptDebugger.Resuming">
            <summary>
            Fired when a script resumes after a break.
            </summary>
        </member>
        <member name="F:dEngine.Instances.ScriptDebugger.WatchAdded">
            <summary>
            Fired when a watch is added.
            </summary>
        </member>
        <member name="F:dEngine.Instances.ScriptDebugger.WatchRemoved">
            <summary>
            Fired when a watch is removed.
            </summary>
        </member>
        <member name="T:dEngine.Instances.DebuggerWatch">
            <summary>
            A script watch.
            </summary>
        </member>
        <member name="P:dEngine.Instances.DebuggerWatch.Debugger">
            <summary>
            The debugger.
            </summary>
        </member>
        <member name="P:dEngine.Instances.DebuggerWatch.Expression">
            <summary>
            The watch expression.
            </summary>
        </member>
        <member name="P:dEngine.Instances.DebuggerWatch.Value">
            <summary>
            The value of the watch.
            </summary>
        </member>
        <member name="T:dEngine.Instances.DebuggerBreakpoint">
            <summary>
            A script breakpoint.
            </summary>
        </member>
        <member name="P:dEngine.Instances.DebuggerBreakpoint.Debugger">
            <summary>
            The debugger.
            </summary>
        </member>
        <member name="P:dEngine.Instances.DebuggerBreakpoint.Line">
            <summary>
            The line the breakpoint is on.
            </summary>
        </member>
        <member name="P:dEngine.Instances.DebuggerBreakpoint.Condition">
            <summary>
            The condition to trigger the breakpoint.
            </summary>
        </member>
        <member name="P:dEngine.Instances.DebuggerBreakpoint.IsEnabled">
            <summary>
            Determines whether the breakpoint is enabled.
            </summary>
        </member>
        <member name="T:dEngine.Instances.SelectionBox">
            <summary>
            An object which draws a box outline around its adornee.
            </summary>
        </member>
        <member name="M:dEngine.Instances.SelectionBox.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.SelectionBox.LineThickness">
            <summary>
            The thickness of the lines.
            </summary>
        </member>
        <member name="M:dEngine.Instances.SelectionBox.OnAdorneeSet(dEngine.Instances.PVInstance,dEngine.Instances.PVInstance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.SelectionBox.Destroy">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.SelectionBox.OnAdorneeChangedEvent(System.String)">
            <summary>
            Called when the Adornee.Changed event fires.
            </summary>
        </member>
        <member name="M:dEngine.Instances.SelectionBox.Dirty">
            <summary>
            Forces the selection box to update.
            </summary>
        </member>
        <member name="T:dEngine.Instances.SurfaceGui">
            <summary>
            A GUI which is rendered on the face of a <see cref="T:dEngine.Instances.Part" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.SurfaceGui.Face">
            <summary>
            The face of the <see cref="P:dEngine.Instances.SurfaceGui.Adornee" /> which this gui will be rendered to.
            </summary>
        </member>
        <member name="P:dEngine.Instances.SurfaceGui.Adornee">
            <summary>
            The <see cref="T:dEngine.Instances.Part" /> to render on.
            </summary>
        </member>
        <member name="P:dEngine.Instances.SurfaceGui.AbsolutePosition">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.SurfaceGui.AbsoluteSize">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.IWorld">
            <summary>
            Interface for worlds/environments.
            </summary>
        </member>
        <member name="P:dEngine.Instances.IWorld.CurrentCamera">
            <summary>
            The <see cref="T:dEngine.Instances.Camera" /> that renders this world.
            </summary>
        </member>
        <member name="P:dEngine.Instances.IWorld.Physics">
            <summary>
            The <see cref="T:dEngine.PhysicsSimulation" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.IWorld.RenderObjectProvider">
            <summary>
            The <see cref="T:dEngine.Graphics.WorldRenderer" /> for this world.
            </summary>
        </member>
        <member name="P:dEngine.Instances.IWorld.IsRenderable">
            <summary>
            Determines if this world supports rendering. (Requires a <see cref="P:dEngine.Instances.IWorld.RenderObjectProvider" />)
            </summary>
        </member>
        <member name="P:dEngine.Instances.IWorld.IsLoaded">
            <summary>
            Determines if the world is loaded.
            </summary>
        </member>
        <member name="M:dEngine.Instances.IWorld.FindPartOnRay(dEngine.Ray,System.Single)">
            <summary>
            Performs a raycast for the given ray.
            </summary>
        </member>
        <member name="M:dEngine.Instances.IWorld.FindPartOnRay(dEngine.Ray,Neo.IronLua.LuaTable,System.Single)">
            <summary>
            Performs a raycast for the given ray, filtering out blacklisted results.
            </summary>
        </member>
        <member name="M:dEngine.Instances.IWorld.FindPartOnRay(dEngine.Ray,System.Func{System.Object,System.Object},System.Single)">
            <summary>
            Performs a raycast for the given ray, filtering based on a predicate.
            </summary>
        </member>
        <member name="T:dEngine.Instances.LocalScript">
            <summary>
            A script which is executed by the client.
            </summary>
            <remarks>
            A <see cref="T:dEngine.Instances.LocalScript" /> must be a descendant of <see cref="P:dEngine.Services.Players.LocalPlayer" /> or its character.
            </remarks>
        </member>
        <member name="M:dEngine.Instances.LocalScript.CheckIfAncestorValid">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.Terrain">
            <summary>
            An object representing the voxel-based terrain system.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Terrain.MaxChunks">
            <summary>
            The maximum number of chunks per axis.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Terrain.ChunkSize">
            <summary>
            The width, height and length of a chunk.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Terrain.CellsPerChunk">
            <summary>
            The number of cells per chunk.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Terrain.MaxExtents">
            <summary>
            Displays the boundaries of the largest possible region.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Terrain.GetCell(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the cell at the given cell coordinates.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Terrain.SetCell(System.Int32,System.Int32,System.Int32,dEngine.CellMaterial,System.SByte)">
            <summary>
            Sets a cell at the given cell coordinates.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Terrain.CellCenterToWorld(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the world position of the center of the terrain cell at x, y, z.
            </summary>
            <param name="x">The X position in cell coords.</param>
            <param name="y">The Y position in cell coords.</param>
            <param name="z">The Z position in cell coords.</param>
        </member>
        <member name="M:dEngine.Instances.Terrain.CellCornerToWorld(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the world position of the lower-left-forward corner of the terrain cell at x, y, z.
            </summary>
            <param name="x">The X position in cell coords.</param>
            <param name="y">The Y position in cell coords.</param>
            <param name="z">The Z position in cell coords.</param>
        </member>
        <member name="M:dEngine.Instances.Terrain.WorldToCell(dEngine.Vector3)">
            <summary>
            Returns the cell coordinate for the given world position.
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:dEngine.Instances.Terrain.Clear">
            <summary>
            Replaces all voxels with empty space.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Terrain.CountCells">
            <summary>
            Returns the number of non-empty cells.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Terrain.FillRegion(dEngine.Region3int16,dEngine.CellMaterial,System.SByte)">
            <summary>
            Fills a region of terrain.
            </summary>
            <param name="region">The region to fill.</param>
            <param name="material">The material for each cell.</param>
            <param name="density">The density for each cell.</param>
        </member>
        <member name="T:dEngine.Instances.Terrain.Chunk">
            <summary>
            A terrain chunk.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Terrain.Chunk.OccupiedCells">
            <summary>
            The number of non-empty cells in the chunk.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Terrain.Chunk.ToString">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Terrain.Chunk.ClearChunk">
            <summary>
            Sets all cells in the chunk to air.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Terrain.Cell.ToString">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.TerrainRegion">
            <summary>
            A TerrainRegion stores the data for a region of <see cref="T:dEngine.Instances.Terrain" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.TerrainRegion.SizeInCells">
            <summary>
            The size of the region in cells.
            </summary>
        </member>
        <member name="T:dEngine.Instances.BinaryValue">
            <summary>
            A <see cref="T:dEngine.Instances.ValueContainer" /> for holding binary data.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Weld">
            <summary>
            A weld joint.
            </summary>
            <remarks>
            Involded part is destroyed, or its CFrame is set, the weld will be destroyed.
            </remarks>
        </member>
        <member name="M:dEngine.Instances.Weld.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Weld.C0">
            <summary>
            Determines how the `offset point` should be attached to <see cref="P:dEngine.Instances.JointInstance.Part0" />
            </summary>
        </member>
        <member name="P:dEngine.Instances.Weld.C1">
            <summary>
            Determines how <see cref="P:dEngine.Instances.JointInstance.Part1" /> should be attached to the `offset point`.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Weld.Destroy">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Weld.UpdateJoint">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.Light">
            <summary>
            Base class for lights.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Light.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Light.Position">
            <summary>
            The position of the light.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Light.IsEnabled">
            <summary>
            Determines if the light is enabled.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Light.CastsShadows">
            <summary>
            Determines if the light casts shadows.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Light.Colour">
            <summary>
            The colour of the light.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Light.OnAncestryChanged(dEngine.Instances.Instance,dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.PointLight">
            <summary>
            A point light.
            </summary>
            <seealso cref="T:dEngine.Instances.SpotLight" />
        </member>
        <member name="M:dEngine.Instances.PointLight.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.PointLight.Range">
            <summary>
            The range of the light.
            </summary>
        </member>
        <member name="P:dEngine.Instances.PointLight.Falloff">
            <summary>
            The falloff distance for the light.
            </summary>
        </member>
        <member name="P:dEngine.Instances.PointLight.Brightness">
            <summary>
            Total energy that the light emits.
            </summary>
        </member>
        <member name="M:dEngine.Instances.PointLight.Destroy">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.CFrameValue">
            <summary>
            A <see cref="T:dEngine.Instances.ValueContainer" /> that holds a <see cref="T:dEngine.CFrame" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.CFrameValue.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.CFrameValue.Value">
            <summary>
            The value that the container holds.
            </summary>
        </member>
        <member name="T:dEngine.Instances.ClientReplicator">
            <summary>
            Represents the client's connection to a server.
            </summary>
            <remarks>
            The client creates this when it connects to a server.
            </remarks>
        </member>
        <member name="M:dEngine.Instances.ClientReplicator.Destroy">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.Folder">
            <summary>
            A container for organizing objects.
            </summary>
            <seealso cref="T:dEngine.Instances.Model" />
        </member>
        <member name="P:dEngine.Instances.Folder.Hue">
            <summary>
            The hue of the folder.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Frame">
            <summary>
            A basic rectangle element.
            </summary>
        </member>
        <member name="T:dEngine.Instances.ScreenGui">
            <summary>
            A gui container for elements to be drawn to the screen.
            </summary>
            <remarks>
            A <see cref="T:dEngine.Instances.ScreenGui" /> must be parented to a <see cref="T:dEngine.Instances.Camera" /> to be rendered.
            </remarks>
        </member>
        <member name="T:dEngine.Instances.GuiElement">
            <summary>
            Base class for all 2D GUI elements.
            </summary>
        </member>
        <member name="M:dEngine.Instances.GuiElement.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.GuiElement.IsMouseOver">
            <summary>
            Determines if the mouse is currently hovering over this element.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.BackgroundTransparency">
            <summary>
            Sets the transparency of <see cref="P:dEngine.Instances.GuiElement.BackgroundColour" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.BackgroundColour">
            <summary>
            The colour of the background.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.Position">
            <summary>
            The Position of the element relative to its parent.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.Size">
            <summary>
            The size of the element.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.CornerRadius">
            <summary>
            The radius of each corner.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.Visible">
            <summary>
            Determines if this element can be rendered.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.ClipDescendants">
            <summary>
            Determines if overflowing descendants are clipped.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.ZIndex">
            <summary>
            The layer that this element is drawn at.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.Rotation">
            <summary>
            The clockwise rotation of the gui in degrees.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.BorderThickness">
            <summary>
            The thickness of the border.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.BorderColour">
            <summary>
            The colour of the border.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.FrameIndex">
            <summary>
            The index for the parent frame. Used for <see cref="T:dEngine.Instances.Stack" /> and <see cref="T:dEngine.Instances.Flex" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.AlignmentX">
            <summary>
            The horizontal alignment of the element.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.AlignmentY">
            <summary>
            The vertical alignment of the element.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.IsHitTestVisible">
            <summary>
            Determines whether this element is ingored by hit tests.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.ShadowOffset">
            <summary />
        </member>
        <member name="P:dEngine.Instances.GuiElement.ShadowWidth">
            <summary />
        </member>
        <member name="P:dEngine.Instances.GuiElement.ShadowBlur">
            <summary />
        </member>
        <member name="P:dEngine.Instances.GuiElement.Container">
            <summary>
            The container that this element is a descendant of.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.AbsoluteSize">
            <summary>
            Gets the absolute size of the element, with scale taken into account.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.AbsolutePosition">
            <summary>
            Gets the absolute size of the element, with scale taken into account.
            </summary>
        </member>
        <member name="P:dEngine.Instances.GuiElement.Focusable">
            <summary>
            Determines if this element can be focused.
            </summary>
        </member>
        <member name="M:dEngine.Instances.GuiElement.IsFocused">
            <summary>
            Determines if the text box is focused.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.Instances.GuiElement.OnMouseEnter(System.Int32,System.Int32)">
            <summary>
            Invoked on <see cref="F:dEngine.Instances.GuiElement.MouseEnter" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.GuiElement.OnMouseLeave(System.Int32,System.Int32)">
            <summary>
            Invoked on <see cref="F:dEngine.Instances.GuiElement.MouseLeave" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.GuiElement.CreateResources">
            <summary>
            Callback to create D2D resources.
            </summary>
        </member>
        <member name="M:dEngine.Instances.GuiElement.OnAncestryChanged(dEngine.Instances.Instance,dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.GuiElement.Focus">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.GuiElement.Unfocus">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.GuiElement.Measure">
            <summary>
            Updates <see cref="P:dEngine.Instances.GuiElement.AbsoluteSize" /> and <see cref="P:dEngine.Instances.GuiElement.AbsolutePosition" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.GuiElement.Arrange">
            <summary>
            Updates <see cref="F:dEngine.Instances.GuiElement.RenderRect" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.GuiElement.Destroy">
            <inheritdoc />
        </member>
        <member name="F:dEngine.Instances.GuiElement.Measured">
            <summary>
            Fired when the element is resized or repositioned.
            </summary>
        </member>
        <member name="F:dEngine.Instances.GuiElement.MouseEnter">
            <summary>
            Fired when the mouse enters this element.
            </summary>
        </member>
        <member name="F:dEngine.Instances.GuiElement.MouseLeave">
            <summary>
            Fired when the mouse leaves this element.
            </summary>
        </member>
        <member name="F:dEngine.Instances.GuiElement.MouseMove">
            <summary>
            Fired when the mouse moves inside this element.
            </summary>
        </member>
        <member name="F:dEngine.Instances.GuiElement.MouseWheel">
            <summary>
            Fired when the mouse scrolls inside this element.
            </summary>
        </member>
        <member name="F:dEngine.Instances.GuiElement.GotFocus">
            <summary>
            Fired when this element gains focus.
            </summary>
        </member>
        <member name="F:dEngine.Instances.GuiElement.LostFocus">
            <summary>
            Fired when this element loses focus.
            </summary>
        </member>
        <member name="F:dEngine.Instances.GuiElement.MouseButton1Click">
            <summary>
            Fires when the mouse has fully left clicked the button.
            </summary>
        </member>
        <member name="F:dEngine.Instances.GuiElement.MouseButton1Down">
            <summary>
            Fires when the left mouse button has been pressed over this element.
            </summary>
        </member>
        <member name="F:dEngine.Instances.GuiElement.MouseButton1Up">
            <summary>
            Fires when the left mouse button has been released over this element.
            </summary>
        </member>
        <member name="F:dEngine.Instances.GuiElement.MouseButton2Click">
            <summary>
            Fires when the mouse has fully right clicked the button.
            </summary>
        </member>
        <member name="F:dEngine.Instances.GuiElement.MouseButton2Down">
            <summary>
            Fires when the right mouse button has been pressed over this element.
            </summary>
        </member>
        <member name="F:dEngine.Instances.GuiElement.MouseButton2Up">
            <summary>
            Fires when the right mouse button has been released over this element.
            </summary>
        </member>
        <member name="T:dEngine.Instances.ImageLabel">
            <summary>
            A gui element which can draw an image.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ImageLabel.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.ImageLabel.ImageId">
            <summary>
            The image file.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ImageLabel.ExtendMode">
            <summary>
            The image extend mode to use when the size of the image is bigger than the source image.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ImageLabel.ScalingMode">
            <summary>
            The bitmap scaling mode to use.
            </summary>
        </member>
        <member name="P:dEngine.Instances.ImageLabel.ImageTransparency">
            <summary>
            The transparency of the image.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ImageLabel.Destroy">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.TextLabel">
            <summary>
            A gui element which draws text.
            </summary>
        </member>
        <member name="M:dEngine.Instances.TextLabel.#ctor">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.JointInstance">
            <summary>
            Base class for joints.
            </summary>
        </member>
        <member name="P:dEngine.Instances.JointInstance.Part0">
            <summary>
            The primary part.
            </summary>
        </member>
        <member name="P:dEngine.Instances.JointInstance.Part1">
            <summary>
            The secondary part.
            </summary>
        </member>
        <member name="M:dEngine.Instances.JointInstance.UpdateJoint">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.NetworkReplicator">
            <summary>
            Base class for the client and server replicator classes.
            </summary>
        </member>
        <member name="M:dEngine.Instances.NetworkReplicator.#ctor(Lidgren.Network.NetConnection,dEngine.Instances.Player)">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.NetworkReplicator.IsConnected">
            <summary>
            Gets whether or not the connection is connected.
            </summary>
        </member>
        <member name="P:dEngine.Instances.NetworkReplicator.Player">
            <summary>
            The player that this replicator is connected to.
            </summary>
        </member>
        <member name="P:dEngine.Instances.NetworkReplicator.ReplicationEnabled">
            <summary>
            Determines if replication packets should be sent/received.
            </summary>
        </member>
        <member name="P:dEngine.Instances.NetworkReplicator.Address">
            <summary>
            The address of this connection.
            </summary>
        </member>
        <member name="P:dEngine.Instances.NetworkReplicator.Port">
            <summary>
            The port this connection is running on.
            </summary>
        </member>
        <member name="M:dEngine.Instances.NetworkReplicator.GetPlayer">
            <summary>
            Returns the player which is associated with this replicator.
            </summary>
        </member>
        <member name="M:dEngine.Instances.NetworkReplicator.GetLidgrenStatsString">
            <summary>
            Returns a string representation of network statistics.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.Instances.NetworkReplicator.CloseConnection(System.String)">
            <summary>
            Disconnects the replicator, ending the connection.
            </summary>
        </member>
        <member name="M:dEngine.Instances.NetworkReplicator.Destroy">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.NumberValue">
            <summary>
            A <see cref="T:dEngine.Instances.ValueContainer" /> that holds a <see cref="T:System.Double" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.NumberValue.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.NumberValue.Value">
            <summary>
            The value this container holds.
            </summary>
        </member>
        <member name="T:dEngine.Instances.ObjectValue">
            <summary>
            A <see cref="T:dEngine.Instances.ValueContainer" /> that holds an <see cref="T:dEngine.Instances.Instance" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.ObjectValue.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.ObjectValue.Value">
            <summary>
            The value this container holds.
            </summary>
        </member>
        <member name="T:dEngine.Instances.RemoteEvent">
            <summary>
            A networked event.
            </summary>
        </member>
        <member name="M:dEngine.Instances.RemoteEvent.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.RemoteEvent.DeliveryMethod">
            <summary>
            The delivery method to use.
            </summary>
        </member>
        <member name="M:dEngine.Instances.RemoteEvent.FireClient(dEngine.Instances.Player,System.Object[])">
            <summary>
            Fires <see cref="F:dEngine.Instances.RemoteEvent.OnClientEvent" /> for the provided player.
            </summary>
            <param name="player">The player to fire the event for.</param>
            <param name="args">The arguments to fire the event with.</param>
        </member>
        <member name="M:dEngine.Instances.RemoteEvent.FireServer(System.Object[])">
            <summary>
            Fires <see cref="F:dEngine.Instances.RemoteEvent.OnServerEvent" /> for the server.
            </summary>
            <param name="args">The arguments to fire the event with.</param>
        </member>
        <member name="F:dEngine.Instances.RemoteEvent.OnClientEvent">
            <summary>
            Fired on the client when the server invokes this event.
            </summary>
        </member>
        <member name="F:dEngine.Instances.RemoteEvent.OnServerEvent">
            <summary>
            Fired on the server when the client invokes this event.
            </summary>
        </member>
        <member name="T:dEngine.Instances.RemoteFunction">
            <summary>
            A networked method.
            </summary>
        </member>
        <member name="M:dEngine.Instances.RemoteFunction.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.RemoteFunction.DeliveryMethod">
            <summary>
            The delivery method to use.
            </summary>
        </member>
        <member name="P:dEngine.Instances.RemoteFunction.OnClientInvoke">
            <summary>
            The callback for when the server invokes this function.
            </summary>
            <remarks>
            This function will execute on the client everytime the server invokes it with InvokeClient()
            </remarks>
        </member>
        <member name="P:dEngine.Instances.RemoteFunction.OnServerInvoke">
            <summary>
            The callback for when the client invokes this function.
            </summary>
            <remarks>
            This function will execute on the server everytime the client invokes it with InvokeServer()
            </remarks>
        </member>
        <member name="M:dEngine.Instances.RemoteFunction.InvokeClient(dEngine.Instances.Player,System.Object[])">
            <summary>
            Invokes the function that the provided player has bound to this instance.
            </summary>
        </member>
        <member name="M:dEngine.Instances.RemoteFunction.InvokeServer(System.Object[])">
            <summary>
            Invokes the function that the server has bound to this instance.
            </summary>
        </member>
        <member name="T:dEngine.Instances.ServerReplicator">
            <summary>
            Represents the server's connection to a client.
            </summary>
            <remarks>
            The server creates this when a client connects.
            </remarks>
        </member>
        <member name="M:dEngine.Instances.ServerReplicator.CloseConnection(System.String)">
            <inheritdoc />
        </member>
        <member name="F:dEngine.Instances.ServerReplicator.TicketProcessed">
            <summary>
            Fired when the player's authentication ticket is processed.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Player">
            <summary>
            Represents a user in-game. A player object is added to the <see cref="T:dEngine.Services.Players" /> service when a player joins the
            server.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Player.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Player.IsLocalPlayer">
            <summary>
            Gets whether or not this player is the <see cref="P:dEngine.Services.Players.LocalPlayer" />
            </summary>
        </member>
        <member name="P:dEngine.Instances.Player.Team">
            <summary>
            The team that this player is on.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Player.PlayerGui">
            <summary>
            This player's <see cref="T:dEngine.Instances.PlayerGui" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Player.Character">
            <summary>
            The player's <see cref="T:dEngine.Instances.Character" />.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Player.UserId">
            <summary>
            The player's UserID. (SteamID3)
            </summary>
        </member>
        <member name="P:dEngine.Instances.Player.Replicator">
            <summary>
            The replicator that represents this player's connection.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Player.IsFriend">
            <summary>
            Returns true if this player is a friend of the <see cref="P:dEngine.Services.Players.LocalPlayer" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Player.IsTeamMate">
            <summary>
            Determines if this player is on the same team as the <see cref="P:dEngine.Services.Players.LocalPlayer" />.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.Instances.Player.Kick(System.String)">
            <summary>
            Disconnects player from the server.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="M:dEngine.Instances.Player.GetOnlineFriends(System.Int32)">
            <summary>
            Returns an array of friends who are online.
            </summary>
            <param name="maxFriends">The maximum number of entries to return.</param>
        </member>
        <member name="M:dEngine.Instances.Player.GetPlayerFromCharacter(dEngine.Instances.Character)">
            <summary>
            Returns the player that owns the given character.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Player.LoadCharacter">
            <summary>
            Spawns a new <see cref="P:dEngine.Instances.Player.Character" /> for the given player. If the player already has a character it will be destroyed.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Player.Destroy">
            <inheritdoc />
        </member>
        <member name="F:dEngine.Instances.Player.CharacterAdded">
            <summary>
            Fired when the player's character has spawned.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Player.CharacterRemoving">
            <summary>
            Fired when the player's character is about to be removed.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Player.Disconnected">
            <summary>
            Fired when the player has been disconnected or kicked from the server.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Sky">
            <summary>
            An object which draws the sky.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Sky.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Sky.CubemapId">
            <summary>
            The cubemap texture.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Sky.Starfield">
            <summary>
            The texture for the stars at night.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Sky.Destroy">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Sky.RenderObject">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Sky.RenderIndex">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Sky.RenderData">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Sky.UpdateRenderData">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Instances.Sound">
            <summary>
            An instance which represents a single sound.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Sound.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Instances.Sound.SoundId">
            <summary>
            The source of the media file.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Sound.Looped">
            <summary>
            If true the audio will loop.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Sound.Volume">
            <summary>
            The volume multiplier of the sound.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Sound.Pitch">
            <summary>
            The volume multiplier of the sound.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Sound.MinDistance">
            <summary>
            The distance at which the sound will begin to attenuate.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Sound.MaxDistance">
            <summary>
            The maximum distance that the sound can be heard from.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Sound.Attenuation">
            <summary>
            The attenuation mode.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Sound.IsPlaying">
            <summary>
            Gets whether or not the sound is playing.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Sound.IsPaused">
            <summary>
            Gets whether or not the sound is paused.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Sound.IsLoaded">
            <summary>
            Gets whether or not the sound has loaded.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Sound.TrackLength">
            <summary>
            The length of the current sound in seconds.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Sound.TrackPosition">
            <summary>
            The playback position of the audio in seconds.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Sound.OnAncestryChanged(dEngine.Instances.Instance,dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Sound.Destroy">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Sound.Resume">
            <summary>
            Resumes the sound.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Sound.Play">
            <summary>
            Plays the sound.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Sound.Pause">
            <summary>
            Pauses the sound.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Sound.Stop">
            <summary>
            Stops the sound.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Sound.Ended">
            <summary>
            Fired when the sound ends.
            </summary>
            <eventParam name="soundId" />
        </member>
        <member name="F:dEngine.Instances.Sound.Loaded">
            <summary>
            Fired when the sound has loaded.
            </summary>
            <eventParam name="soundId" />
        </member>
        <member name="F:dEngine.Instances.Sound.OnLoop">
            <summary>
            Fired every time the sound loops.
            </summary>
            <eventParam name="soundId" />
            <eventParam name="loopCount" />
        </member>
        <member name="F:dEngine.Instances.Sound.Paused">
            <summary>
            Fired when the sound is paused.
            </summary>
            <eventParam name="soundId" />
        </member>
        <member name="F:dEngine.Instances.Sound.Played">
            <summary>
            Fired when the sound is played.
            </summary>
            <eventParam name="soundId" />
        </member>
        <member name="F:dEngine.Instances.Sound.Resumed">
            <summary>
            Fired when the sound is played after being paused.
            </summary>
            <eventParam name="soundId" />
        </member>
        <member name="F:dEngine.Instances.Sound.Stopped">
            <summary>
            Fired when the sound is stopped.
            </summary>
            <eventParam name="soundId" />
        </member>
        <member name="T:dEngine.Instances.PVInstance">
            <summary>
            A physical instance is an entity which occupies space in the 3D world.
            </summary>
        </member>
        <member name="P:dEngine.Instances.PVInstance.CFrame">
            <summary>
            The transform of the object.
            </summary>
        </member>
        <member name="P:dEngine.Instances.PVInstance.Size">
            <summary>
            The size of the object.
            </summary>
        </member>
        <member name="T:dEngine.Instances.StringValue">
            <summary>
            A <see cref="T:dEngine.Instances.ValueContainer" /> that holds a <see cref="T:System.String" />.
            </summary>
        </member>
        <member name="F:dEngine.Instances.StringValue.MaxLength">
            <summary>
            The maximum length of <see cref="P:dEngine.Instances.StringValue.Value" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.StringValue.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.StringValue.Value">
            <summary>
            The value that this container holds.
            </summary>
        </member>
        <member name="T:dEngine.Instances.ValueContainer">
            <summary>
            Base class for value containers.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Vector3Value">
            <summary>
            A <see cref="T:dEngine.Instances.ValueContainer" /> that holds a <see cref="T:dEngine.Vector3" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Vector3Value.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Vector3Value.Value">
            <summary>
            The value that this containers holds.
            </summary>
        </member>
        <member name="T:dEngine.Instances.IRenderable">
            <summary>
            An instance which can be rendered.
            </summary>
        </member>
        <member name="P:dEngine.Instances.IRenderable.RenderObject">
            <summary>
            The <see cref="T:dEngine.Graphics.RenderObject" /> this instance is a part of. This property is set by the
            <see cref="M:dEngine.Graphics.RenderObject.Add(dEngine.Instances.IRenderable)" /> method.
            </summary>
        </member>
        <member name="P:dEngine.Instances.IRenderable.RenderIndex">
            <summary>
            The index of this instance in the RenderObject's instance array. This property is set by the
            <see cref="M:dEngine.Graphics.RenderObject.Add(dEngine.Instances.IRenderable)" /> method.
            </summary>
        </member>
        <member name="P:dEngine.Instances.IRenderable.RenderData">
            <summary>
            The render data.
            </summary>
        </member>
        <member name="M:dEngine.Instances.IRenderable.UpdateRenderData">
            <summary>
            Update the <see cref="P:dEngine.Instances.IRenderable.RenderData" /> struct and write the data to the <see cref="P:dEngine.Instances.IRenderable.RenderObject" />'s CPU buffer.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Model">
            <summary>
            A container object for organizing 3D objects.
            </summary>
            <seealso cref="T:dEngine.Instances.Folder" />
        </member>
        <member name="M:dEngine.Instances.Model.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Model.PrimaryPart">
            <summary>
            The child part which represents the 'primary' part of this model.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Model.CFrame">
            <summary>
            The transform of the model.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Model.Size">
            <summary>
            The size of the model.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Model.MoveTo(dEngine.Vector3)">
            <summary>
            Moves the centroid of the <see cref="T:dEngine.Instances.Model" /> to the specified location, respecting all relative distances between
            parts in the model.
            </summary>
            <remarks>
            If <see cref="P:dEngine.Instances.Model.PrimaryPart" /> is will use the part's CFrame, otherwise the center of the model will be used.
            </remarks>
            <param name="position">The position to move to.</param>
        </member>
        <member name="M:dEngine.Instances.Model.SetPrimaryPartCFrame(dEngine.CFrame)">
            <summary>
            Sets the CFrame of the <see cref="P:dEngine.Instances.Model.PrimaryPart" />, respecting all relative distances between parts.
            </summary>
            <remarks>
            If <see cref="P:dEngine.Instances.Model.PrimaryPart" /> is not set, this method will error.
            </remarks>
        </member>
        <member name="M:dEngine.Instances.Model.GetModelCFrame">
            <summary>
            Gets the CFrame of the Bounding Box.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Model.GetModelSize">
            <summary>
            Gets the size of the Bounding Box.
            </summary>
        </member>
        <member name="T:dEngine.Instances.Script">
            <summary>
            A script which is executed by the server.
            </summary>
            <remarks>
            A <see cref="T:dEngine.Instances.Script" /> must be a descendant of an <see cref="T:dEngine.Instances.IWorld" /> or <see cref="T:dEngine.Services.ServerScriptService" /> to run.
            </remarks>
        </member>
        <member name="M:dEngine.Instances.Script.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.Script.Disabled">
            <summary>
            Determines whether this script can execute code.
            </summary>
            <remarks>
            Setting Disabled to false at runtime will force the script to execute.
            </remarks>
        </member>
        <member name="M:dEngine.Instances.Script.OnInstanceIdChanged(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Script.OnAncestryChanged(dEngine.Instances.Instance,dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Script.Destroy">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.Script.CheckIfAncestorValid">
            <summary>
            Returns true if the script's ancestry is valid.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Script.Run(System.Object[])">
            <summary>
            Executes the script asynchronously.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Script.Stop">
            <summary>
            Stops script execution.
            </summary>
        </member>
        <member name="T:dEngine.Instances.ModuleScript">
            <summary>
            A script which returns a module object when passed as an argument to require()
            </summary>
        </member>
        <member name="M:dEngine.Instances.ModuleScript.#ctor">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.ModuleScript.Destroy">
            <summary />
        </member>
        <member name="T:dEngine.Instances.SourceContainer">
            <summary>
            Base class for an object containing source code.
            </summary>
        </member>
        <member name="M:dEngine.Instances.SourceContainer.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Instances.SourceContainer.Source">
            <summary>
            The source code.
            </summary>
        </member>
        <member name="P:dEngine.Instances.SourceContainer.LinkedSource">
            <summary>
            When set, will download and overwrite source code.
            </summary>
        </member>
        <member name="P:dEngine.Instances.SourceContainer.LastModified">
            <summary>
            Gets the time the source was last modified.
            </summary>
        </member>
        <member name="F:dEngine.Instances.SourceContainer.Downloaded">
            <summary>
            Fired when the source code is downloaded from <see cref="P:dEngine.Instances.SourceContainer.LinkedSource" />.
            </summary>
        </member>
        <member name="T:dEngine.Instances.DataModel">
            <summary>
            The root object of the hierarchy.
            </summary>
            <remarks>
            The DataModel is the root of the game hierarchy. Its members are related to game and service locator. It is accessed
            through the global variable `game`.
            ### Services
            All <see cref="T:dEngine.Services.Service" />s in the game are parented and accessed through the DataModel.
            ```lua
            local service = game.ReplicatedStorage -- access via children
            ```
            ```lua
            local service = game:GetService("ReplicatedStorage") -- access via GetService
            ```
            </remarks>
        </member>
        <member name="M:dEngine.Instances.DataModel.#ctor">
            <summary>
            Creates the DataModel and the main Workspace.
            </summary>
        </member>
        <member name="P:dEngine.Instances.DataModel.JobId">
            <summary>
            A unique identifer for the current game server.
            </summary>
        </member>
        <member name="M:dEngine.Instances.DataModel.SetStartupArguments(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets the startup arguments for the game.
            </summary>
        </member>
        <member name="M:dEngine.Instances.DataModel.GetStartupArguments">
            <summary>
            Returns a dictionary of startup arguments.
            </summary>
        </member>
        <member name="P:dEngine.Instances.DataModel.Workspace">
            <summary>
            The workspace for the main scene.
            </summary>
        </member>
        <member name="P:dEngine.Instances.DataModel.IsLoaded">
            <summary>
            Gets whether or not the game has been loaded.
            </summary>
        </member>
        <member name="M:dEngine.Instances.DataModel.Shutdown(System.Int32)">
            <summary />
        </member>
        <member name="M:dEngine.Instances.DataModel.SetTrackingId(System.String)">
            <summary>
            Sets the analytics tracking ID.
            </summary>
        </member>
        <member name="M:dEngine.Instances.DataModel.ReportInGoogleAnalytics(System.String,System.String,System.String,System.Int32)">
            <summary>
            Reports analytical data.
            </summary>
            <param name="category"></param>
            <param name="action"></param>
            <param name="label"></param>
            <param name="value"></param>
        </member>
        <member name="M:dEngine.Instances.DataModel.ClearContent(System.Boolean)">
            <summary />
        </member>
        <member name="M:dEngine.Instances.DataModel.BindToClose(dEngine.LuaAction,System.Int32)">
            <summary>
            Binds a function to be called when the game is closing.
            </summary>
            <param name="callback">The callback function.</param>
            <param name="priority">The priority. Higher numbers are called first.</param>
        </member>
        <member name="M:dEngine.Instances.DataModel.UnbindFromClose(dEngine.LuaAction)">
            <summary>
            Removes a function that was previously bound to the game closing.
            </summary>
        </member>
        <member name="P:dEngine.Instances.DataModel.StartupPlace">
            <summary>
            The path to the startup place for level editors.
            </summary>
        </member>
        <member name="F:dEngine.Instances.DataModel.Loaded">
            <summary>
            Fired when the game has loaded.
            </summary>
            <seealso cref="F:dEngine.Services.Workspace.PlaceLoaded" />
        </member>
        <member name="F:dEngine.Instances.DataModel.ServiceAdded">
            <summary>
            Fired when a service is added.
            </summary>
        </member>
        <member name="F:dEngine.Instances.DataModel.ServiceRemoved">
            <summary>
            Fired when a service is removed.
            </summary>
        </member>
        <member name="M:dEngine.Instances.DataModel.OnChildAdded(dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.DataModel.OnChildRemoved(dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Instances.DataModel.SaveGame(dEngine.SaveFilter)">
            <summary>
            Serializes the DataModel and/or Workspace.
            </summary>
        </member>
        <member name="M:dEngine.Instances.DataModel.GetServices">
            <summary>
            Returns a list of all created services.
            </summary>
        </member>
        <member name="M:dEngine.Instances.DataModel.FindService(System.String)">
            <summary>
            Returns the service with the specified name. Returns null if the service was not already created.
            </summary>
            <param name="className">The class name of the service.</param>
        </member>
        <member name="M:dEngine.Instances.DataModel.GetService(System.String)">
            <summary>
            Returns the service with the specified name. If the service has not been created, create it.
            </summary>
            <param name="className">The class name of the service.</param>
        </member>
        <member name="M:dEngine.Instances.DataModel.GetService``1">
            <summary>
            Returns the service with the specified type.
            </summary>
            <typeparam name="T">The service type.</typeparam>
        </member>
        <member name="T:dEngine.Instances.Instance">
            <summary>
            Base class for all entities.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Instance.World">
            <summary>
            The <see cref="T:dEngine.Instances.IWorld" /> this instance is a descendant of.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Instance.ParentLocked">
            <summary>
            If true, the parent property of this instance will be locked and unchangeable.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Instance.Item(System.String)">
            <summary>
            Access children with indexer.
            </summary>
            <param name="childName">The name of the child.</param>
            <returns>The first child with the given name.</returns>
        </member>
        <member name="P:dEngine.Instances.Instance.Logger">
            <summary>
            The logger for this instance.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Instance.IsSelected">
            <summary>
            Gets whether or not this object is currently selected by <see cref="T:dEngine.Services.SelectionService" />
            </summary>
        </member>
        <member name="P:dEngine.Instances.Instance.Tag">
            <summary>
            A property for custom data.
            </summary>
            <remarks>
            This property is not serialized.
            </remarks>
        </member>
        <member name="P:dEngine.Instances.Instance.IsDestroyed">
            <summary>
            If true, instance has been destroyed and cannot be re-parented.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Instance.ClassName">
            <summary>
            The name of the instance type.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Instance.Name">
            <summary>
            A non-unique identifier for the object.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Instance.Parent">
            <summary>
            The hierarchical parent of the object.
            </summary>
        </member>
        <member name="P:dEngine.Instances.Instance.Archivable">
            <summary>
            Determines whether the object can be serialized.
            </summary>
            <remarks>
            If this is set to false, the object will not be saved by level editors and the <see cref="M:dEngine.Instances.Instance.Clone" /> method will return
            null.
            </remarks>
        </member>
        <member name="P:dEngine.Instances.Instance.InstanceId">
            <summary>
            A GUID for this instance.
            </summary>
            <remarks>
            InstanceId is serialized for network replication purposes.
            If a server and a client open the same file, they should both be able to reference it with the same identifier.
            </remarks>
        </member>
        <member name="M:dEngine.Instances.Instance.OnInstanceIdChanged(System.String,System.String)">
            <summary>
            Called when <see cref="P:dEngine.Instances.Instance.InstanceId" />. This can happen twice: first when the object is created, second when the object
            has been deserialized.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.OnChildAdded(dEngine.Instances.Instance)">
            <summary>
            Called when a child is parented to this instance.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.OnChildRemoved(dEngine.Instances.Instance)">
            <summary>
            Called when a child is unparented from this instance.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.OnWorldChanged(dEngine.Instances.IWorld,dEngine.Instances.IWorld)">
            <summary>
            Called when the world changed.
            </summary>
            <param name="newWorld">The new world.</param>
            <param name="oldWorld">The previous world.</param>
        </member>
        <member name="M:dEngine.Instances.Instance.OnAncestryChanged(dEngine.Instances.Instance,dEngine.Instances.Instance)">
            <summary>
            Called when the ancestry of this part changes.
            </summary>
            <param name="child">The child of the change.</param>
            <param name="parent">The new parent of the child.</param>
        </member>
        <member name="M:dEngine.Instances.Instance.GetAncestor(System.Func{dEngine.Instances.Instance,System.Boolean})">
            <summary>
            Returns the first instance in the ancestry that passes the given predicate.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.Finalize">
            <summary>
            Instance destructor.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.ToString">
            <summary>
            Returns the name of the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.Instances.Instance.BeforeSerialization(dEngine.Serializer.V1.Inst.Context)">
            <summary>
            Called by Protobuf-net before serialization.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.AfterSerialization(dEngine.Serializer.V1.Inst.Context)">
            <summary>
            Called by Protobuf-net after serialization.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.AfterDeserialization(dEngine.Serializer.V1.Inst.Context)">
            <summary>
            Called by Protobuf-net after deserialization.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.OnParentFilter(dEngine.Instances.Instance)">
            <summary>
            Determines if the given parent should be valid.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.NotifyChanged(System.String)">
            <summary>
            Fires the <see cref="F:dEngine.Instances.Instance.Changed" /> signal to notify that a property has changed.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.GetFullName">
            <summary>
            Gets the path to the instance as a string.
            </summary>
            <example>Workspace.Model.Part</example>
        </member>
        <member name="M:dEngine.Instances.Instance.WaitForChild(System.String,System.Nullable{System.Double})">
            <summary>
            Yields the current thread until a child with the given name is found.
            </summary>
            <remarks>The child.</remarks>
        </member>
        <member name="M:dEngine.Instances.Instance.IsA(System.String)">
            <summary>
            Returns true if this type of instance is, or inherits from the provided type.
            </summary>
            <param name="type">The type to check/</param>
        </member>
        <member name="M:dEngine.Instances.Instance.IsAncestorOf(dEngine.Instances.Instance)">
            <summary>
            Returns true if this instance is an ancestor of the given descendant.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.IsDescendantOf``1">
            <summary>
            Returns true if this instance has an ancestor of the given type.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.IsDescendantOf(dEngine.Instances.Instance)">
            <summary>
            Returns true if this instance is a descendant of the given ancestor.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.ClearChildren">
            <summary>
            Calls <see cref="M:dEngine.Instances.Instance.Destroy" /> on every child.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.GetChildren">
            <summary>
            Returns a list of all children.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.Clone">
            <summary>
            Returns a copy of the object and its descendants.
            </summary>
            <remarks>
            The copy's parent is initially nil.
            If the object cannot be serialized, returns nil.
            </remarks>
            <returns>A copy of the object, if it can be serialized, otherwise nil.</returns>
        </member>
        <member name="M:dEngine.Instances.Instance.Destroy">
            <summary>
            Sets the <see cref="P:dEngine.Instances.Instance.Parent" /> property to null and locks it, disconnects all events and calls <see cref="M:dEngine.Instances.Instance.Destroy" />
            on all children.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.FindFirstChild(System.String,System.Boolean)">
            <summary>
            Returns the first child with the given name.
            </summary>
            <param name="name">The name of the child.</param>
            <param name="recurse">Determines whether to recurse down the tree.</param>
        </member>
        <member name="M:dEngine.Instances.Instance.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Attempts to get child by name. (i.e. workspace.Part)
            </summary>
            <param name="binder">The <see cref="T:System.Dynamic.GetMemberBinder" /></param>
            <param name="result">The child part, if it exists.</param>
            <returns>True if a child with the given name was found.</returns>
        </member>
        <member name="M:dEngine.Instances.Instance.GetHashCode">
            <summary>
            Gets the hashcode of the <see cref="P:dEngine.Instances.Instance.InstanceId" />.
            </summary>
        </member>
        <member name="M:dEngine.Instances.Instance.op_Implicit(System.WeakReference{dEngine.Instances.Instance})~dEngine.Instances.Instance">
            <summary>
            Returns the instance from a weak reference.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Instance.Children">
            <summary>
            A collection of instances which are parented to this instance.
            </summary>
            <seealso cref="P:dEngine.Instances.Instance.Parent" />
        </member>
        <member name="F:dEngine.Instances.Instance.AncestryChanged">
            <summary>
            Fired when the Parent property of the instance or its ancestors changes.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Instance.Changed">
            <summary>
            Fired by a property when its value changes.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Instance.ChildAdded">
            <summary>
            Fired when a new child is added to this instance.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Instance.ChildRemoved">
            <summary>
            Fired when a new child is removed from this instance.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Instance.DescendantAdded">
            <summary>
            Fired when a descendant of this instance is added.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Instance.DescendantRemoving">
            <summary>
            Fired before a descendant of this instance is removed.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Instance.Destroyed">
            <summary>
            Fired when this instance is destroyed.
            </summary>
        </member>
        <member name="F:dEngine.Instances.Instance.ParentChanged">
            <summary>
            Fired when <see cref="P:dEngine.Instances.Instance.Parent" /> is set.
            </summary>
        </member>
        <member name="T:dEngine.Serializer.V1.Inst">
            <summary>
            Inst is a custom serialization format for <see cref="T:dEngine.Instances.Instance" />s.
            </summary>
        </member>
        <member name="F:dEngine.Serializer.V1.Inst.Version">
            <summary>
            The version string.
            </summary>
        </member>
        <member name="M:dEngine.Serializer.V1.Inst.Serialize(dEngine.Instances.Instance,System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Serializes an <see cref="T:dEngine.Instances.Instance" />.
            </summary>
            <param name="instance">The instance to serialize.</param>
            <param name="output">The output stream.</param>
            <param name="clone">Determines if the object is being cloned.</param>
            <param name="includeWorkspaceInGame">
            Determines whether or not <see cref="T:dEngine.Services.Workspace" /> should be filtered out when
            serializing the <see cref="T:dEngine.Instances.DataModel" />.
            </param>
        </member>
        <member name="M:dEngine.Serializer.V1.Inst.Deserialize(System.IO.Stream,dEngine.Instances.Instance,System.Boolean)">
            <summary>
            </summary>
            <param name="input"></param>
            <param name="existing"></param>
            <param name="skipMagic"></param>
            <returns></returns>
        </member>
        <member name="M:dEngine.Serializer.V1.Inst.CheckHeader(System.IO.Stream,System.Boolean)">
            <summary>
            Checks if the given stream is valid instance binary.
            </summary>
            <param name="stream">The stream to check.</param>
            <param name="seekAfterwards">Determines if the stream's position is set back to zero.</param>
        </member>
        <member name="P:dEngine.Serializer.V1.Inst.CachedType.TaggedProperties">
            <summary>
            A list of cached properties which can be serialized.
            </summary>
        </member>
        <member name="P:dEngine.Serializer.V1.Inst.CachedType.Properties">
            <summary>
            A list of cached properties.
            </summary>
        </member>
        <member name="T:dEngine.Services.ContextActionService">
            <summary>
            A service for binding context actions.
            </summary>
        </member>
        <member name="M:dEngine.Services.ContextActionService.#ctor">
            <summary />
        </member>
        <member name="M:dEngine.Services.ContextActionService.DoesActionExist(System.String)">
            <summary>
            Determines whether an action with the given name is currently bound.
            </summary>
        </member>
        <member name="M:dEngine.Services.ContextActionService.RegisterAction(System.String,System.Action)">
            <summary>
            Registers an action with the service.
            </summary>
            <param name="name">The name of the action.</param>
            <param name="action">The function to be called.</param>
        </member>
        <member name="M:dEngine.Services.ContextActionService.BindAction(System.String,dEngine.Key,System.Collections.Generic.IEnumerable{dEngine.Key},System.Func{System.Boolean})">
            <summary>
            Binds an action to a context.
            </summary>
            <param name="action">The name of the action to bind.</param>
            <param name="key">The primary key.</param>
            <param name="modifiers">The modifier key(s).</param>
            <param name="when">An function to validate the context.</param>
        </member>
        <member name="F:dEngine.Services.ContextActionService.KeyCollection.KeyComparer">
            <summary />
        </member>
        <member name="T:dEngine.Services.LoginService">
            <summary>
            A service for logging into a user account.
            </summary>
        </member>
        <member name="M:dEngine.Services.LoginService.#ctor">
            <summary />
        </member>
        <member name="M:dEngine.Services.LoginService.IsLoggedIn">
            <summary>
            Determines if the client is currently logged in.
            </summary>
        </member>
        <member name="M:dEngine.Services.LoginService.GetUserId">
            <summary>
            Used to get the user's ID when the <see cref="T:dEngine.Instances.Player" /> object is not available.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.Services.LoginService.TryLogin">
            <summary>
            Tries to login to the user's account.
            </summary>
            <returns>A boolean determining if the login was successful.</returns>
        </member>
        <member name="M:dEngine.Services.LoginService.Logout">
            <summary>
            Logs out of the current account.
            </summary>
        </member>
        <member name="F:dEngine.Services.LoginService.LoginSucceeded">
            <summary>
            Fired when a login attempt is successful.
            </summary>
            <eventParam name="username" />
            <eventParam name="userId" />
        </member>
        <member name="F:dEngine.Services.LoginService.LoginFailed">
            <summary>
            Fired when a login attempt fails.
            </summary>
        </member>
        <member name="T:dEngine.Services.AnalyticsService">
            <summary>
            Service for handling analytics.
            </summary>
        </member>
        <member name="M:dEngine.Services.AnalyticsService.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Services.AnalyticsService.UseProductionAPI">
            <summary>
            Determines whether the production or sandbox endpoint is used.
            </summary>
        </member>
        <member name="P:dEngine.Services.AnalyticsService.GameKey">
            <summary>
            Determines whether the production or sandbox endpoint is used.
            </summary>
        </member>
        <member name="P:dEngine.Services.AnalyticsService.SecretKey">
            <summary>
            Determines whether the production or sandbox endpoint is used.
            </summary>
        </member>
        <member name="M:dEngine.Services.AnalyticsService.SetProductionGameKey(System.String)">
            <summary>
            Sets the analytics game key to use for production.
            </summary>
        </member>
        <member name="M:dEngine.Services.AnalyticsService.SetProductionSecretKey(System.String)">
            <summary>
            Sets the analytics secret key to use for production.
            </summary>
        </member>
        <member name="M:dEngine.Services.AnalyticsService.Report(System.String,System.Single)">
            <summary>
            Sends a custom report to the analytics service.
            </summary>
        </member>
        <member name="T:dEngine.Services.AchievementService">
            <summary>
            A service for awarding achievements.
            </summary>
        </member>
        <member name="M:dEngine.Services.AchievementService.#ctor">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Services.AchievementService.IsValidAchievement(System.UInt32,System.String)">
            <summary>
            Determines if the given achievement name is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.Services.AchievementService.UserHasAchievement(System.UInt32,System.String)">
            <summary>
            Determines if the user has unlocked the given achievement.
            </summary>
            <param name="userId">The user to check.</param>
            <param name="achievement">The name of the achievement.</param>
            <returns></returns>
        </member>
        <member name="M:dEngine.Services.AchievementService.UnlockAchievement(System.UInt32,System.String)">
            <summary>
            Unlocks the achievement for the given user.
            </summary>
            <param name="userId">The user to unlock for.</param>
            <param name="achievement">The name of the achievement.</param>
        </member>
        <member name="M:dEngine.Services.AchievementService.RevokeAchievement(System.UInt32,System.String)">
            <summary>
            Re-locks the achievement for the user.
            </summary>
            <param name="userId">The user to lock for.</param>
            <param name="achievement">The name of the achievement.</param>
        </member>
        <member name="T:dEngine.Services.ClanService">
            <summary>
            A service for fetching information about clans.
            </summary>
        </member>
        <member name="M:dEngine.Services.ClanService.#ctor">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Services.ClanService.GetClanInfoAsync(System.UInt32)">
            <summary>
            Returns a table containing information about the clan.
            </summary>
            <param name="clanId">The id of the clan.</param>
        </member>
        <member name="T:dEngine.Services.DataStoreService">
            <summary>
            A service for managing DataStores.
            </summary>
        </member>
        <member name="M:dEngine.Services.DataStoreService.#ctor">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Services.Debris">
            <summary>
            The debris service allows objects to be scheduled for removal.
            </summary>
        </member>
        <member name="M:dEngine.Services.Debris.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Services.Debris.MaxItems">
            <summary>
            The maximum number of items that can be added before items are forcefully destroyed.
            </summary>
            <remarks>
            Changing this property will destroy the current queue.
            </remarks>
        </member>
        <member name="M:dEngine.Services.Debris.AddItem(dEngine.Instances.Instance,System.Single)">
            <summary>
            Schedules an item to be destroyed.
            </summary>
            <param name="item">The item to register.</param>
            <param name="lifetime">The time until the item is destroyed.</param>
        </member>
        <member name="T:dEngine.Services.LogService">
            <summary>
            A service for managing logging.
            </summary>
        </member>
        <member name="M:dEngine.Services.LogService.#ctor">
            <summary />
        </member>
        <member name="M:dEngine.Services.LogService.ExecuteScript(System.String)">
            <summary>
            Executes a string of code on the server-side.
            </summary>
        </member>
        <member name="M:dEngine.Services.LogService.ConfigureLoggers">
            <summary>
            Configures logging targets and rules.
            </summary>
        </member>
        <member name="M:dEngine.Services.LogService.OnLog(System.String,System.String,System.String)">
            <summary />
        </member>
        <member name="F:dEngine.Services.LogService.MessageOutput">
            <summary>
            Fired when a message is logged.
            </summary>
            <remarks>
            Outputting a message within the callback will case a stack overflow.
            </remarks>
        </member>
        <member name="T:dEngine.Services.PathfindingService">
            <summary>
            A service used to calculate a <see cref="T:dEngine.Services.PathfindingService.Path" /> between two points.
            </summary>
        </member>
        <member name="T:dEngine.Services.PathfindingService.Path">
            <summary>
            A path between two points.
            </summary>
        </member>
        <member name="M:dEngine.Services.PathfindingService.Path.#ctor(dEngine.PathStatus,dEngine.Vector3[])">
            <summary />
        </member>
        <member name="P:dEngine.Services.PathfindingService.Path.Status">
            <summary>
            The status of the path.
            </summary>
        </member>
        <member name="M:dEngine.Services.PathfindingService.Path.GetPointCoordinates">
            <summary>
            Returns a table of <see cref="T:dEngine.Vector3" />s that comprise the path.
            </summary>
            <returns></returns>
        </member>
        <member name="T:dEngine.Services.ScriptService">
            <summary>
            <see cref="T:dEngine.Services.ScriptService" /> handles the execution of scripts at runtime.
            </summary>
        </member>
        <member name="T:dEngine.Services.ScriptService.ScriptGlobal">
            <summary>
            A <see cref="T:Neo.IronLua.LuaGlobal" /> for dEngine scripts.
            </summary>
        </member>
        <member name="M:dEngine.Services.ScriptService.ScriptGlobal.OnIndex(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Services.ScriptService.CurrentThread">
            <summary>
            Gets the coroutine that the accessing script is running on.
            </summary>
        </member>
        <member name="M:dEngine.Services.ScriptService.ExecuteAsync(dEngine.Instances.Script,System.Object[])">
            <summary>
            Starts a script.
            </summary>
        </member>
        <member name="M:dEngine.Services.ScriptService.YieldThread">
            <summary>
            Yields the coroutine that the accessing script is running on.
            </summary>
        </member>
        <member name="P:dEngine.Services.ScriptService.Lua">
            <summary>
            The Lua environment object.
            </summary>
        </member>
        <member name="P:dEngine.Services.ScriptService.EnumTypes">
            <summary>
            A collection of enum types in the <see cref="N:dEngine.Enums" /> namespace.
            </summary>
        </member>
        <member name="P:dEngine.Services.ScriptService.Scripts">
            <summary>
            A dictionary of scripts.
            </summary>
        </member>
        <member name="P:dEngine.Services.ScriptService.CurrentScript">
            <summary>
            The script that is currently executing at this time.
            </summary>
        </member>
        <member name="P:dEngine.Services.ScriptService.GlobalEnvironment">
            <summary>
            The shared global environment for scripts.
            </summary>
        </member>
        <member name="M:dEngine.Services.ScriptService.RegisterScript(dEngine.Instances.Script,System.String)">
            <summary>
            Adds script to script collection.
            </summary>
        </member>
        <member name="M:dEngine.Services.ScriptService.DeregisterScript(dEngine.Instances.Script,System.String)">
            <summary>
            Removes script from script collection.
            </summary>
        </member>
        <member name="E:dEngine.Services.ScriptService.ScriptAdded">
            <summary>
            Fired when a script is added with <see cref="M:dEngine.Services.ScriptService.RegisterScript(dEngine.Instances.Script,System.String)" />
            </summary>
        </member>
        <member name="E:dEngine.Services.ScriptService.ScriptRemoved">
            <summary>
            Fired when a script is removed with <see cref="M:dEngine.Services.ScriptService.DeregisterScript(dEngine.Instances.Script,System.String)" />
            </summary>
        </member>
        <member name="M:dEngine.Services.ScriptService.AssertIdentity(dEngine.ScriptIdentity,System.Boolean)">
            <summary>
            Asserts that the calling thread has the required identity.
            </summary>
            <param name="target">The required identity.</param>
            <param name="condition">
            If true, an exception is thrown when the thread does not meet target identity.
            If false, an exception is thrown when the thread does the target identity.
            </param>
        </member>
        <member name="F:dEngine.Services.ScriptService.ScriptErrored">
            <summary>
            Fires when a script errors.
            </summary>
        </member>
        <member name="T:dEngine.Services.Teams">
            <summary>
            A service for managing teams.
            </summary>
        </member>
        <member name="M:dEngine.Services.Teams.#ctor">
            <summary />
        </member>
        <member name="M:dEngine.Services.Teams.RebalanceTeams(dEngine.TeamBalanceMethod)">
            <summary>
            Rebalances players across teams.
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:dEngine.Services.Teams.GetTeams">
            <summary>
            Returns a list of existing teams.
            </summary>
        </member>
        <member name="T:dEngine.Services.CacheableContentProvider`1">
            <summary>
            A resource manager for asset types.
            </summary>
        </member>
        <member name="F:dEngine.Services.CacheableContentProvider`1.CanDownload">
            <summary>
            Determines if this content provider can download content.
            </summary>
            <remarks>
            If the engine is in server mode, or <see cref="P:dEngine.Settings.Global.RenderSettings.GraphicsMode" /> is set to
            <see cref="F:dEngine.GraphicsMode.NoGraphics" />, it will not download certain types of assets.
            </remarks>
            <seealso cref="P:dEngine.Engine.Mode" />
        </member>
        <member name="M:dEngine.Services.CacheableContentProvider`1.ClearResources">
            <summary>
            Clears the resource cache.
            </summary>
        </member>
        <member name="M:dEngine.Services.CacheableContentProvider`1.GetAssetFromStream(System.IO.Stream)">
            <summary>
            Deserializes the given stream into an asset.
            </summary>
        </member>
        <member name="M:dEngine.Services.CacheableContentProvider`1.RefreshResource(System.String)">
            <summary>
            Redownloads the resource for the given content ID.
            </summary>
            <param name="contentId"></param>
        </member>
        <member name="M:dEngine.Services.CacheableContentProvider`1.GetAsync(System.String)">
            <summary>
            Returns a reference without waiting for the resource to load.
            </summary>
        </member>
        <member name="M:dEngine.Services.CacheableContentProvider`1.Get(System.String)">
            <summary>
            Returns a reference after waiting for the resource to load.
            </summary>
        </member>
        <member name="M:dEngine.Services.CacheableContentProvider`1.Resource.#ctor(System.String)">
            <summary>
            Creates a new resource.
            </summary>
            <param name="contentId">The content id url.</param>
        </member>
        <member name="M:dEngine.Services.CacheableContentProvider`1.Resource.Dispose">
            <summary>
            Disposes of the resource.
            </summary>
        </member>
        <member name="M:dEngine.Services.CacheableContentProvider`1.Resource.WaitAsync">
            <summary>
            Waits for the resource to be downloaded.
            </summary>
        </member>
        <member name="M:dEngine.Services.CacheableContentProvider`1.Resource.Dispose(System.Boolean)">
            <summary>
            Disposes of the object.
            </summary>
            <param name="disposing">True if Dispose() was invoked, False if destructor was invoked.</param>
        </member>
        <member name="T:dEngine.Services.Reference`1">
            <summary>
            A reference to a resource.
            </summary>
        </member>
        <member name="M:dEngine.Services.Reference`1.Dispose">
            <summary>
            Decrements the reference count.
            </summary>
        </member>
        <member name="M:dEngine.Services.Reference`1.Finalize">
            <summary />
        </member>
        <member name="M:dEngine.Services.Reference`1.op_Implicit(dEngine.Services.Reference{`0})~`0">
            <summary>
            Implicitly returns the content object.
            </summary>
        </member>
        <member name="M:dEngine.Services.Reference`1.Dispose(System.Boolean)">
            <summary>
            Disposes of the object.
            </summary>
            <param name="disposing">True if Dispose() was invoked, False if destructor was invoked.</param>
        </member>
        <member name="T:dEngine.Services.CoreEnvironment">
            <summary />
        </member>
        <member name="M:dEngine.Services.CoreEnvironment.FindPartOnRay(dEngine.Ray,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Services.CoreEnvironment.FindPartOnRay(dEngine.Ray,Neo.IronLua.LuaTable,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Services.CoreEnvironment.FindPartOnRay(dEngine.Ray,System.Func{System.Object,System.Object},System.Single)">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Services.HistoryService">
            <summary>
            A service for undo/redo.
            </summary>
        </member>
        <member name="M:dEngine.Services.HistoryService.#ctor">
            <inheirtdoc />
        </member>
        <member name="M:dEngine.Services.HistoryService.SetEnabled(System.Boolean)">
            <summary>
            Sets whether or not the service is enabled.
            </summary>
        </member>
        <member name="M:dEngine.Services.HistoryService.SetWaypoint(System.String)">
            <summary>
            Saves a waypoint in history.
            </summary>
            <param name="waypoint">The name of the waypoint.</param>
        </member>
        <member name="M:dEngine.Services.HistoryService.Redo">
            <summary>
            Executes the last undone action.
            </summary>
        </member>
        <member name="M:dEngine.Services.HistoryService.Undo">
            <summary>
            Undoes the last action.
            </summary>
        </member>
        <member name="M:dEngine.Services.HistoryService.CanUndo">
            <summary>
            Determines if <see cref="M:dEngine.Services.HistoryService.Undo" /> can be successfully called.
            </summary>
        </member>
        <member name="M:dEngine.Services.HistoryService.CanRedo">
            <summary>
            Determines if <see cref="M:dEngine.Services.HistoryService.Redo" /> can be successfully called.
            </summary>
        </member>
        <member name="F:dEngine.Services.HistoryService.Redone">
            <summary>
            Fired when a waypoint is redone.
            </summary>
        </member>
        <member name="F:dEngine.Services.HistoryService.Undone">
            <summary>
            Fired when a waypoint is undone.
            </summary>
        </member>
        <member name="F:dEngine.Services.HistoryService.WaypointSet">
            <summary>
            Fired when a waypoint is set.
            </summary>
        </member>
        <member name="T:dEngine.Services.InsertService">
            <summary>
            Service for inserting assets into the game.
            </summary>
        </member>
        <member name="M:dEngine.Services.InsertService.#ctor">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Services.InsertService.LoadAsset(System.String)">
            <summary>
            Loads an asset from a content url.
            </summary>
        </member>
        <member name="M:dEngine.Services.InsertService.LoadAsset(System.UInt32)">
            <summary>
            Loads an asset from the Steam Workshop.
            </summary>
            <param name="workshopId">The workshop ID.</param>
        </member>
        <member name="T:dEngine.Services.ReplayService">
            <summary>
            A service for recording and playing replays.
            </summary>
            <remarks>
            A replay is a stream of actions used to recreate game simulations. Checkpoints can be made, which contain the entire
            state at the time of the given frame.
            </remarks>
        </member>
        <member name="P:dEngine.Services.ReplayService.IsRecording">
            <summary>
            If true, the replay service is currently recording frames.
            </summary>
        </member>
        <member name="P:dEngine.Services.ReplayService.IsPlaying">
            <summary>
            If true, the replay service is currently playing back a recording.
            </summary>
        </member>
        <member name="M:dEngine.Services.ReplayService.NextFrame">
            <summary>
            Serializes current frame to stream and creates a new replay frame.
            </summary>
        </member>
        <member name="M:dEngine.Services.ReplayService.BeginRecording">
            <summary>
            Starts recording replay actions.
            </summary>
        </member>
        <member name="M:dEngine.Services.ReplayService.MakeCheckpoint">
            <summary>
            Makes the current frame a checkpoint.
            </summary>
        </member>
        <member name="M:dEngine.Services.ReplayService.EndRecording">
            <summary>
            Stops the current recording and returns the stream.
            </summary>
        </member>
        <member name="M:dEngine.Services.ReplayService.RecordAction(dEngine.Services.ReplayService.ReplayAction)">
            <summary>
            Adds the given <see cref="T:dEngine.Services.ReplayService.ReplayAction" /> to the current frame.
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:dEngine.Services.ReplayService.ReplayFrame">
            <summary>
            A replay frame.
            </summary>
        </member>
        <member name="F:dEngine.Services.ReplayService.ReplayFrame.IsCheckpoint">
            <summary>
            Determines if this frame is a checkpoint.
            </summary>
        </member>
        <member name="M:dEngine.Services.ReplayService.ReplayFrame.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:dEngine.Services.ReplayService.ReplayFrame" />.
            </summary>
            <param name="frame"></param>
        </member>
        <member name="F:dEngine.Services.ReplayService.ReplayFrame.Actions">
            <summary>
            A list of replay actions performed this frame.
            </summary>
        </member>
        <member name="F:dEngine.Services.ReplayService.ReplayFrame.FrameNumber">
            <summary>
            The frame number.
            </summary>
        </member>
        <member name="T:dEngine.Services.ReplayService.ReplayAction">
            <summary>
            Base class for replay actions.
            </summary>
        </member>
        <member name="M:dEngine.Services.ReplayService.ReplayAction.Load(System.IO.BinaryReader)">
            <summary>
            Reads the action from a stream.
            </summary>
        </member>
        <member name="M:dEngine.Services.ReplayService.ReplayAction.Save(System.IO.BinaryWriter)">
            <summary>
            Writes the action from to a stream.
            </summary>
        </member>
        <member name="M:dEngine.Services.ReplayService.ReplayAction.Perform">
            <summary>
            Performs the action.
            </summary>
        </member>
        <member name="T:dEngine.Services.ReplayService.InputAction">
            <summary>
            An input action.
            </summary>
        </member>
        <member name="M:dEngine.Services.ReplayService.InputAction.Load(System.IO.BinaryReader)">
            <summary>
            Reads the action from a stream.
            </summary>
        </member>
        <member name="M:dEngine.Services.ReplayService.InputAction.Save(System.IO.BinaryWriter)">
            <summary>
            Writes the action from to a stream.
            </summary>
        </member>
        <member name="M:dEngine.Services.ReplayService.InputAction.Perform">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Services.Lighting">
            <summary>
            The Lighting service controls environmental variables.
            </summary>
            <seealso cref="P:dEngine.Services.Lighting.Skybox" />
        </member>
        <member name="M:dEngine.Services.Lighting.#ctor">
            <inheritdoc />
        </member>
        <member name="F:dEngine.Services.Lighting.LightingChanged">
            <summary>
            Fired when a property specific to <see cref="T:dEngine.Services.Lighting" /> is changed.
            </summary>
        </member>
        <member name="P:dEngine.Services.Lighting.AmbientColour">
            <summary>
            The colour of ambient lighting.
            </summary>
        </member>
        <member name="P:dEngine.Services.Lighting.SunColour">
            <summary>
            The colour of the sunlight.
            </summary>
        </member>
        <member name="P:dEngine.Services.Lighting.TimeOfDay">
            <summary>
            The time of day.
            </summary>
        </member>
        <member name="P:dEngine.Services.Lighting.Latitude">
            <summary>
            The latitude of the map for sun direction calculations.
            </summary>
        </member>
        <member name="P:dEngine.Services.Lighting.Longitude">
            <summary>
            The longitude of the map for sun direction calculations.
            </summary>
        </member>
        <member name="P:dEngine.Services.Lighting.OutdoorAmbient">
            <summary>
            The darkest outdoor colour.
            </summary>
        </member>
        <member name="P:dEngine.Services.Lighting.SunVector">
            <summary>
            A unit vector of the direction the sun is facing.
            </summary>
        </member>
        <member name="P:dEngine.Services.Lighting.Skybox">
            <summary>
            The current skybox.
            </summary>
        </member>
        <member name="M:dEngine.Services.Lighting.SetMinutesAfterMidnight(System.Double)">
            <summary>
            Sets the time to the given amount of minutes past 12:00:00.
            </summary>
            <param name="minutes">The number of minutes past midnight.</param>
        </member>
        <member name="M:dEngine.Services.Lighting.GetMinutesAfterMidnight">
            <summary>
            Returns the number of minutes past 12:00:00.
            </summary>
        </member>
        <member name="M:dEngine.Services.Lighting.CalculateSunPosition(dEngine.DateTime,System.Double,System.Double)">
            <summary>
            Returns the Position of the sun at the given time and location in altitude and azimuth.
            </summary>
        </member>
        <member name="T:dEngine.Services.ContentProvider">
            <summary>
            A service for managing content.
            </summary>
        </member>
        <member name="M:dEngine.Services.ContentProvider.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Services.ContentProvider.CacheMaxItemSize">
            <summary>
            If an item exceeds this size, it will not be cached.
            </summary>
        </member>
        <member name="M:dEngine.Services.ContentProvider.SetSoundcloudClientId(System.String)">
            <summary>
            Sets the client ID for the Soundcloud API.
            </summary>
        </member>
        <member name="M:dEngine.Services.ContentProvider.PreloadAsync(Neo.IronLua.LuaTable)">
            <summary>
            Yields untill all the given content urls have been downloaded.
            </summary>
            <param name="contentUrls">A table of content URLs to download.</param>
        </member>
        <member name="M:dEngine.Services.ContentProvider.Preload(System.String)">
            <summary>
            Preloads content from the given url.
            </summary>
        </member>
        <member name="F:dEngine.Services.ContentProvider.SupportedImageFormats">
            <summary>Image Format string for file dialogs.</summary>
        </member>
        <member name="F:dEngine.Services.ContentProvider.SupportedAudioFormats">
            <summary>Audio Format string for file dialogs.</summary>
        </member>
        <member name="F:dEngine.Services.ContentProvider.SupportedMeshFormats">
            <summary>RenderMesh Format string for file dialogs.</summary>
        </member>
        <member name="P:dEngine.Services.ContentProvider.CustomFetchHandler">
            <summary>
            Allows the host application to add support for custom content uri protocols.
            </summary>
        </member>
        <member name="M:dEngine.Services.ContentProvider.DownloadString(System.String)">
            <summary>
            Returns a stream of data from the given content id.
            </summary>
            <param name="contentId">The content id url.</param>
        </member>
        <member name="M:dEngine.Services.ContentProvider.DownloadStream(System.String)">
            <summary>
            Returns a stream of data from the given content id.
            </summary>
            <param name="contentId">The content id url.</param>
        </member>
        <member name="M:dEngine.Services.ContentProvider.RefreshResource(System.String)">
            <summary>
            Forces a cached resource to be redownloaded.
            </summary>
            <param name="resourceName"></param>
        </member>
        <member name="M:dEngine.Services.ContentProvider.IsMeshImportFormatSupported(System.String)">
            <summary>
            Returns true if the given format is a supported mesh format.
            </summary>
        </member>
        <member name="T:dEngine.Services.Networking.NetworkClient">
            <summary>
            Service for handling networking and replication on the client.
            </summary>
        </member>
        <member name="M:dEngine.Services.Networking.NetworkClient.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Services.Networking.NetworkClient.Ticket">
            <summary>
            The authorization ticket.
            </summary>
        </member>
        <member name="M:dEngine.Services.Networking.NetworkClient.Start(System.Int32)">
            <summary>
            Sets up internal network client.
            </summary>
        </member>
        <member name="M:dEngine.Services.Networking.NetworkClient.Connect(System.String,System.Int32)">
            <summary>
            Creates a <see cref="T:dEngine.Instances.Player" /> object and attempts to connect to the server.
            </summary>
        </member>
        <member name="M:dEngine.Services.Networking.NetworkClient.Disconnect(System.String)">
            <summary>
            Disconnect this client from the server.
            </summary>
        </member>
        <member name="F:dEngine.Services.Networking.NetworkClient.Connected">
            <summary>
            Fired when <see cref="!:Connect(string, int, int)" />successfully connects to a server. Returns the ClientReplicator.
            </summary>
        </member>
        <member name="F:dEngine.Services.Networking.NetworkClient.Disconnected">
            <summary>
            Fired if <see cref="!:Connect(string, int, int)" /> fails to connect to a server.
            </summary>
        </member>
        <member name="F:dEngine.Services.Networking.NetworkClient.Rejected">
            <summary>
            Fired if <see cref="!:Connect(string, int, int)" /> connects to a server, but the request to join is rejected.
            </summary>
            <remarks>
            This can happen if the client and server versions are mismatched, the player is banned from server, or ticket
            authorization failed.
            </remarks>
        </member>
        <member name="T:dEngine.Services.Networking.NetworkPeer">
            <summary>
            Base class for <see cref="T:dEngine.Services.Networking.NetworkClient" /> and <see cref="T:dEngine.Services.Networking.NetworkServer" />
            </summary>
        </member>
        <member name="P:dEngine.Services.Networking.NetworkPeer.IsRunning">
            <summary>
            If true, the peer has been started.
            </summary>
        </member>
        <member name="M:dEngine.Services.Networking.NetworkPeer.Update(System.Double)">
            <summary>
            Performs a network update.
            </summary>
            <param name="step">The time since the last step.</param>
        </member>
        <member name="T:dEngine.Services.Networking.NetworkServer">
            <summary>
            Service for handling networking and replication on the server.
            </summary>
        </member>
        <member name="M:dEngine.Services.Networking.NetworkServer.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Services.Networking.NetworkServer.Port">
            <summary>
            The port the server is hosted on.
            </summary>
        </member>
        <member name="P:dEngine.Services.Networking.NetworkServer.Address">
            <summary>
            The address the server is hosted on.
            </summary>
        </member>
        <member name="P:dEngine.Services.Networking.NetworkServer.ClientCount">
            <summary>
            The number of clients connected to the server.
            </summary>
        </member>
        <member name="P:dEngine.Services.Networking.NetworkServer.Replicators">
            <summary>
            A dictionary of replicators indexed by player.
            </summary>
        </member>
        <member name="P:dEngine.Services.Networking.NetworkServer.CustomMessageHandler">
            <summary>
            A custom handler for messages that are not handled in the base implementation.
            </summary>
        </member>
        <member name="M:dEngine.Services.Networking.NetworkServer.Start(System.Int32)">
            <summary>
            Starts the server.
            </summary>
            <param name="port">The port number to host on.</param>
        </member>
        <member name="M:dEngine.Services.Networking.NetworkServer.SetIsPlayerAuthenticationRequired(System.Boolean)">
            <summary>
            Sets whether or not authentication is required.
            </summary>
            <param name="required"></param>
        </member>
        <member name="M:dEngine.Services.Networking.NetworkServer.Stop">
            <summary>
            Stops the server.
            </summary>
        </member>
        <member name="M:dEngine.Services.Networking.NetworkServer.AuthorizeConnection(Lidgren.Network.NetIncomingMessage)">
            <summary>
            Checks if the given <see cref="F:Lidgren.Network.NetIncomingMessageType.ConnectionApproval" /> request is authorized.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:dEngine.Services.Networking.NetworkServer.AddClient(System.String,Lidgren.Network.NetConnection)">
            <summary>
            Creates a <see cref="T:dEngine.Instances.Player" /> and <see cref="T:dEngine.Instances.ServerReplicator" /> for the client.
            </summary>
        </member>
        <member name="T:dEngine.Services.Players">
            <summary>
            A service for handling players. When a client joints the game, a <see cref="T:dEngine.Instances.Player" /> is parented to this service.
            </summary>
        </member>
        <member name="M:dEngine.Services.Players.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Services.Players.AllPlayers">
            <summary>
            Gets a list of players.
            </summary>
        </member>
        <member name="P:dEngine.Services.Players.LocalPlayer">
            <summary>
            The player object for the current client.
            </summary>
            <remarks>
            Accessing this property from a server will cause an exception.
            </remarks>
        </member>
        <member name="P:dEngine.Services.Players.CharacterAutoLoads">
            <summary>
            Determines if a <see cref="T:dEngine.Instances.Character" /> is spawned when the player joins/dies.
            </summary>
        </member>
        <member name="P:dEngine.Services.Players.MaxPlayers">
            <summary>
            The maximum amount of players.
            </summary>
        </member>
        <member name="M:dEngine.Services.Players.CreateLocalPlayer">
            <summary>
            Creates the LocalPlayer.
            </summary>
        </member>
        <member name="M:dEngine.Services.Players.GetPlayerByUserId(System.UInt32)">
            <summary>
            Returns a player with the provided steam ID.
            </summary>
            <param name="steamId">The Steam User ID to look for.</param>
        </member>
        <member name="M:dEngine.Services.Players.GetPlayers">
            <summary>
            Gets a list of connected players.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.Services.Players.GetFriendsAsync(System.UInt32)">
            <summary>
            Returns a <see cref="T:dEngine.Instances.FriendPages" /> object which contains information for the given player's friends.
            </summary>
            <remarks>
            The content of the array are the following:
            <list type="table">
                <listheader>
                    <term>Name</term>
                    <term>Type</term>
                    <term>Description</term>
                </listheader>
                <item>
                    <term>UserId</term>
                    <term>number</term>
                    <term>The UserId of the friend.</term>
                </item>
                <item>
                    <term>Username</term>
                    <term>string</term>
                    <term>The username of the friend.</term>
                </item>
                <item>
                    <term>IsOnline</term>
                    <term>Determines If the friend is currently online.</term>
                    <term>bool</term>
                </item>
            </list>
            </remarks>
            <param name="userId">The UserID of the player who has the friends list.</param>
        </member>
        <member name="M:dEngine.Services.Players.Chat(System.String,System.Byte)">
            <summary>
            Sends a chat message to the server.
            </summary>
            <param name="message">The message to send.</param>
            <param name="channel">The channel to send the message on. (0-255)</param>
        </member>
        <member name="M:dEngine.Services.Players.OnChildAdded(dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Services.Players.OnChildRemoved(dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="F:dEngine.Services.Players.Chatted">
            <summary>
            Fired when a client sends a chat message to the server.
            </summary>
        </member>
        <member name="F:dEngine.Services.Players.PlayerAdded">
            <summary>
            Fired when a player joins the game.
            </summary>
        </member>
        <member name="F:dEngine.Services.Players.PlayerRemoved">
            <summary>
            Fired when a player leaves the game.
            </summary>
        </member>
        <member name="T:dEngine.Services.ReplicatedStorage">
            <summary>
            A storage service that replicates its descendants.
            </summary>
            <remarks>
            Objects stored in this container will be baked into both the client and the server files.
            </remarks>
        </member>
        <member name="T:dEngine.Services.RunService">
            <summary>
            A service that handles the game logic loop.
            </summary>
        </member>
        <member name="M:dEngine.Services.RunService.#ctor">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Services.RunService.BindToRenderStep(System.String,System.Int32,System.Action)">
            <summary>
            Attaches the given function to the render loop.
            </summary>
        </member>
        <member name="M:dEngine.Services.RunService.UnbindFromRenderStep(System.String)">
            <summary>
            Detaches the given function from the render loop.
            </summary>
        </member>
        <member name="M:dEngine.Services.RunService.Play">
            <summary>
            Starts or resumes the simulation as a player.
            </summary>
        </member>
        <member name="M:dEngine.Services.RunService.Run">
            <summary>
            Starts or resumes the simulation without a player.
            </summary>
        </member>
        <member name="M:dEngine.Services.RunService.Pause">
            <summary>
            Pauses the simulation.
            </summary>
        </member>
        <member name="M:dEngine.Services.RunService.Stop">
            <summary>
            Stops the simulation.
            </summary>
        </member>
        <member name="M:dEngine.Services.RunService.IsRunMode">
            <summary>
            Returns true if the session is in run mode.
            </summary>
        </member>
        <member name="M:dEngine.Services.RunService.IsPlayMode">
            <summary>
            Returns true if the session is in play mode.
            </summary>
        </member>
        <member name="M:dEngine.Services.RunService.IsPaused">
            <summary>
            Returns true if the simulation is paused.
            </summary>
        </member>
        <member name="M:dEngine.Services.RunService.IsClient">
            <summary>
            Returns true if the game is running as a client.
            </summary>
        </member>
        <member name="M:dEngine.Services.RunService.IsServer">
            <summary>
            Returns true if the game is running as a server.
            </summary>
        </member>
        <member name="M:dEngine.Services.RunService.IsLevelEditor">
            <summary>
            Returns true if the game is running from a level editor.
            </summary>
        </member>
        <member name="F:dEngine.Services.RunService.SimulationEnded">
            <summary>
            Fired when simulation ends.
            </summary>
        </member>
        <member name="F:dEngine.Services.RunService.SimulationPaused">
            <summary>
            Fired when simulation is paused.
            </summary>
        </member>
        <member name="F:dEngine.Services.RunService.SimulationResumed">
            <summary>
            Fired when simulation is resumed.
            </summary>
        </member>
        <member name="F:dEngine.Services.RunService.SimulationStarted">
            <summary>
            Fired when simulation starts.
            </summary>
        </member>
        <member name="F:dEngine.Services.RunService.Heartbeat">
            <summary>
            Fired after every game thread frame.
            </summary>
            <eventParam name="step" />
        </member>
        <member name="F:dEngine.Services.RunService.RenderStepped">
            <summary>
            Fired after every render thread frame.
            </summary>
            <eventParam name="step" />
        </member>
        <member name="F:dEngine.Services.RunService.Stepped">
            <summary>
            Fired when the RunService is stepped, which is approximately every 1/30th of a second.
            </summary>
            <eventParam name="step" />
        </member>
        <member name="F:dEngine.Services.RunService.Service">
            <summary>
            The service instance.
            </summary>
        </member>
        <member name="P:dEngine.Services.RunService.SimulationState">
            <summary>
            The session state.
            </summary>
        </member>
        <member name="P:dEngine.Services.RunService.SimulationType">
            <summary>
            The type of simulation that is running.
            </summary>
        </member>
        <member name="M:dEngine.Services.RunService.CreatePhysicsSimulationAsync">
            <summary>
            Creates a new <see cref="T:dEngine.PhysicsSimulation" /> on the physics thread.
            </summary>
            <returns></returns>
        </member>
        <member name="T:dEngine.Services.SelectionService">
            <summary>
            A service for managing selection in level editors.
            </summary>
        </member>
        <member name="M:dEngine.Services.SelectionService.#ctor">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Services.SelectionService.GetSelection">
            <summary>
            Returns a table of selected items.
            </summary>
        </member>
        <member name="M:dEngine.Services.SelectionService.ClearSelection">
            <summary>
            Deselects all items.
            </summary>
        </member>
        <member name="M:dEngine.Services.SelectionService.Select(dEngine.Instances.Instance,System.Boolean,System.Boolean)">
            <summary>
            Adds instances to the selection list.
            </summary>
            <param name="item">The item to select.</param>
            <param name="clearCurrentSelection">Determines if the current selection will be cleared.</param>
            <param name="pushToHistory">Determines if an action is pushed to the <see cref="T:dEngine.Services.HistoryService" /></param>
        </member>
        <member name="M:dEngine.Services.SelectionService.Deselect(dEngine.Instances.Instance,System.Boolean)">
            <summary>
            Removes instances from the selection list.
            </summary>
            <param name="item">The item to deselect.</param>
            <param name="pushToHistory">Determines if an action is pushed to the <see cref="T:dEngine.Services.HistoryService" /></param>
        </member>
        <member name="F:dEngine.Services.SelectionService.Deselected">
            <summary>
            Fired for every item removed in a Deselect() call.
            </summary>
        </member>
        <member name="F:dEngine.Services.SelectionService.Selected">
            <summary>
            Fired for every item added in a Select() call.
            </summary>
        </member>
        <member name="F:dEngine.Services.SelectionService.SelectionChanged">
            <summary>
            Fired when the selection is changed.
            </summary>
        </member>
        <member name="M:dEngine.Services.SelectionService.OfType``1">
            <summary>
            Returns all selected items of the given type.
            </summary>
        </member>
        <member name="M:dEngine.Services.SelectionService.ForEachPV(System.Action{dEngine.Instances.PVInstance})">
            <summary>
            Performs the given function on each selected <see cref="T:dEngine.Instances.PVInstance" />.
            </summary>
        </member>
        <member name="M:dEngine.Services.SelectionService.ForEach(System.Action{dEngine.Instances.Instance})">
            <summary>
            Performs the given function on each selected item.
            </summary>
        </member>
        <member name="M:dEngine.Services.SelectionService.Where(System.Func{dEngine.Instances.Instance,System.Boolean})">
            <summary>
            Returns all items which patch the predicate.
            </summary>
        </member>
        <member name="T:dEngine.Services.ServerScriptService">
            <summary>
            A container service who executes scripts on the server.
            </summary>
            <remarks>
            Objects stored in this container will not be baked into the client.
            </remarks>
            <seealso cref="T:dEngine.Services.Workspace" />
        </member>
        <member name="T:dEngine.Services.ServerStorage">
            <summary>
            A service for storing objects that are not replicated to the client.
            </summary>
            <remarks>
            Objects stored in this container will not be baked into the client.
            </remarks>
        </member>
        <member name="T:dEngine.Services.SocialService">
            <summary>
            A service for using the social features of Steam.
            </summary>
        </member>
        <member name="M:dEngine.Services.SocialService.#ctor">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Services.SoundService">
            <summary>
            SoundService manages global sound properties.
            </summary>
        </member>
        <member name="M:dEngine.Services.SoundService.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Services.SoundService.AmbientReverb">
            <summary>
            The global environment reverb type.
            </summary>
        </member>
        <member name="P:dEngine.Services.SoundService.DistanceFactor">
            <summary>
            Modifies the distance for every sound.
            </summary>
        </member>
        <member name="P:dEngine.Services.SoundService.DopplerScale">
            <summary>
            Scales the doppler effect.
            </summary>
        </member>
        <member name="P:dEngine.Services.SoundService.RolloffScale">
            <summary>
            Determines how fast sounds will drop off.
            </summary>
        </member>
        <member name="M:dEngine.Services.SoundService.GetRecordingDevices">
            <summary>
            Returns a list of active recording devices.
            </summary>
        </member>
        <member name="M:dEngine.Services.SoundService.GetPlaybackDevices">
            <summary>
            Returns a list of active playback devices.
            </summary>
        </member>
        <member name="M:dEngine.Services.SoundService.SetRecordingDevice(System.Int32)">
            <summary>
            Sets the device to record sound with.
            </summary>
        </member>
        <member name="M:dEngine.Services.SoundService.SetPlaybackDevice(System.Int32)">
            <summary>
            Sets the device to output sound to.
            </summary>
        </member>
        <member name="M:dEngine.Services.SoundService.SetListener(dEngine.Instances.IListenable)">
            <summary>
            Sets the object that the users hears from.
            </summary>
        </member>
        <member name="M:dEngine.Services.SoundService.UpdateMix">
            <summary />
        </member>
        <member name="M:dEngine.Services.SoundService.GetSoundcloudTrackInfo(System.Int32)">
            <summary>
            Returns the JSON data of a Soundcloud track as a table.
            </summary>
        </member>
        <member name="T:dEngine.Services.SolidModelingManager">
            <summary>
            Solid Modeling
            </summary>
        </member>
        <member name="P:dEngine.Services.SolidModelingManager.Operations">
            <summary>
            A dictionary of <see cref="T:dEngine.Instances.UnionOperation" /> for rendering.
            </summary>
            <remarks>
            <see cref="T:dEngine.Instances.NegateOperation" /> and <see cref="T:dEngine.Instances.IntersectOperation" /> do not need to be queued because they are added to
            <see cref="P:dEngine.Graphics.Renderer.TransparentParts" />
            </remarks>
        </member>
        <member name="M:dEngine.Services.SolidModelingManager.Seperate(dEngine.Instances.PartOperation)">
            <summary>
            Seperates a fused object.
            </summary>
        </member>
        <member name="M:dEngine.Services.SolidModelingManager.MakeOp``1(dEngine.Instances.Part)">
            <summary>
            Transforms a <see cref="T:dEngine.Instances.Part" /> into a <see cref="T:dEngine.Instances.PartOperation" /> of the given type, or vice versa.
            </summary>
            <remarks>
            Should not be applied to a <see cref="T:dEngine.Instances.UnionOperation" />.
            </remarks>
        </member>
        <member name="T:dEngine.Services.HttpService">
            <summary>
            A service for sending and receiving HTTP data.
            </summary>
        </member>
        <member name="M:dEngine.Services.HttpService.#ctor">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Services.HttpService.GenerateGuid(System.Boolean)">
            <summary>
            Generates a new GUID.
            </summary>
            <param name="wrapInCurlyBraces">If true, returned GUID string is wrapped in curly braces.</param>
        </member>
        <member name="M:dEngine.Services.HttpService.UrlEncode(System.String)">
            <summary>
            Encodes an URL string.
            </summary>
        </member>
        <member name="M:dEngine.Services.HttpService.JsonEncode(System.Object)">
            <summary>
            Serializes object into JSON.
            </summary>
        </member>
        <member name="M:dEngine.Services.HttpService.JsonDecode(System.String)">
            <summary>
            Deserializes JSON into object.
            </summary>
        </member>
        <member name="M:dEngine.Services.HttpService.GetAsync(System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Sends an HTTP GET request.
            </summary>
            <param name="url"></param>
            <param name="noCache"></param>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:dEngine.Services.HttpService.PostAsync(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Performs an HTTP POST request.
            </summary>
            <param name="url">The request destination.</param>
            <param name="data">The data to send.</param>
            <param name="contentType">The value for the 'Content-Type' header.</param>
            <param name="compress">Determines whether data should be gzip'd.</param>
            <param name="headers">The headers to send with the request.</param>
            <returns></returns>
        </member>
        <member name="F:dEngine.Services.HttpService.NumberOfBytesForGZip">
            <summary>
            If the data to be sent in a POST request exceeds this size it will be compressed.
            </summary>
        </member>
        <member name="T:dEngine.Services.InputService">
            <summary>
            A service for handling input.
            </summary>
        </member>
        <member name="F:dEngine.Services.InputService.Service">
            <summary>
            The service instance.
            </summary>
        </member>
        <member name="M:dEngine.Services.InputService.#ctor">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Services.InputService.MouseBehaviour">
            <summary>
            The mouse behaviour.
            </summary>
        </member>
        <member name="P:dEngine.Services.InputService.CustomCursorIcon">
            <summary>
            The icon to use for the custom cursor.
            </summary>
        </member>
        <member name="P:dEngine.Services.InputService.AccelerometerEnabled">
            <summary>
            Determines if an accelerometer is available on the current device.
            </summary>
        </member>
        <member name="P:dEngine.Services.InputService.GamepadEnabled">
            <summary>
            Determines if a gamepad is available on the current device.
            </summary>
        </member>
        <member name="P:dEngine.Services.InputService.GyroscopeEnabled">
            <summary>
            Determines if a gyroscope is available on the current device.
            </summary>
        </member>
        <member name="P:dEngine.Services.InputService.KeyboardEnabled">
            <summary>
            Determines if a keyboard is available on the current device.
            </summary>
        </member>
        <member name="P:dEngine.Services.InputService.MouseEnabled">
            <summary>
            Determines if a mouse is available on the current device.
            </summary>
        </member>
        <member name="P:dEngine.Services.InputService.TouchEnabled">
            <summary>
            Determines if the current device has touch support.
            </summary>
        </member>
        <member name="P:dEngine.Services.InputService.VREnabled">
            <summary>
            Determines if a virtual reality headset is available on the current device.
            </summary>
        </member>
        <member name="P:dEngine.Services.InputService.FocusedElement">
            <summary>
            The element which currently has input focus.
            </summary>
        </member>
        <member name="M:dEngine.Services.InputService.DoesGamepadSupport(dEngine.InputType,dEngine.Key)">
            <summary>
            Determines whether the given gamepad supports the given key.
            </summary>
        </member>
        <member name="M:dEngine.Services.InputService.GetConnectedGamepads(dEngine.InputType,dEngine.Key)">
            <summary>
            Returns a list of connected gamepads.
            </summary>
        </member>
        <member name="M:dEngine.Services.InputService.IsGamepadConnected(dEngine.InputType)">
            <summary>
            Determines if the given gamepad is currently connected.
            </summary>
        </member>
        <member name="M:dEngine.Services.InputService.GetGamepadState(dEngine.InputType)">
            <summary>
            Returns the <see cref="T:dEngine.InputState" /> of the given gamepad.
            </summary>
        </member>
        <member name="M:dEngine.Services.InputService.GetPressedKeys">
            <summary>
            Returns an array of currently pressed keys.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.Services.InputService.IsKeyDown(dEngine.Key)">
            <summary>
            Returns true if the given key is held down.
            </summary>
        </member>
        <member name="M:dEngine.Services.InputService.IsMouseButtonDown(System.Int32)">
            <summary>
            Returns true if the mouse button for the given number is held down.
            </summary>
            <param name="i">The MouseButton number, in the range of 1-4.</param>
            <returns></returns>
        </member>
        <member name="F:dEngine.Services.InputService.InputBegan">
            <summary>
            Fires when an input begins. (Mouse button pressed, key pressed, etc.)
            </summary>
            <eventParam name="inputObject" />
            <eventParam name="gameProcessedEvent" />
        </member>
        <member name="F:dEngine.Services.InputService.InputChanged">
            <summary>
            Fires when an input changes. (Mouse move, scroll wheel, etc.)
            </summary>
            <eventParam name="inputObject" />
            <eventParam name="gameProcessedEvent" />
        </member>
        <member name="F:dEngine.Services.InputService.InputEnded">
            <summary>
            Fires when an input ends. (Mouse button released, key released etc)
            </summary>
            <eventParam name="inputObject" />
            <eventParam name="gameProcessedEvent" />
        </member>
        <member name="F:dEngine.Services.InputService.WindowFocused">
            <summary>
            Fires when the game window is focused.
            </summary>
        </member>
        <member name="F:dEngine.Services.InputService.WindowFocusReleased">
            <summary>
            Fires when the game window is unfocused.
            </summary>
        </member>
        <member name="F:dEngine.Services.InputService.ViewportFocused">
            <summary>
            Fires when the viewport is focused.
            </summary>
        </member>
        <member name="F:dEngine.Services.InputService.ViewportFocusReleased">
            <summary>
            Fires when the viewport is unfocused.
            </summary>
        </member>
        <member name="T:dEngine.Services.StarterGui">
            <summary>
            A container for guis to be parented to players when they join.
            </summary>
        </member>
        <member name="P:dEngine.Services.StarterGui.ResetGuisOnDeath">
            <summary>
            Determines whether guis will be reset when the player's character dies.
            </summary>
        </member>
        <member name="T:dEngine.Services.Workspace">
            <summary>
            The Workspace is a top-level object representing the game level.
            </summary>
            <remarks>
            Objects need to be parented to the Workspace to physically intearact with the world.
            It will also execute all scripts that are parented to it when the game is running.
            </remarks>
        </member>
        <member name="P:dEngine.Services.Workspace.Gravity">
            <summary>
            The gravity of the scene.
            </summary>
        </member>
        <member name="P:dEngine.Services.Workspace.VoidHeight">
            <summary>
            The height at which parts are destroyed when they fall beneath.
            </summary>
        </member>
        <member name="P:dEngine.Services.Workspace.PlaceId">
            <summary>
            The name of the currently loaded place.
            </summary>
        </member>
        <member name="P:dEngine.Services.Workspace.DistributedGameTime">
            <summary>
            The amount of time in seconds that the simulation
            has been running.
            </summary>
        </member>
        <member name="P:dEngine.Services.Workspace.IsLoaded">
            <summary>
            If true, the place has been loaded.
            </summary>
        </member>
        <member name="P:dEngine.Services.Workspace.CurrentCamera">
            <remarks>
            If CurrentCamera is set to null, or the camera's ancestral <see cref="T:dEngine.Instances.IWorld" /> is no longer Workspace, a new camera
            is created.
            </remarks>
        </member>
        <member name="M:dEngine.Services.Workspace.OnParentFilter(dEngine.Instances.Instance)">
            <summary />
        </member>
        <member name="M:dEngine.Services.Workspace.LoadRbxlx(System.String)">
            <summary>
            Loads a place file in the Roblox XML format.
            </summary>
        </member>
        <member name="M:dEngine.Services.Workspace.LoadPlace(System.String)">
            <summary>
            Loads the given level file. If called by the server, instructs connected clients to load map.
            </summary>
            <param name="placeName">The placeName of the level to load. If empty, unloads the place.</param>
        </member>
        <member name="F:dEngine.Services.Workspace.CameraChanged">
            <summary>
            Fired when <see cref="P:dEngine.Services.Workspace.CurrentCamera" /> changes.
            </summary>
        </member>
        <member name="F:dEngine.Services.Workspace.PlaceLoaded">
            <summary>
            Fired when a place is loaded.
            </summary>
            <seealso cref="M:dEngine.Services.Workspace.LoadPlace(System.String)" />
        </member>
        <member name="P:dEngine.Services.Workspace.Physics">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Services.Workspace.RenderObjectProvider">
            <inheritdoc />
        </member>
        <member name="P:dEngine.Services.Workspace.Terrain">
            <summary>
            The terrain object.
            </summary>
        </member>
        <member name="P:dEngine.Services.Workspace.IsRenderable">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Services.Workspace.FindPartOnRay(dEngine.Ray,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Services.Workspace.FindPartOnRay(dEngine.Ray,Neo.IronLua.LuaTable,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Services.Workspace.FindPartOnRay(dEngine.Ray,System.Func{System.Object,System.Object},System.Single)">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Services.Service">
            <summary>
            A service is a top-level singleton class.
            </summary>
            <remarks>
            Services can be retrived by using the <see cref="M:dEngine.Instances.DataModel.GetService(System.String)" /> method.
            </remarks>
        </member>
        <member name="M:dEngine.Services.Service.#ctor">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Settings.User.UserAnalyticsSettings">
            <summary>
            Analytics settings.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserAnalyticsSettings.Device">
            <summary>
            The device ID.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserAnalyticsSettings.Version">
            <summary>
            The version of the analytics events.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserAnalyticsSettings.SdkVersion">
            <summary>
            The version of the analytics SDK.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserAnalyticsSettings.SessionCount">
            <summary>
            The number of sessions since this file was created.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserAnalyticsSettings.TransactionCount">
            <summary>
            The number of sessions since this file was created.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserAnalyticsSettings.LimitAdTracking">
            <summary>
            Determines if "Limit Ad Tracking" is detected on iOS.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserAnalyticsSettings.Jailbroken">
            <summary>
            Determines if the device is rooted.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserAnalyticsSettings.Gender">
            <summary>
            The gender of the user.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserAnalyticsSettings.BirthYear">
            <summary>
            The birth year of the user.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserAnalyticsSettings.EngineVersion">
            <summary>
            The engine version, including the name.
            </summary>
        </member>
        <member name="T:dEngine.Settings.User.UserGameSettings">
            <summary>
            Game settings.
            </summary>
        </member>
        <member name="M:dEngine.Settings.User.UserGameSettings.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.Brightness">
            <summary>
            Adjusts the brightness of the screen.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.FieldOfView">
            <summary>
            The vertical field of view of the camera.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.WindowMode">
            <summary>
            The window mode to use.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.FullscreenMonitor">
            <summary>
            The monitor to use as the primary screen.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.FullscreenResolution">
            <summary>
            The width to render the game at in fullscreen.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.ColourBlindSupport">
            <summary>
            Changes the colour of the HUD to benefit colour blind players.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.MouseSensitivityFirstPerson">
            <summary>
            The mouse sensitivity in first person.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.MouseSensitivityThirdPerson">
            <summary>
            The mouse sensitivity in third person.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.MouseSensitivityVehicle">
            <summary>
            The mouse sensitivity in third person.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.CameraSpeed">
            <summary>
            The speed of the camera.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.CameraShiftSpeed">
            <summary>
            The speed of the camera when the shift key is held.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.CameraSpeedup">
            <summary>
            Determines if the camera speed should gradually increase while the forward key is held.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.MasterVolume">
            <summary>
            The master volume.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.MusicVolume">
            <summary>
            The global volume modifier for sound sound effects.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.EffectsVolume">
            <summary>
            The global volume modifier for sound effects.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.DialogueVolume">
            <summary>
            The global volume modifier for dialogue.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.SpeakerType">
            <summary>
            The speaker type.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.SpeakerConfiguration">
            <summary>
            The speaker configuration.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.VoipEnabled">
            <summary>
            Determines if VOIP is enabled.
            </summary>
        </member>
        <member name="P:dEngine.Settings.User.UserGameSettings.VoipVolume">
            <summary>
            The global volume modifier for voice comms.
            </summary>
        </member>
        <member name="M:dEngine.Settings.User.UserGameSettings.GetCustomSettings">
            <summary>
            Returns a table of custom settings.
            </summary>
        </member>
        <member name="M:dEngine.Settings.User.UserGameSettings.SetCustomSetting(System.String,System.String)">
            <summary>
            Sets the value of a custom setting.
            </summary>
            <param name="key">The name of the setting.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:dEngine.Settings.User.UserGameSettings.GetCustomSetting(System.String)">
            <summary>
            Returns the value of a custom setting.
            </summary>
            <param name="key">The name of the setting.</param>
        </member>
        <member name="M:dEngine.Settings.User.UserGameSettings.RestoreDefaults">
            <inheritdoc />
        </member>
        <member name="F:dEngine.Settings.User.UserGameSettings.CustomSettingChanged">
            <summary>
            Fired when a custom setting is changed.
            </summary>
        </member>
        <member name="T:dEngine.Settings.GenericSettings">
            <summary>
            Base class for settings containers.
            </summary>
        </member>
        <member name="M:dEngine.Settings.GenericSettings.#ctor">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Settings.GenericSettings.OnChildAdded(dEngine.Instances.Instance)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Settings.GenericSettings.CreateSettings``1(System.String)">
            <summary>
            Creates a new <see cref="T:dEngine.Settings.Settings" /> object and adds it to the settings container.
            </summary>
        </member>
        <member name="M:dEngine.Settings.GenericSettings.RestoreDefaults">
            <summary>
            Restores all settings to their default values.
            </summary>
        </member>
        <member name="M:dEngine.Settings.GenericSettings.Save">
            <summary>
            Saves the settings to an ini file.
            </summary>
        </member>
        <member name="M:dEngine.Settings.GenericSettings.Load">
            <summary>
            Loads the settings from an ini file.
            </summary>
        </member>
        <member name="T:dEngine.Settings.GlobalSettings">
            <summary>
            Global settings container.
            </summary>
        </member>
        <member name="M:dEngine.Settings.GlobalSettings.#ctor">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Settings.Global.DebugSettings">
            <summary>
            Debug settings.
            </summary>
        </member>
        <member name="M:dEngine.Settings.Global.DebugSettings.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.CpuName">
            <summary>
            The name of the CPU you have installed in your computer.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.CpuSpeed">
            <summary>
            The clock speed of the CPU in MHz.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.CpuLogicalProcessors">
            <summary>
            The number of logical processors on the CPU.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.CpuCores">
            <summary>
            The number of cores on the CPU.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.GpuName">
            <summary>
            The name of the GPU currently being used.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.GpuVendor">
            <summary>
            The GPU vendor.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.GpuId">
            <summary>
            The PCI ID of the GPU currently being used.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.PlaybackDeviceName">
            <summary>
            The name of the current audio playback device.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.OsPlatform">
            <summary>
            The platform the game is running on.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.OsPlatformId">
            <summary>
            The platform ID.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.OsVersion">
            <summary>
            The version number of the operating system.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.OsIs64Bit">
            <summary>
            Determines if the operating system is 64 bit.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.ProcPriorityBoost">
            <summary>
            Determines if the process' priority is boosted when it has focus.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.ProcBasePriority">
            <summary>
            The base priority of the process.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.ProcPrivilegedProcessorTime">
            <summary>
            The privileged processor time for this process.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.ToggleConsoleKey">
            <summary>
            The key to use for toggling the command console.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.ConsoleLines">
            <summary>
            The number of lines the console displays.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.LoggingEnabled">
            <summary>
            Determines if log files are written to.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.LogHistoryActions">
            <summary>
            Determines if HistoryService actions are logged.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.LogHistoryEvents">
            <summary>
            Determines if HistoryService events are logged.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.LogHistoryWaypoints">
            <summary>
            Determines if HistoryService waypoints are logged.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.ProfilingEnabled">
            <summary>
            Determines if profiling is enabled.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.XAudio2ProfilingEnabled">
            <summary>
            Determines if profiling is enabled for the audio engine.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.Manufacturer">
            <summary>
            The manufacturer of the user's device.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.DebugSettings.ConnectionType">
            <summary>
            The connection type of the current network adapter.
            </summary>
        </member>
        <member name="M:dEngine.Settings.Global.DebugSettings.RestoreDefaults">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Settings.Global.DebugSettings.GetAdapters">
            <summary>
            Returns an array of adapters.
            </summary>
            <returns></returns>
        </member>
        <member name="T:dEngine.Settings.Global.NetworkSettings">
            <summary>
            Networking settings.
            </summary>
            <remarks>
            Lag Simulation only works in debug builds.
            </remarks>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.PreferredClientPort">
            <summary>
            The preferred port to use as a client.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.PreferredServerPort">
            <summary>
            The preferred port to use as a server.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.EnableUPnP">
            <summary>
            Enables UPnP support, which allows port forwarding and access to the external IP address.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.Mtu">
            <summary>
            The maximum transmission unit.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.AutoExpandMtu">
            <summary>
            Determines if the MTU should automatically expand.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.UnreliableSizeBehaviour">
            <summary>
            The behaviour of unreliable sends above <see cref="P:dEngine.Settings.Global.NetworkSettings.Mtu" />.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.SimulatedPacketLoss">
            <summary>
            Simulates packet loss.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.SimulatedDuplicatesChance">
            <summary>
            The chance for a packet to be duplicated.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.SimulatedMinimumLatency">
            <summary>
            The minimum amount of latency in seconds.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.SimulatedRandomLatency">
            <summary>
            The value for random latency in seconds.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.SimulatedAverageLatency">
            <summary>
            The average simulated latency in seconds.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.SendBufferSize">
            <summary>
            The size of the send buffer.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.ReceiveBufferSize">
            <summary>
            The size of the receive buffer.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.DefaultOutgoingMessageCapacity">
            <summary>
            The default capacity for outgoing messages.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.PingInterval">
            <summary>
            The time between latency calculating pings.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.ConnectionTimeout">
            <summary>
            The number of seconds timeout will be postponed on a successful ping/pong.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.UseMessageRecycling">
            <summary>
            Determines if messages should be recycled to avoid execssive garbage collection.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.Tickrate">
            <summary>
            The value at which network updates are performed in seconds.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.RecycledCacheMaxCount">
            <summary>
            The maximum number of messages to keep in the recycle cache.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.NetworkSettings.NetworkingScale">
            <summary>
            Visual smoothing of network data such as players and objects.
            </summary>
            <remarks>
            Lowering this value will reduce latency but could increase visual errors.
            </remarks>
        </member>
        <member name="M:dEngine.Settings.Global.NetworkSettings.RestoreDefaults">
            <summary />
        </member>
        <member name="T:dEngine.Settings.Global.PhysicsSettings">
            <summary>
            Settings for the physics engine.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.PhysicsSettings.LinearSleepingThreshold">
            <summary>
            The linear sleeping threshold for physics objects.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.PhysicsSettings.AngularSleepingThreshold">
            <summary>
            The angular sleeping threshold for physics objects.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.PhysicsSettings.ShowDecompositionGeometry">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.PhysicsSettings.ShowWireframe">
            <summary>
            Determines if wireframes are drawn.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.PhysicsSettings.AreConstraintsShown">
            <summary>
            Determines if constraints are drawn.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.PhysicsSettings.AreConstraintLimitsShown">
            <summary>
            Determines if constraint limits are drawn.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.PhysicsSettings.AreAabbsShown">
            <summary>
            Determines if AABBs are drawn.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.PhysicsSettings.AreContactPointsShown">
            <summary>
            Determines if contact points are drawn.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.PhysicsSettings.AreNormalsShown">
            <summary>
            Determines if normals are drawn.
            </summary>
        </member>
        <member name="M:dEngine.Settings.Global.PhysicsSettings.RestoreDefaults">
            <summary />
        </member>
        <member name="T:dEngine.Settings.Global.SoundSettings">
            <summary>
            Settings for the sound engine.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.SoundSettings.MaxActiveSoundCount">
            <summary>
            The maximum number of sounds that can be played at once.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.SoundSettings.SampleRate">
            <summary>
            The output sample rate. If set to zero, the default system sample rate will be used.
            </summary>
        </member>
        <member name="M:dEngine.Settings.Global.SoundSettings.RestoreDefaults">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Settings.Global.LuaSettings">
            <summary>
            Settings for the Lua runtime.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.LuaSettings.AreScriptStartsReported">
            <summary>
            If true, script starts will be logged.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.LuaSettings.DefaultWaitTime">
            <summary>
            The amount of time to wait for parameterless wait() calls.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.LuaSettings.DebugEngineEnabled">
            <summary>
            Determines whether scripts will be compiled with a debug engine.
            </summary>
        </member>
        <member name="M:dEngine.Settings.Global.LuaSettings.RestoreDefaults">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Settings.Global.RenderSettings">
            <summary>
            Settings for rendering.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.ShadowMapSize">
            <summary>
            The resolution of the shadow maps.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.ShaderCache">
            <summary>
            The current shader cache file. If set to blank, the cache will be rebuilt.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.CascadeSplit0">
            <summary>
            The first cascade manual split.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.CascadeSplit1">
            <summary>
            The second cascade manual split.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.CascadeSplit2">
            <summary>
            The third cascade manual split.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.CascadeSplit3">
            <summary>
            The fourth cascade manual split when.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.CascadePartitionMode">
            <summary>
            The mode for partitioning the shadow map cascades.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.PssmLambda">
            <summary>
            The mix between linear and logarithmic partitioning when using the PSSM partition mode.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.ShadowDepthBias">
            <summary>
            The shadow depth bias. Used to mitigate self-shadowing issues.
            </summary>
            <remarks>
            If the bias is too large "peter panning" will occur. If the number is too small self-shadowing will occur.
            </remarks>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.ShadowOffsetScale">
            <summary>
            The normal-offset bias. Used to mitigate self-shadowing issues.
            </summary>
            <remarks>
            If the offset is too long "peter panning" will occur. If the number is too small self-shadowing will occur.
            </remarks>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.AreCascadesShown">
            <summary>
            Determines whether a debug visualization of the cascade splits is drawn.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.UseFilterableShadows">
            <summary>
            Determines whether filterable shadow maps are created.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.ShadowMode">
            <summary>
            Determines the type of shadow maps to use.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.ShadowMapFormat">
            <summary>
            Determines the texture format to use for shadow maps.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.UseShadowMips">
            <summary>
            Determines if shadow maps use mips.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.GraphicsAdapter">
            <summary>
            The primary graphics adapter.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.GraphicsMode">
            <summary>
            The graphics library to use.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.SSAOSampleCount">
            <summary>
            The sample count for the SSAO effect.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.ShowAmbientOcclusion">
            <summary>
            Show a visualization of the ambient occlusion.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.SSAODownsampleSize">
            <summary>
            The downsample size for the SSAO effect.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.SSAOBlurPasses">
            <summary>
            The number of blur passes to perform.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.SSAOBlurMode">
            <summary>
            The type of blurring to use.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.SSAOBlurDownsampling">
            <summary>
            Determines whether the blur is performed on the downsampled image.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.UseClearTypeRendering">
            <summary>
            Determines whether text is anti-aliased.
            </summary>
        </member>
        <member name="P:dEngine.Settings.Global.RenderSettings.GuiAntiAliasing">
            <summary>
            Determines whether anti-aliasing is performed on GUI elements.
            </summary>
        </member>
        <member name="M:dEngine.Settings.Global.RenderSettings.GetGpuTemps">
            <summary>
            Gets the tempature of the graphics card.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.Settings.Global.RenderSettings.RestoreDefaults">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Settings.UserSettings">
            <summary>
            User settings container.
            </summary>
        </member>
        <member name="M:dEngine.Settings.UserSettings.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.Settings.UserSettings.UserGameSettings">
            <summary>
            The <see cref="P:dEngine.Settings.UserSettings.UserGameSettings" />.
            </summary>
        </member>
        <member name="P:dEngine.Settings.UserSettings.UserAnalyticsSettings">
            <summary>
            The <see cref="P:dEngine.Settings.UserSettings.UserAnalyticsSettings" />.
            </summary>
        </member>
        <member name="T:dEngine.Settings.Settings">
            <summary>
            Base class for settings.
            </summary>
        </member>
        <member name="M:dEngine.Settings.Settings.#ctor">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Settings.Settings.ApplySettings(Neo.IronLua.LuaTable)">
            <summary>
            Applies settings via a dictionary table.
            </summary>
        </member>
        <member name="M:dEngine.Settings.Settings.ToDictionary">
            <summary>
            Returns a table dictionary of the settings.
            </summary>
        </member>
        <member name="M:dEngine.Settings.Settings.op_Explicit(dEngine.Settings.Settings)~System.Collections.Generic.Dictionary{System.String,System.Object}">
            <summary>
            Returns a dictionary of settings.
            </summary>
        </member>
        <member name="M:dEngine.Settings.Settings.RestoreDefaults">
            <summary>
            Resets the settings to their default values.
            </summary>
        </member>
        <member name="M:dEngine.Settings.Settings.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Sets a static setting property.
            </summary>
        </member>
        <member name="M:dEngine.Settings.Settings.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Gets a static setting property.
            </summary>
        </member>
        <member name="T:dEngine.BinaryData">
            <summary>
            Stores binary data.
            </summary>
            <remarks>
            Maximum value will be 2GB.
            </remarks>
        </member>
        <member name="M:dEngine.BinaryData.#ctor">
            <summary />
        </member>
        <member name="M:dEngine.BinaryData.#ctor(System.Byte[])">
            <summary>
            Creates a <see cref="T:dEngine.BinaryData" /> from the given bytes.
            </summary>
        </member>
        <member name="M:dEngine.BinaryData.#ctor(System.IO.Stream)">
            <summary>
            Creates a <see cref="T:dEngine.BinaryData" /> from the given stream.
            </summary>
        </member>
        <member name="M:dEngine.BinaryData.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="M:dEngine.BinaryData.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="T:dEngine.LuaAction">
            <summary>
            Represents a function in Lua.
            </summary>
        </member>
        <member name="M:dEngine.LuaAction.#ctor(System.Delegate)">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction.Invoke">
            <summary>
            Invokes the action.
            </summary>
        </member>
        <member name="M:dEngine.LuaAction.op_Implicit(dEngine.LuaAction)~System.Action">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction.op_Implicit(System.Action)~dEngine.LuaAction">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction.op_Implicit(System.Delegate)~dEngine.LuaAction">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction.op_Implicit(System.Func{Neo.IronLua.LuaResult})~dEngine.LuaAction">
            <summary />
        </member>
        <member name="T:dEngine.LuaAction`1">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaAction`1.#ctor(System.Delegate)">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`1.Invoke(`0)">
            <summary>
            Invokes the action.
            </summary>
        </member>
        <member name="M:dEngine.LuaAction`1.op_Implicit(dEngine.LuaAction{`0})~System.Action{`0}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`1.op_Implicit(System.Delegate)~dEngine.LuaAction{`0}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`1.op_Implicit(System.MulticastDelegate)~dEngine.LuaAction{`0}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`1.op_Implicit(System.Func{Neo.IronLua.LuaResult})~dEngine.LuaAction{`0}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`1.op_Implicit(System.Func{System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`1.op_Implicit(System.Func{System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`1.op_Implicit(System.Func{System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`1.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`1.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`1.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0}">
            <summary />
        </member>
        <member name="T:dEngine.LuaAction`2">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaAction`2.#ctor(System.Delegate)">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`2.Invoke(`0,`1)">
            <summary>
            Invokes the action.
            </summary>
        </member>
        <member name="M:dEngine.LuaAction`2.op_Implicit(dEngine.LuaAction{`0,`1})~System.Action{`0,`1}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`2.op_Implicit(System.Delegate)~dEngine.LuaAction{`0,`1}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`2.op_Implicit(System.MulticastDelegate)~dEngine.LuaAction{`0,`1}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`2.op_Implicit(System.Func{Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`2.op_Implicit(System.Func{System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`2.op_Implicit(System.Func{System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`2.op_Implicit(System.Func{System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`2.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`2.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`2.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1}">
            <summary />
        </member>
        <member name="T:dEngine.LuaAction`3">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaAction`3.#ctor(System.Delegate)">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`3.Invoke(`0,`1,`2)">
            <summary>
            Invokes the action.
            </summary>
        </member>
        <member name="M:dEngine.LuaAction`3.op_Implicit(dEngine.LuaAction{`0,`1,`2})~System.Action{`0,`1,`2}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`3.op_Implicit(System.Delegate)~dEngine.LuaAction{`0,`1,`2}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`3.op_Implicit(System.MulticastDelegate)~dEngine.LuaAction{`0,`1,`2}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`3.op_Implicit(System.Func{Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`3.op_Implicit(System.Func{System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`3.op_Implicit(System.Func{System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`3.op_Implicit(System.Func{System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`3.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`3.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`3.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2}">
            <summary />
        </member>
        <member name="T:dEngine.LuaAction`4">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaAction`4.#ctor(System.Delegate)">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`4.Invoke(`0,`1,`2,`3)">
            <summary>
            Invokes the action.
            </summary>
        </member>
        <member name="M:dEngine.LuaAction`4.op_Implicit(dEngine.LuaAction{`0,`1,`2,`3})~System.Action{`0,`1,`2,`3}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`4.op_Implicit(System.Delegate)~dEngine.LuaAction{`0,`1,`2,`3}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`4.op_Implicit(System.MulticastDelegate)~dEngine.LuaAction{`0,`1,`2,`3}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`4.op_Implicit(System.Func{Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`4.op_Implicit(System.Func{System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`4.op_Implicit(System.Func{System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`4.op_Implicit(System.Func{System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`4.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`4.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`4.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3}">
            <summary />
        </member>
        <member name="T:dEngine.LuaAction`5">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaAction`5.#ctor(System.Delegate)">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`5.Invoke(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the action.
            </summary>
        </member>
        <member name="M:dEngine.LuaAction`5.op_Implicit(dEngine.LuaAction{`0,`1,`2,`3,`4})~System.Action{`0,`1,`2,`3,`4}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`5.op_Implicit(System.Delegate)~dEngine.LuaAction{`0,`1,`2,`3,`4}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`5.op_Implicit(System.MulticastDelegate)~dEngine.LuaAction{`0,`1,`2,`3,`4}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`5.op_Implicit(System.Func{Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`5.op_Implicit(System.Func{System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`5.op_Implicit(System.Func{System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`5.op_Implicit(System.Func{System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`5.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`5.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`5.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4}">
            <summary />
        </member>
        <member name="T:dEngine.LuaAction`6">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaAction`6.#ctor(System.Delegate)">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`6.Invoke(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invokes the action.
            </summary>
        </member>
        <member name="M:dEngine.LuaAction`6.op_Implicit(dEngine.LuaAction{`0,`1,`2,`3,`4,`5})~System.Action{`0,`1,`2,`3,`4,`5}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`6.op_Implicit(System.Delegate)~dEngine.LuaAction{`0,`1,`2,`3,`4,`5}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`6.op_Implicit(System.MulticastDelegate)~dEngine.LuaAction{`0,`1,`2,`3,`4,`5}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`6.op_Implicit(System.Func{Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4,`5}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`6.op_Implicit(System.Func{System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4,`5}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`6.op_Implicit(System.Func{System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4,`5}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`6.op_Implicit(System.Func{System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4,`5}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`6.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4,`5}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`6.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4,`5}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`6.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4,`5}">
            <summary />
        </member>
        <member name="T:dEngine.LuaAction`7">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaAction`7.#ctor(System.Delegate)">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`7.Invoke(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Invokes the action.
            </summary>
        </member>
        <member name="M:dEngine.LuaAction`7.op_Implicit(dEngine.LuaAction{`0,`1,`2,`3,`4,`5,`6})~System.Action{`0,`1,`2,`3,`4,`5,`6}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`7.op_Implicit(System.Delegate)~dEngine.LuaAction{`0,`1,`2,`3,`4,`5,`6}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`7.op_Implicit(System.MulticastDelegate)~dEngine.LuaAction{`0,`1,`2,`3,`4,`5,`6}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`7.op_Implicit(System.Func{Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4,`5,`6}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`7.op_Implicit(System.Func{System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4,`5,`6}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`7.op_Implicit(System.Func{System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4,`5,`6}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`7.op_Implicit(System.Func{System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4,`5,`6}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`7.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4,`5,`6}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`7.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4,`5,`6}">
            <summary />
        </member>
        <member name="M:dEngine.LuaAction`7.op_Implicit(System.Func{System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,Neo.IronLua.LuaResult})~dEngine.LuaAction{`0,`1,`2,`3,`4,`5,`6}">
            <summary />
        </member>
        <member name="T:dEngine.LuaTuple`1">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaTuple`1.op_Implicit(dEngine.LuaTuple{`0})~Neo.IronLua.LuaResult">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`1.op_Implicit(dEngine.LuaTuple{`0})~`0">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`1.op_Implicit(dEngine.LuaTuple{`0})~System.Tuple{`0}">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`1.op_Implicit(System.Tuple{`0})~dEngine.LuaTuple{`0}">
            <summary />
        </member>
        <member name="T:dEngine.LuaTuple`2">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaTuple`2.op_Implicit(dEngine.LuaTuple{`0,`1})~Neo.IronLua.LuaResult">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`2.op_Implicit(dEngine.LuaTuple{`0,`1})~`0">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`2.op_Implicit(dEngine.LuaTuple{`0,`1})~System.Tuple{`0,`1}">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`2.op_Implicit(System.Tuple{`0,`1})~dEngine.LuaTuple{`0,`1}">
            <summary />
        </member>
        <member name="T:dEngine.LuaTuple`3">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaTuple`3.op_Implicit(dEngine.LuaTuple{`0,`1,`2})~Neo.IronLua.LuaResult">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`3.op_Implicit(dEngine.LuaTuple{`0,`1,`2})~`0">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`3.op_Implicit(dEngine.LuaTuple{`0,`1,`2})~System.Tuple{`0,`1,`2}">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`3.op_Implicit(System.Tuple{`0,`1,`2})~dEngine.LuaTuple{`0,`1,`2}">
            <summary />
        </member>
        <member name="T:dEngine.LuaTuple`4">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaTuple`4.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3})~Neo.IronLua.LuaResult">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`4.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3})~`0">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`4.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3})~System.Tuple{`0,`1,`2,`3}">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`4.op_Implicit(System.Tuple{`0,`1,`2,`3})~dEngine.LuaTuple{`0,`1,`2,`3}">
            <summary />
        </member>
        <member name="T:dEngine.LuaTuple`5">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaTuple`5.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4})~Neo.IronLua.LuaResult">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`5.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4})~`0">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`5.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4})~System.Tuple{`0,`1,`2,`3,`4}">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`5.op_Implicit(System.Tuple{`0,`1,`2,`3,`4})~dEngine.LuaTuple{`0,`1,`2,`3,`4}">
            <summary />
        </member>
        <member name="T:dEngine.LuaTuple`6">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaTuple`6.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4,`5})~Neo.IronLua.LuaResult">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`6.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4,`5})~`0">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`6.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4,`5})~System.Tuple{`0,`1,`2,`3,`4,`5}">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`6.op_Implicit(System.Tuple{`0,`1,`2,`3,`4,`5})~dEngine.LuaTuple{`0,`1,`2,`3,`4,`5}">
            <summary />
        </member>
        <member name="T:dEngine.LuaTuple`7">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaTuple`7.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4,`5,`6})~Neo.IronLua.LuaResult">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`7.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4,`5,`6})~`0">
            <summary />
        </member>
        <member name="T:dEngine.LuaTuple`8">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaTuple`8.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4,`5,`6,`7})~Neo.IronLua.LuaResult">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`8.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4,`5,`6,`7})~`0">
            <summary />
        </member>
        <member name="T:dEngine.LuaTuple`9">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaTuple`9.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4,`5,`6,`7,`8})~Neo.IronLua.LuaResult">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`9.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4,`5,`6,`7,`8})~`0">
            <summary />
        </member>
        <member name="T:dEngine.LuaTuple`10">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaTuple`10.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})~Neo.IronLua.LuaResult">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`10.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9})~`0">
            <summary />
        </member>
        <member name="T:dEngine.LuaTuple`11">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaTuple`11.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})~Neo.IronLua.LuaResult">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`11.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10})~`0">
            <summary />
        </member>
        <member name="T:dEngine.LuaTuple`12">
            <summary>
            Represents multiple return values.
            </summary>
        </member>
        <member name="M:dEngine.LuaTuple`12.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})~Neo.IronLua.LuaResult">
            <summary />
        </member>
        <member name="M:dEngine.LuaTuple`12.op_Implicit(dEngine.LuaTuple{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9,`10,`11})~`0">
            <summary />
        </member>
        <member name="T:dEngine.FontFamily">
            <summary>
            A font family.
            </summary>
        </member>
        <member name="M:dEngine.FontFamily.#ctor(System.String)">
            <summary />
        </member>
        <member name="M:dEngine.FontFamily.ToString">
            <summary />
        </member>
        <member name="M:dEngine.FontFamily.ToString(System.String,System.IFormatProvider)">
            <summary />
        </member>
        <member name="M:dEngine.FontFamily.op_Implicit(System.String)~dEngine.FontFamily">
            <summary />
        </member>
        <member name="M:dEngine.FontFamily.op_Implicit(dEngine.FontFamily)~System.String">
            <summary />
        </member>
        <member name="M:dEngine.FontFamily.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="M:dEngine.FontFamily.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="T:dEngine.Utility.IOrderedDictionary`2">
            <summary>
            A dictionary that remembers the order that keys were first inserted. If a new entry overwrites an existing entry, the
            original insertion position is left unchanged. Deleting an entry and reinserting it will move it to the end.
            </summary>
            <typeparam name="TKey">The type of keys</typeparam>
            <typeparam name="TValue">The type of values</typeparam>
            <copyright>
            https://github.com/mattmc3/dotmore/blob/master/dotmore/Collections/Generic/OrderedDictionary.cs
            </copyright>
        </member>
        <member name="P:dEngine.Utility.IOrderedDictionary`2.Item(System.Int32)">
            <summary>
            The value of the element at the given index.
            </summary>
        </member>
        <member name="M:dEngine.Utility.IOrderedDictionary`2.IndexOf(`0)">
            <summary>
            Find the position of an element by key. Returns -1 if the dictionary does not contain an element with the given key.
            </summary>
        </member>
        <member name="M:dEngine.Utility.IOrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Insert an element at the given index.
            </summary>
        </member>
        <member name="M:dEngine.Utility.IOrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the given index.
            </summary>
        </member>
        <member name="T:dEngine.Utility.OrderedDictionary`2">
            <summary>
            A dictionary that remembers the order that keys were first inserted. If a new entry overwrites an existing entry, the
            original insertion position is left unchanged. Deleting an entry and reinserting it will move it to the end.
            </summary>
            <typeparam name="TKey">The type of keys. Musn't be <see cref="T:System.Int32" /></typeparam>
            <typeparam name="TValue">The type of values.</typeparam>
        </member>
        <member name="F:dEngine.Utility.OrderedDictionary`2.fDictionary">
            <summary>
            An unordered dictionary of key pairs.
            </summary>
        </member>
        <member name="F:dEngine.Utility.OrderedDictionary`2.fKeys">
            <summary>
            The keys of the dictionary in the exposed order.
            </summary>
        </member>
        <member name="M:dEngine.Utility.OrderedDictionary`2.#ctor">
            <summary>
            A dictionary that remembers the order that keys were first inserted. If a new entry overwrites an existing entry, the
            original insertion position is left unchanged. Deleting an entry and reinserting it will move it to the end.
            </summary>
        </member>
        <member name="P:dEngine.Utility.OrderedDictionary`2.Count">
            <summary>
            The number of elements in the dictionary.
            </summary>
        </member>
        <member name="P:dEngine.Utility.OrderedDictionary`2.IsReadOnly">
            <summary>
            This dictionary is not read only.
            </summary>
        </member>
        <member name="P:dEngine.Utility.OrderedDictionary`2.Keys">
            <summary>
            The keys of the dictionary, in order.
            </summary>
        </member>
        <member name="P:dEngine.Utility.OrderedDictionary`2.Values">
            <summary>
            The values in the dictionary, in order.
            </summary>
        </member>
        <member name="P:dEngine.Utility.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            The value at the given index.
            </summary>
        </member>
        <member name="P:dEngine.Utility.OrderedDictionary`2.Item(`0)">
            <summary>
            The value under the given key. New entries are added at the end of the order. Updating an existing entry does not
            change its position.
            </summary>
        </member>
        <member name="M:dEngine.Utility.OrderedDictionary`2.IndexOf(`0)">
            <summary>
            Find the position of an element by key. Returns -1 if the dictionary does not contain an element with the given key.
            </summary>
        </member>
        <member name="M:dEngine.Utility.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Remove the element at the given index.
            </summary>
        </member>
        <member name="M:dEngine.Utility.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Test whether there is an element with the given key.
            </summary>
        </member>
        <member name="M:dEngine.Utility.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Try to get a value from the dictionary, by key. Returns false if there is no element with the given key.
            </summary>
        </member>
        <member name="M:dEngine.Utility.OrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Insert an element at the given index.
            </summary>
        </member>
        <member name="M:dEngine.Utility.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Add an element to the dictionary.
            </summary>
        </member>
        <member name="M:dEngine.Utility.OrderedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add an element to the dictionary.
            </summary>
        </member>
        <member name="M:dEngine.Utility.OrderedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Test whether the dictionary contains an element equal to that given.
            </summary>
        </member>
        <member name="M:dEngine.Utility.OrderedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Remove a key-value pair from the dictionary. Return true if pair was successfully removed. Otherwise, if the pair was
            not found, return false.
            </summary>
        </member>
        <member name="M:dEngine.Utility.OrderedDictionary`2.Remove(`0)">
            <summary>
            Remove the element with the given key key. If there is no element with the key, no exception is thrown.
            </summary>
        </member>
        <member name="M:dEngine.Utility.OrderedDictionary`2.Clear">
            <summary>
            Delete all elements from the dictionary.
            </summary>
        </member>
        <member name="M:dEngine.Utility.OrderedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copy the elements of the dictionary to an array, starting at at the given index.
            </summary>
        </member>
        <member name="M:dEngine.Utility.OrderedDictionary`2.ObjectInvariant">
            <summary>
            Conditions that should be true at the end of every public method.
            </summary>
        </member>
        <member name="T:dEngine.Utility.Extensions.BinaryReaderExtensions">
            <summary/>
        </member>
        <member name="M:dEngine.Utility.Extensions.BinaryReaderExtensions.BeginsWith(System.IO.BinaryReader,System.Byte[],System.Boolean)">
            <summary>
            Determines if the stream starts with the given magic bytes.
            </summary>
            <param name="reader"></param>
            <param name="magic"></param>
            <param name="resetPos">If true, the stream position will be set to 0.</param>
            <returns></returns>
        </member>
        <member name="T:dEngine.Utility.Extensions.StringExtensions">
            <summary/>
        </member>
        <member name="M:dEngine.Utility.Extensions.StringExtensions.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes.
            </summary>
        </member>
        <member name="M:dEngine.Utility.Extensions.BinaryArrayExtensions.ReverseForBigEndian(System.Byte[],System.Int32,System.Int32)">
            <summary />
            <param name="byteArray">The source array to get reversed bytes for</param>
            <param name="startIndex">The index in the source array at which to begin the reverse</param>
            <param name="count">The number of bytes to reverse</param>
            <returns>A new array containing the reversed bytes, or a sub set of the array not reversed.</returns>
        </member>
        <member name="M:dEngine.Utility.Extensions.Extensions.ToArray(System.IO.Stream)">
            <summary>
            Copies data from a non-<see cref="T:System.IO.MemoryStream" /> stream to an array of bytes.
            </summary>
        </member>
        <member name="M:dEngine.Utility.Extensions.Extensions.GetDescendantTypes(System.Type)">
            <summary>
            Returns all descendant types.
            </summary>
        </member>
        <member name="M:dEngine.Utility.Extensions.Extensions.GetDirectDescendantTypes(System.Type)">
            <summary>
            Returns direct descendant types.
            </summary>
        </member>
        <member name="F:dEngine.Utility.NvApi.Sensor.Controller">
            <summary>
            ADM1032, MAX6649...
            </summary>
        </member>
        <member name="F:dEngine.Utility.NvApi.Sensor.CurrentTemp">
            <summary>
            The current temperature value of the thermal sensor in degree Celsius
            </summary>
        </member>
        <member name="F:dEngine.Utility.NvApi.Sensor.DefaultMaxTemp">
            <summary>
            The max default temperature value of the thermal sensor in degree Celsius
            </summary>
        </member>
        <member name="F:dEngine.Utility.NvApi.Sensor.DefaultMinTemp">
            <summary>
            The min default temperature value of the thermal sensor in degree Celsius
            </summary>
        </member>
        <member name="F:dEngine.Utility.NvApi.Sensor.Target">
            <summary>
            Thermal sensor targeted @ GPU, memory, chipset, powersupply, Visual Computing Device, etc
            </summary>
        </member>
        <member name="F:dEngine.Utility.SimplexNoise.F2">
            Skewing and unskewing factors for 2D, 3D and 4D, some of them
            pre-multiplied.
        </member>
        <member name="F:dEngine.Utility.SimplexNoise.grad3">
            Gradient vectors for 3D (pointing to mid points of all edges of a unit
            cube)
        </member>
        <member name="F:dEngine.Utility.SimplexNoise.grad4">
            Gradient vectors for 4D (pointing to mid points of all edges of a unit 4D
            hypercube)
        </member>
        <member name="F:dEngine.Utility.SimplexNoise.p">
            Permutation table
        </member>
        <member name="F:dEngine.Utility.SimplexNoise.perm">
            To remove the need for index wrapping, double the permutation table
            length
        </member>
        <member name="F:dEngine.Utility.SimplexNoise.simplex">
            A lookup table to traverse the simplex around a given point in 4D.
            Details can be found where this table is used, in the 4D noise method.
        </member>
        <member name="M:dEngine.Utility.SimplexNoise.dot(System.Int32[],System.Double,System.Double)">
             Computes dot product in 2D.
             
             @param g
            			2-vector (grid offset)
             @param x
             @param y
             @return dot product
        </member>
        <member name="M:dEngine.Utility.SimplexNoise.dot(System.Int32[],System.Double,System.Double,System.Double)">
             Computes dot product in 3D.
             
             @param g
            			3-vector (grid offset)
             @param x
             @param y
             @param z
             @return dot product
        </member>
        <member name="M:dEngine.Utility.SimplexNoise.dot(System.Int32[],System.Double,System.Double,System.Double,System.Double)">
             Computes dot product in 4D.
             
             @param g
            			4-vector (grid offset)
             @param x
             @param y
             @param z
             @param w
             @return dot product
        </member>
        <member name="M:dEngine.Utility.SimplexNoise.fastfloor(System.Double)">
             This method is a *lot* faster than using (int)Math.floor(x).
             
             @param x
            			value to be floored
             @return
        </member>
        <member name="M:dEngine.Utility.SimplexNoise.Noise(System.Double,System.Double)">
             Computes 2D Simplex Noise.
             
             @param x
            			coordinate
             @param y
            			coordinate
             @return noise value in range -1 ... +1.
        </member>
        <member name="M:dEngine.Utility.SimplexNoise.Noise(System.Double,System.Double,System.Double)">
             Computes 3D Simplex Noise.
             
             @param x
            			coordinate
             @param y
            			coordinate
             @param z
            			coordinate
             @return noise value in range -1 ... +1
        </member>
        <member name="M:dEngine.Utility.SimplexNoise.Noise(System.Double,System.Double,System.Double,System.Double)">
             Computes 4D Simplex Noise.
             
             @param x
            			coordinate
             @param y
            			coordinate
             @param z
            			coordinate
             @param w
            			coordinate
             @return noise value in range -1 ... +1
        </member>
        <member name="M:dEngine.Utility.ConcurrentDictionaryExtensions.TryAdd``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            Attempts to add the given key to a dictionary with a default value.
            </summary>
        </member>
        <member name="M:dEngine.Utility.ConcurrentDictionaryExtensions.TryRemove``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            Attempts to remove an entry from a dictionary without getting the value.
            </summary>
        </member>
        <member name="T:dEngine.Utility.ConcurrentWorkQueue`1">
            <summary>
            A concurrent queue which will take all elements every frame and work on them.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:dEngine.Utility.ConcurrentWorkQueue`1.#ctor(System.Action{`0})">
            <summary>
            Creates a work queue.
            </summary>
            <param name="perform">The action to call for each queue item.</param>
        </member>
        <member name="P:dEngine.Utility.ConcurrentWorkQueue`1.SameThreadSkipsQueue">
            <summary>
            Determines if <see cref="M:dEngine.Utility.ConcurrentWorkQueue`1.Enqueue(`0)" /> calls on the same thread as the creation thread should skip the queue.
            </summary>
        </member>
        <member name="P:dEngine.Utility.ConcurrentWorkQueue`1.Count">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Utility.ConcurrentWorkQueue`1.Enqueue(`0)">
            <summary>
            Adds an item to the end of the queue.
            </summary>
        </member>
        <member name="M:dEngine.Utility.ConcurrentWorkQueue`1.Work">
            <summary>
            Performs work on the queue.
            </summary>
        </member>
        <member name="T:dEngine.Utility.Comments">
            <summary>
            Manages comments.
            </summary>
        </member>
        <member name="M:dEngine.Utility.Comments.#ctor(System.String)">
            <summary />
        </member>
        <member name="M:dEngine.Utility.Comments.Get(System.Type,dEngine.Utility.Comments.Comment@)">
            <summary>
            Tries to get the comment for the given class.
            </summary>
        </member>
        <member name="M:dEngine.Utility.Comments.Get(System.Reflection.FieldInfo,dEngine.Utility.Comments.Comment@)">
            <summary>
            Tries to get the comment for the given field.
            </summary>
        </member>
        <member name="M:dEngine.Utility.Comments.Get(System.Reflection.PropertyInfo,dEngine.Utility.Comments.Comment@)">
            <summary>
            Tries to get the comment for the given property.
            </summary>
        </member>
        <member name="M:dEngine.Utility.Comments.Get(System.Reflection.MethodInfo,dEngine.Utility.Comments.Comment@)">
            <summary>
            Tries to get the comment for the given method.
            </summary>
        </member>
        <member name="M:dEngine.Utility.Comments.Get(System.String,dEngine.Utility.Comments.Comment@)">
            <summary>
            Tries to get the comment for the given key.
            </summary>
        </member>
        <member name="T:dEngine.Utility.FileFormats.Model.FBX">
            <summary>
            Helper class for converting FBX files to dEngine assets.
            </summary>
        </member>
        <member name="M:dEngine.Utility.FileFormats.Model.FBX.Import(System.IO.Stream,dEngine.Utility.FileFormats.Model.FBX.ImportSettings,System.String,System.String)">
            <summary>
            Imports an FBX file.
            </summary>
            <param name="stream">The FBX stream.</param>
            <param name="settings">An import settings object.</param>
            <param name="format">The filetype of the mesh.</param>
            <param name="filePath">The path to the file.</param>
            <returns>An <see cref="T:dEngine.Utility.FileFormats.Model.FBX.ImportResult" /> object.</returns>
        </member>
        <member name="T:dEngine.Utility.FileFormats.Model.FBX.ImportResult">
            <summary>
            The result of the import.
            </summary>
        </member>
        <member name="T:dEngine.Utility.FileFormats.Model.FBX.ImportSettings">
            <summary>
            FBX import settings.
            </summary>
        </member>
        <member name="P:dEngine.Utility.FileFormats.Model.FBX.ImportSettings.ImportAsSkeletal">
            <summary>
            Determines if the mesh should be treated a a Sketal or Static mesh.
            </summary>
        </member>
        <member name="P:dEngine.Utility.FileFormats.Model.FBX.ImportSettings.KeepOverlappingVertices">
            <summary>
            Determines whether or not duplicate vertices will be removed.
            </summary>
        </member>
        <member name="P:dEngine.Utility.FileFormats.Model.FBX.ImportSettings.NormalImportMethod">
            <summary>
            Determines whether or not duplicate vertices will be removed.
            </summary>
        </member>
        <member name="P:dEngine.Utility.FileFormats.Model.FBX.ImportSettings.MergeMeshes">
            <summary>
            Determines if meshes should be merged.
            </summary>
        </member>
        <member name="P:dEngine.Utility.FileFormats.Model.FBX.ImportSettings.Skeleton">
            <summary>
            The existing skeleton to use for this mesh. If none is provided, the skeleton will be imported from the file.
            </summary>
        </member>
        <member name="P:dEngine.Utility.FileFormats.Model.FBX.ImportSettings.UpdateReferencePose">
            <summary>
            Determines if the skeleton reference pose should be updated.
            </summary>
        </member>
        <member name="P:dEngine.Utility.FileFormats.Model.FBX.ImportSettings.UseFirstFrameAsReferencePose">
            <summary>
            Determines if the first frame should be used as the reference pose.
            </summary>
        </member>
        <member name="P:dEngine.Utility.FileFormats.Model.FBX.ImportSettings.ImportMorphTargets">
            <summary>
            If enabled, morph target swill be imported from the FBX file.
            </summary>
        </member>
        <member name="T:dEngine.Utility.FileFormats.Model.FBX.NormalImportMethod">
            <summary>
            Enum for normal import methods.
            </summary>
        </member>
        <member name="F:dEngine.Utility.FileFormats.Model.FBX.NormalImportMethod.ComputeNormals">
            <summary>
            The importer will compute normals and tangents.
            </summary>
        </member>
        <member name="F:dEngine.Utility.FileFormats.Model.FBX.NormalImportMethod.ComputeNormalsSmooth">
            <summary>
            The importer will compute smooth normals and tangents.
            </summary>
        </member>
        <member name="F:dEngine.Utility.FileFormats.Model.FBX.NormalImportMethod.ImportNormals">
            <summary>
            The importer will import normals but compute tangents.
            </summary>
        </member>
        <member name="F:dEngine.Utility.FileFormats.Model.FBX.NormalImportMethod.ImportNormalsAndTangents">
            <summary>
            The importer will import normals and tangents.
            </summary>
        </member>
        <member name="M:dEngine.Utility.InstanceHelper.Recurse(dEngine.Instances.Instance,System.Func{dEngine.Instances.Instance,System.SByte})">
            <summary>
            Calls func on the descendants of root.
            </summary>
            <param name="root">The instance to start at.</param>
            <param name="func">A callback for each item. If it returns false, the loop will break.</param>
        </member>
        <member name="T:dEngine.Utility.NeoLuaUtility">
            <summary>
            Utility methods related to NeoLua.
            </summary>
        </member>
        <member name="M:dEngine.Utility.NeoLuaUtility.ToHashSet``1(Neo.IronLua.LuaTable)">
            <summary>
            Converts a <see cref="T:Neo.IronLua.LuaTable" /> to a <see cref="T:System.Collections.Generic.HashSet`1" />
            </summary>
        </member>
        <member name="M:dEngine.Utility.NeoLuaUtility.ToLuaTable``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Packs the dictionary into a <see cref="T:Neo.IronLua.LuaTable" />
            </summary>
        </member>
        <member name="M:dEngine.Utility.NeoLuaUtility.ToLuaTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Packs the enumerable into a <see cref="T:Neo.IronLua.LuaTable" />
            </summary>
        </member>
        <member name="M:dEngine.Utility.NeoLuaUtility.ToLuaTable``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Packs the enumerable into a <see cref="T:Neo.IronLua.LuaTable" />.
            </summary>
        </member>
        <member name="T:dEngine.Utility.MemoizingMRUCache`2">
            <summary>
            This data structure is a representation of a memoizing cache - i.e. a
            class that will evaluate a function, but keep a cache of recently
            evaluated parameters.
            Since this is a memoizing cache, it is important that this function be a
            "pure" function in the mathematical sense - that a key *always* maps to
            a corresponding return value.
            </summary>
            <typeparam name="TParam">The type of the parameter to the calculation function.</typeparam>
            <typeparam name="TVal">
            The type of the value returned by the calculation
            function.
            </typeparam>
        </member>
        <member name="M:dEngine.Utility.MemoizingMRUCache`2.#ctor(System.Func{`0,System.Object,`1},System.Int32,System.Action{`1})">
            <summary>
            Constructor
            </summary>
            <param name="calculationFunc">
            The function whose results you want to cache,
            which is provided the key value, and an Tag object that is
            user-defined
            </param>
            <param name="maxSize">
            The size of the cache to maintain, after which old
            items will start to be thrown out.
            </param>
            <param name="onRelease">
            A function to call when a result gets
            evicted from the cache (i.e. because Invalidate was called or the
            cache is full)
            </param>
        </member>
        <member name="M:dEngine.Utility.MemoizingMRUCache`2.Get(`0,System.Object)">
            <summary>
            Evaluates the function provided, returning the cached value if possible
            </summary>
            <param name="key">The value to pass to the calculation function.</param>
            <param name="context">An additional optional user-specific parameter.</param>
            <returns></returns>
        </member>
        <member name="M:dEngine.Utility.MemoizingMRUCache`2.TryGet(`0,`1@)">
            <summary>
            Tries to get the value for the key, but does not call the calculation function.
            </summary>
            <param name="key"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:dEngine.Utility.MemoizingMRUCache`2.Invalidate(`0)">
            <summary>
            Ensure that the next time this key is queried, the calculation
            function will be called.
            </summary>
        </member>
        <member name="M:dEngine.Utility.MemoizingMRUCache`2.InvalidateAll">
            <summary>
            Invalidate all items in the cache
            </summary>
        </member>
        <member name="M:dEngine.Utility.MemoizingMRUCache`2.CachedValues">
            <summary>
            Returns all values currently in the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.Utility.DirectXUtil.BulletMatrixToSharpDX(BulletSharp.Math.Matrix)">
            <summary>
            Converts BulletSharp Matrix4x4 to a CFrame.
            </summary>
        </member>
        <member name="T:dEngine.Utility.Mathf">
            <summary>
            Utility class for using <seealso cref="T:System.Math" /> methods with floats.
            </summary>
        </member>
        <member name="F:dEngine.Utility.Mathf.Pi">
            <summary>
            Pi.
            </summary>
        </member>
        <member name="F:dEngine.Utility.Mathf.HalfPi">
            <summary>
            Pi/2
            </summary>
        </member>
        <member name="F:dEngine.Utility.Mathf.Deg2Rad">
            <summary>
            Degrees to radians converter value.
            </summary>
        </member>
        <member name="F:dEngine.Utility.Mathf.Rad2Deg">
            <summary>
            Radians to degrees converter value.
            </summary>
        </member>
        <member name="M:dEngine.Utility.Rbxlx.Load(dEngine.Services.Workspace,System.IO.Stream)">
            <summary>
            Load instances from a ROBLOX place XML file (.RBXLX)
            </summary>
            <param name="workspace">The workspace.</param>
            <param name="stream">The stream to read XML from.</param>
        </member>
        <member name="T:dEngine.Utility.ParentException">
            <summary>
            An exception which is thrown when <see cref="P:dEngine.Instances.Instance.Parent" /> is set to an invalid state.
            </summary>
        </member>
        <member name="M:dEngine.Utility.ParentException.#ctor(System.String)">
            <summary>
            Creates a new exception.
            </summary>
        </member>
        <member name="T:dEngine.Utility.RawInputDefinitions.RawInput">
            <summary>
            Contains the raw input from a device.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawInput.Header">
            <summary>
            Header for the data.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawInput.Union.Mouse">
            <summary>
            Mouse raw input data.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawInput.Union.Keyboard">
            <summary>
            Keyboard raw input data.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawInput.Union.HID">
            <summary>
            HID raw input data.
            </summary>
        </member>
        <member name="T:dEngine.Utility.RawInputDefinitions.RawHID">
            <summary>
            Value type for raw input from a HID.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawHID.Size">
            <summary>Size of the HID data in bytes.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawHID.Count">
            <summary>Number of HID in Data.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawHID.Data">
            <summary>Data for the HID.</summary>
        </member>
        <member name="T:dEngine.Utility.RawInputDefinitions.RawInputHeader">
            <summary>
            Value type for a raw input header.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawInputHeader.Type">
            <summary>Type of device the input is coming from.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawInputHeader.Size">
            <summary>Size of the packet of data.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawInputHeader.Device">
            <summary>Handle to the device sending the data.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawInputHeader.wParam">
            <summary>wParam from the window message.</summary>
        </member>
        <member name="T:dEngine.Utility.RawInputDefinitions.RawMouse">
            <summary>
            Contains information about the state of the mouse.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouse.Flags">
            <summary>
            The mouse state.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouse.ButtonFlags">
            <summary>
            Flags for the event.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouse.ButtonData">
            <summary>
            If the mouse wheel is moved, this will contain the delta amount.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouse.RawButtons">
            <summary>
            Raw button data.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouse.LastX">
            <summary>
            The motion in the X direction. This is signed relative motion or
            absolute motion, depending on the value of usFlags.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouse.LastY">
            <summary>
            The motion in the Y direction. This is signed relative motion or absolute motion,
            depending on the value of usFlags.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouse.ExtraInformation">
            <summary>
            The device-specific additional information for the event.
            </summary>
        </member>
        <member name="T:dEngine.Utility.RawInputDefinitions.RawMouseFlags">
            <summary>
            Enumeration containing the flags for raw mouse data.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouseFlags.MoveRelative">
            <summary>Relative to the last position.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouseFlags.MoveAbsolute">
            <summary>Absolute positioning.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouseFlags.VirtualDesktop">
            <summary>Coordinate data is mapped to a virtual desktop.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouseFlags.AttributesChanged">
            <summary>Attributes for the mouse have changed.</summary>
        </member>
        <member name="T:dEngine.Utility.RawInputDefinitions.RawKeyboard">
            <summary>
            Value type for raw input from a keyboard.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawKeyboard.MakeCode">
            <summary>Scan code for key depression.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawKeyboard.Flags">
            <summary>Scan code information.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawKeyboard.Reserved">
            <summary>Reserved.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawKeyboard.VirtualKey">
            <summary>Virtual key code.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawKeyboard.Message">
            <summary>Corresponding window message.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawKeyboard.ExtraInformation">
            <summary>Extra information.</summary>
        </member>
        <member name="T:dEngine.Utility.RawInputDefinitions.RawInputType">
            <summary>
            Enumeration containing the type device the raw input is coming from.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawInputType.Mouse">
            <summary>
            Mouse input.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawInputType.Keyboard">
            <summary>
            Keyboard input.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawInputType.HID">
            <summary>
            Human interface device input.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawInputType.Other">
            <summary>
            Another device that is not the keyboard or the mouse.
            </summary>
        </member>
        <member name="T:dEngine.Utility.RawInputDefinitions.RawKeyboardFlags">
            <summary>
            Enumeration containing flags for raw keyboard input.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawKeyboardFlags.KeyMake">
            <summary></summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawKeyboardFlags.KeyBreak">
            <summary></summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawKeyboardFlags.KeyE0">
            <summary></summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawKeyboardFlags.KeyE1">
            <summary></summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawKeyboardFlags.TerminalServerSetLED">
            <summary></summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawKeyboardFlags.TerminalServerShadow">
            <summary></summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawKeyboardFlags.TerminalServerVKPACKET">
            <summary></summary>
        </member>
        <member name="T:dEngine.Utility.RawInputDefinitions.RawMouseButtons">
            <summary>
            Enumeration containing the button data for raw mouse input.
            </summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouseButtons.None">
            <summary>No button.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouseButtons.LeftDown">
            <summary>Left (button 1) down.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouseButtons.LeftUp">
            <summary>Left (button 1) up.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouseButtons.RightDown">
            <summary>Right (button 2) down.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouseButtons.RightUp">
            <summary>Right (button 2) up.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouseButtons.MiddleDown">
            <summary>Middle (button 3) down.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouseButtons.MiddleUp">
            <summary>Middle (button 3) up.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouseButtons.Button4Down">
            <summary>Button 4 down.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouseButtons.Button4Up">
            <summary>Button 4 up.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouseButtons.Button5Down">
            <summary>Button 5 down.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouseButtons.Button5Up">
            <summary>Button 5 up.</summary>
        </member>
        <member name="F:dEngine.Utility.RawInputDefinitions.RawMouseButtons.MouseWheel">
            <summary>Mouse wheel moved.</summary>
        </member>
        <member name="T:dEngine.Utility.UnitTestDetector">
            <summary>
            Detects if we are running inside a unit test.
            </summary>
        </member>
        <member name="T:dEngine.FriendStatus">
            <summary>
            Enumeration for friend status.
            </summary>
        </member>
        <member name="T:dEngine.GpuVendor">
            <summary>
            Enum for GPU vendors.
            </summary>
        </member>
        <member name="F:dEngine.GpuVendor.Unknown">
            <summary>
            The GPU vendor is unknown.
            </summary>
        </member>
        <member name="F:dEngine.GpuVendor.Nvidia">
            <summary>
            The GPU was made by NVIDIA.
            </summary>
        </member>
        <member name="F:dEngine.GpuVendor.AMD">
            <summary>
            The GPU was made by AMD.
            </summary>
        </member>
        <member name="F:dEngine.GpuVendor.Intel">
            <summary>
            The GPU was made by Intel.
            </summary>
        </member>
        <member name="T:dEngine.MouseBehaviour">
            <summary>
            Enum for mouse behaviour.
            </summary>
        </member>
        <member name="F:dEngine.MouseBehaviour.Default">
            <summary>
            Cursor can move freely.
            </summary>
        </member>
        <member name="F:dEngine.MouseBehaviour.LockCenter">
            <summary>
            Cursor is locked to the center of the screen.
            </summary>
        </member>
        <member name="F:dEngine.MouseBehaviour.LockCurrentPosition">
            <summary>
            Cursor is locked at its current position.
            </summary>
        </member>
        <member name="T:dEngine.PathStatus">
            <summary>
            Enum for the result of <see cref="M:dEngine.Services.PathfindingService.ComputeRawPathAsync(dEngine.Vector3,dEngine.Vector3,System.Single)" />.
            </summary>
        </member>
        <member name="F:dEngine.PathStatus.Success">
            <summary>
            Path was found successfully.
            </summary>
        </member>
        <member name="F:dEngine.PathStatus.ClosestNoPath">
            <summary>
            Path doesn't exist, returns path to closest point.
            </summary>
        </member>
        <member name="F:dEngine.PathStatus.ClosestOutOfRange">
            <summary>
            Goal is out of MaxDistance range, returns path to closest point within MaxDistance.
            </summary>
        </member>
        <member name="F:dEngine.PathStatus.FailStartNotEmpty">
            <summary>
            Failed to compute path; the starting point is not empty.
            </summary>
        </member>
        <member name="F:dEngine.PathStatus.FailFinishNotEmpty">
            <summary>
            Failed to compute path; the finish point is not empty.
            </summary>
        </member>
        <member name="T:dEngine.PlaneIntersection">
            <summary>
            Describes the result of a plane intersection.
            </summary>
        </member>
        <member name="F:dEngine.PlaneIntersection.Back">
            <summary>
            The object is behind the plane.
            </summary>
        </member>
        <member name="F:dEngine.PlaneIntersection.Front">
            <summary>
            The object is in front of the plane.
            </summary>
        </member>
        <member name="F:dEngine.PlaneIntersection.Intersecting">
            <summary>
            The object is intersecting the plane.
            </summary>
        </member>
        <member name="T:dEngine.Projection">
            <summary>
            Enum for camera projection types.
            </summary>
        </member>
        <member name="T:dEngine.SaveFilter">
            <summary>
            Enum for filtering the save of <see cref="T:dEngine.Instances.DataModel" /> and <see cref="T:dEngine.Services.Workspace" />
            </summary>
        </member>
        <member name="F:dEngine.SaveFilter.SaveWorld">
            <summary>
            Only save the Workspace.
            </summary>
        </member>
        <member name="F:dEngine.SaveFilter.SaveGame">
            <summary>
            Only save the DataModel.
            </summary>
        </member>
        <member name="F:dEngine.SaveFilter.SaveTogether">
            <summary>
            Save DataModel with Workspace to the same stream. (No callbacks invoked.)
            </summary>
        </member>
        <member name="T:dEngine.ScalingMode">
            <summary>
            Enum for image scaling algorithms.
            </summary>
        </member>
        <member name="T:dEngine.ScrollBarVisibility">
            <summary>
            Enumeration for ScrollBar visiblity.
            </summary>
        </member>
        <member name="F:dEngine.ScrollBarVisibility.Auto">
            <summary>
            The scrollbar is only visible when content overflows.
            </summary>
        </member>
        <member name="F:dEngine.ScrollBarVisibility.Disabled">
            <summary>
            Unused.
            </summary>
        </member>
        <member name="F:dEngine.ScrollBarVisibility.Hidden">
            <summary>
            The scroll bar is never visible, and margins are not applied to the content.
            </summary>
        </member>
        <member name="F:dEngine.ScrollBarVisibility.Visible">
            <summary>
            The scrollbar is always visible.
            </summary>
        </member>
        <member name="T:dEngine.SimulationState">
            <summary>
            The session state.
            </summary>
        </member>
        <member name="F:dEngine.SimulationState.Stopped">
            <summary>
            The session is stopped.
            </summary>
        </member>
        <member name="F:dEngine.SimulationState.Running">
            <summary>
            The session is running.
            </summary>
        </member>
        <member name="F:dEngine.SimulationState.Paused">
            <summary>
            The session is paused.
            </summary>
        </member>
        <member name="T:dEngine.SpeakerType">
            <summary>
            Speaker types.
            </summary>
        </member>
        <member name="F:dEngine.TeamBalanceMethod.Random">
            <summary>
            Randomize teams.
            </summary>
        </member>
        <member name="F:dEngine.TeamBalanceMethod.TrueSkill">
            <summary>
            Attempt to fairly balance teams using the TrueSkill algorithm.
            </summary>
        </member>
        <member name="T:dEngine.Universe">
            <summary>
            Enum for SteamID universes.
            </summary>
        </member>
        <member name="T:dEngine.UnreliableSizeBehaviour">
            <summary>
            Enum of behaviours for large, unreliable messages.
            </summary>
        </member>
        <member name="F:dEngine.UnreliableSizeBehaviour.IgnoreMTU">
            <summary>
            Sending an unreliable message will ignore MTU and send everything in a single packet.
            </summary>
        </member>
        <member name="F:dEngine.UnreliableSizeBehaviour.NormalFragmentation">
            <summary>
            Use normal fragmentation for unreliable messages - if a fragment is dropped, memory for received fragments are never
            reclaimed.
            </summary>
        </member>
        <member name="F:dEngine.UnreliableSizeBehaviour.DropAboveMTU">
            <summary>
            Alternate behaviour; just drops unreliable messages above MTU.
            </summary>
        </member>
        <member name="F:dEngine.WindowMode.Fullscreen">
            <summary>
            The game will be in fullscreen mode. This has improved performance over the other modes.
            </summary>
        </member>
        <member name="F:dEngine.WindowMode.Windowed">
            <summary>
            The game will be in a regular, resizeable window.
            </summary>
        </member>
        <member name="F:dEngine.WindowMode.Borderless">
            <summary>
            The game will be in a borderless window and take up the whole screen, but will not enter proper fullscreen mode.
            This may make switching between windows easier, but comes at a performance cost.
            </summary>
        </member>
        <member name="T:dEngine.ColourSequence">
            <summary>
            A sequence of colours.
            </summary>
        </member>
        <member name="M:dEngine.ColourSequence.#ctor(dEngine.Colour)">
            <summary />
        </member>
        <member name="M:dEngine.ColourSequence.#ctor(dEngine.Sequence{dEngine.Colour}.Keypoint[])">
            <summary />
        </member>
        <member name="M:dEngine.ColourSequence.#ctor(System.Collections.Generic.IEnumerable{dEngine.Sequence{dEngine.Colour}.Keypoint})">
            <summary />
        </member>
        <member name="M:dEngine.ColourSequence.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.ColourSequence.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="T:dEngine.NumberRange">
            <summary>
            A range represents a minimum and maximum value.
            </summary>
        </member>
        <member name="F:dEngine.NumberRange.Min">
            <summary>
            The minimum value of the range.
            </summary>
        </member>
        <member name="F:dEngine.NumberRange.Max">
            <summary>
            The maximum value of the range.
            </summary>
        </member>
        <member name="M:dEngine.NumberRange.#ctor(System.Single)">
            <summary>
            Creates a new range with min and max both set to the given value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:dEngine.NumberRange.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new range with min and max both set to the given value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:dEngine.NumberRange.op_Equality(dEngine.NumberRange,dEngine.NumberRange)">
            <summary>
            Determines if the min and max are equal for two <see cref="T:dEngine.NumberRange" />s.
            </summary>
        </member>
        <member name="M:dEngine.NumberRange.op_Inequality(dEngine.NumberRange,dEngine.NumberRange)">
            <summary>
            Determines if the min and max are not equal for two <see cref="T:dEngine.NumberRange" />s.
            </summary>
        </member>
        <member name="M:dEngine.NumberRange.Equals(dEngine.NumberRange)">
            <summary />
        </member>
        <member name="M:dEngine.NumberRange.Equals(System.Object)">
            <summary />
        </member>
        <member name="M:dEngine.NumberRange.GetHashCode">
            <summary />
        </member>
        <member name="M:dEngine.NumberRange.ToString">
            <summary />
        </member>
        <member name="M:dEngine.NumberRange.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.NumberRange.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="T:dEngine.NumberSequence">
            <summary>
            A sequence of numbers.
            </summary>
        </member>
        <member name="M:dEngine.NumberSequence.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.NumberSequence.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="T:dEngine.Plane">
            <summary>
            A type representing a position and orientation in 3D space.
            </summary>
        </member>
        <member name="F:dEngine.Plane.normal">
            <summary>
            The normal vector of the plane.
            </summary>
        </member>
        <member name="F:dEngine.Plane.d">
            <summary>
            The distance of the plane long its normal from the origin.
            </summary>
        </member>
        <member name="M:dEngine.Plane.#ctor(System.Single)">
            <summary>
            Creates a plane from the given value.
            </summary>
            <param name="value">The X, Y, Z and distance components value.</param>
        </member>
        <member name="M:dEngine.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a plane from the given normal and distance components.
            </summary>
            <param name="a">The X component of the normal.</param>
            <param name="b">The Y component of the normal.</param>
            <param name="c">The Z component of the normal.</param>
            <param name="d">The distance.</param>
        </member>
        <member name="M:dEngine.Plane.#ctor(dEngine.Vector3,dEngine.Vector3)">
            <summary>
            Creates a plane.
            </summary>
            <param name="point">Any point that lies along the plane.</param>
            <param name="normal">The normal vector.</param>
        </member>
        <member name="M:dEngine.Plane.#ctor(dEngine.Vector3,System.Single)">
            <summary>
            Creates a plane.
            </summary>
            <param name="normal">The normal vector.</param>
            <param name="d">The distance.</param>
        </member>
        <member name="M:dEngine.Plane.#ctor(dEngine.Vector3,dEngine.Vector3,dEngine.Vector3)">
            <summary>
            Creates a plane.
            </summary>
            <param name="point1">First point of a triangle defining the plane.</param>
            <param name="point2">Second point of a triangle defining the plane.</param>
            <param name="point3">Third point of a triangle defining the plane.</param>
        </member>
        <member name="M:dEngine.Plane.#ctor(System.Single[])">
            <summary>
            Creates a plane.
            </summary>
            <param name="values">The values to assign to the A, B, C, and D components of the plane.</param>
        </member>
        <member name="M:dEngine.Plane.new(System.Single)">
            //////////////////////////////////////////////////
            <summary>
            Creates a plane from the given value.
            </summary>
            <param name="value">The X, Y, Z and distance components value.</param>
        </member>
        <member name="M:dEngine.Plane.new(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a plane from the given normal and distance components.
            </summary>
            <param name="a">The X component of the normal.</param>
            <param name="b">The Y component of the normal.</param>
            <param name="c">The Z component of the normal.</param>
            <param name="d">The distance.</param>
        </member>
        <member name="M:dEngine.Plane.new(dEngine.Vector3,dEngine.Vector3)">
            <summary>
            Creates a plane.
            </summary>
            <param name="point">Any point that lies along the plane.</param>
            <param name="normal">The normal vector.</param>
        </member>
        <member name="M:dEngine.Plane.new(dEngine.Vector3,System.Single)">
            <summary>
            Creates a plane.
            </summary>
            <param name="normal">The normal vector.</param>
            <param name="d">The distance.</param>
        </member>
        <member name="M:dEngine.Plane.new(dEngine.Vector3,dEngine.Vector3,dEngine.Vector3)">
            <summary>
            Creates a plane.
            </summary>
            <param name="point1">First point of a triangle defining the plane.</param>
            <param name="point2">Second point of a triangle defining the plane.</param>
            <param name="point3">Third point of a triangle defining the plane.</param>
        </member>
        <member name="M:dEngine.Plane.Intersects(dEngine.Vector3)">
            <summary>
            Determines whether the point intersects the plane.
            </summary>
        </member>
        <member name="M:dEngine.Plane.Intersects(dEngine.Ray)">
            <summary>
            Determines whether the ray intersects the plane.
            </summary>
            <returns>
            If intersected, the distance to the intersection, otherwise 0.
            </returns>
        </member>
        <member name="M:dEngine.Plane.Intersects(dEngine.Plane)">
            <summary>
            Determines if this plane intersects another plane.
            </summary>
        </member>
        <member name="M:dEngine.Plane.Intersects(dEngine.Region3)">
            <summary>
            Determines if the plane intersects the region.
            </summary>
        </member>
        <member name="M:dEngine.Plane.Equals(dEngine.Plane)">
            <summary>
            Determines if two planes are equal.
            </summary>
        </member>
        <member name="M:dEngine.Plane.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Plane.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Plane.op_Equality(dEngine.Plane,dEngine.Plane)">
            <summary>
            Returns true if two Planes are equal.
            </summary>
        </member>
        <member name="M:dEngine.Plane.op_Inequality(dEngine.Plane,dEngine.Plane)">
            <summary>
            Returns false if two Planes are equal.
            </summary>
        </member>
        <member name="M:dEngine.Plane.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.Plane.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="T:dEngine.Sequence`1">
            <summary>
            Base class for sequences.
            </summary>
        </member>
        <member name="M:dEngine.Sequence`1.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:dEngine.Sequence`1.#ctor(`0)">
            <summary>
            Creates a sequence using two keypoints of the same value.
            </summary>
        </member>
        <member name="M:dEngine.Sequence`1.#ctor(dEngine.Sequence{`0}.Keypoint[])">
            <summary>
            Creates a sequence from an array of keypoints.
            </summary>
        </member>
        <member name="M:dEngine.Sequence`1.#ctor(System.Collections.Generic.IEnumerable{dEngine.Sequence{`0}.Keypoint})">
            <summary>
            Creates a sequence from a table of keypoints.
            </summary>
        </member>
        <member name="P:dEngine.Sequence`1.Keypoints">
            <summary>
            The sequence values.
            </summary>
        </member>
        <member name="M:dEngine.Sequence`1.NewKeypoint(System.Single,`0)">
            <summary>
            Creates a new keypoint.
            </summary>
        </member>
        <member name="M:dEngine.Sequence`1.ToString">
            <summary />
        </member>
        <member name="T:dEngine.Sequence`1.Keypoint">
            <summary>
            A keypoint for a sequence.
            </summary>
        </member>
        <member name="F:dEngine.Sequence`1.Keypoint.Time">
            <summary>
            The time in the sequence that the keypoint will be positioned at.
            </summary>
        </member>
        <member name="F:dEngine.Sequence`1.Keypoint.Value">
            <summary>
            The value of the keypoint/
            </summary>
        </member>
        <member name="M:dEngine.Sequence`1.Keypoint.#ctor(System.Single,`0)">
            <summary>
            Creates a sequence keypoint.
            </summary>
        </member>
        <member name="M:dEngine.Sequence`1.Keypoint.ToString">
            <summary>
            Returns a string representation of the keypoint.
            </summary>
        </member>
        <member name="T:dEngine.PhysicsSimulation">
            <summary>
            An object for managing a physics simulation.
            </summary>
        </member>
        <member name="F:dEngine.PhysicsSimulation.Scale">
            <summary>
            The scale of the physics engine.
            </summary>
        </member>
        <member name="M:dEngine.PhysicsSimulation.#ctor">
            <summary>
            Constructs a new PhysicsSimulation. Must be created on the physics thread.
            </summary>
        </member>
        <member name="P:dEngine.PhysicsSimulation.Gravity">
            <summary>
            The gravity force.
            </summary>
        </member>
        <member name="M:dEngine.PhysicsSimulation.UpdateDebugDrawModes">
            <summary />
        </member>
        <member name="M:dEngine.PhysicsSimulation.Step(System.Single)">
            <summary>
            Steps the simulation.
            </summary>
        </member>
        <member name="M:dEngine.PhysicsSimulation.AddPart(dEngine.Instances.Part)">
            <summary>
            Adds a <see cref="T:dEngine.Instances.Part" /> to the simulation.
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:dEngine.PhysicsSimulation.RemovePart(dEngine.Instances.Part)">
            <summary>
            Removes a <see cref="T:dEngine.Instances.Part" /> from the simulation.
            </summary>
            <param name="part"></param>
        </member>
        <member name="M:dEngine.PhysicsSimulation.AddConstraint(dEngine.Instances.Constraint)">
            <summary>
            Adds a constraint to the world.
            </summary>
        </member>
        <member name="M:dEngine.PhysicsSimulation.RemoveConstraint(dEngine.Instances.Constraint)">
            <summary>
            Removes a constraint from the world.
            </summary>
        </member>
        <member name="M:dEngine.PhysicsSimulation.FindPartOnRay(dEngine.Ray,System.Single)">
            <summary>
            Performs an un-filtered raycast.
            </summary>
            <param name="ray">The ray to perform the cast on.</param>
            <param name="maxLength">The maximum length of the ray.</param>
            <returns></returns>
        </member>
        <member name="M:dEngine.PhysicsSimulation.FindPartOnRay(dEngine.Ray,System.Collections.Generic.HashSet{dEngine.Instances.Instance},System.Single)">
            <summary>
            Performs a filtered raycast.
            </summary>
            <param name="ray">The ray to perform the cast on.</param>
            <param name="filterSet">A list of items to be ignored.</param>
            <param name="maxLength">The maximum length of the ray.</param>
            <returns></returns>
        </member>
        <member name="M:dEngine.PhysicsSimulation.FindPartOnRay(dEngine.Ray,System.Func{dEngine.Instances.Part,System.Boolean},System.Single)">
            <summary>
            Performs an un-filtered raycast.
            </summary>
            <param name="ray">The ray to perform the cast on.</param>
            <param name="filterFunc">A predicate that determines whether an object is ignored.</param>
            <param name="maxLength">The maximum length of the ray.</param>
            <returns></returns>
        </member>
        <member name="T:dEngine.PhysicsSimulation.RayCastResult">
            <summary>
            Contains information about a raycast.
            </summary>
        </member>
        <member name="F:dEngine.PhysicsSimulation.RayCastResult.HitObject">
            <summary>
            The hit part.
            </summary>
        </member>
        <member name="F:dEngine.PhysicsSimulation.RayCastResult.Normal">
            <summary>
            The hit normal.
            </summary>
        </member>
        <member name="F:dEngine.PhysicsSimulation.RayCastResult.Position">
            <summary>
            The hit position.
            </summary>
        </member>
        <member name="T:dEngine.CascadePartitionMode">
            <summary>
            The cascade partitioning method.
            </summary>
        </member>
        <member name="F:dEngine.CascadePartitionMode.Manual">
            <summary>
            Use manually defined splits.
            </summary>
        </member>
        <member name="F:dEngine.CascadePartitionMode.Logarithmic">
            <summary>
            Use a logarithmic algorithm to determine splits.
            </summary>
        </member>
        <member name="F:dEngine.CascadePartitionMode.ParallelSplit">
            <summary>
            Use the PSSM algorithm to determine splits.
            </summary>
        </member>
        <member name="T:dEngine.CellMaterial">
            <summary>
            The material for a <see cref="T:dEngine.Instances.Terrain" /> cell.
            </summary>
        </member>
        <member name="T:dEngine.DeliveryMethod">
            <summary>
            Networking delivery methods.
            </summary>
        </member>
        <member name="F:dEngine.DeliveryMethod.Unknown">
            <summary></summary>
        </member>
        <member name="F:dEngine.DeliveryMethod.Unreliable">
            <summary>
            No guarantees, except for preventing duplicates.
            </summary>
        </member>
        <member name="F:dEngine.DeliveryMethod.UnreliableSequenced">
            <summary>
            Late messages will be dropped if newer ones were already received.
            </summary>
        </member>
        <member name="F:dEngine.DeliveryMethod.ReliableUnordered">
            <summary>
            All messages will arrive, but not necessarily in the same order.
            </summary>
        </member>
        <member name="F:dEngine.DeliveryMethod.ReliableSequenced">
            <summary>
            All messages will arrive, but late ones will be dropped.
            </summary>
        </member>
        <member name="F:dEngine.DeliveryMethod.ReliableOrdered">
            <summary>
            All messages will arrive, and they will do so in the same order.
            </summary>
        </member>
        <member name="T:dEngine.DoFMethod">
            <summary>
            Depth of Field methods.
            </summary>
        </member>
        <member name="F:dEngine.DoFMethod.Gaussian">
            <summary>
            Gaussian DoF blurs the scene using a standard Guassian blur.
            </summary>
        </member>
        <member name="F:dEngine.DoFMethod.Bokeh">
            <summary>
            Bokeh is the name of the shape that can be seen in photos or movies when objects are out of focus.
            </summary>
        </member>
        <member name="T:dEngine.FlowDirection">
            <summary>
            The direction to flow content.
            </summary>
        </member>
        <member name="F:dEngine.FlowDirection.Horizontal">
            <summary>
            Flows horizontally.
            </summary>
        </member>
        <member name="F:dEngine.FlowDirection.Vertical">
            <summary>
            Flows vertically.
            </summary>
        </member>
        <member name="T:dEngine.FontWeight">
            <summary>
            Enum for font weights.
            </summary>
        </member>
        <member name="T:dEngine.HandlesStyle">
            <summary>
            Style for <see cref="T:dEngine.Instances.BaseHandles" />
            </summary>
        </member>
        <member name="F:dEngine.HandlesStyle.Movement">
            <summary>
            Displays arrows for each axis.
            </summary>
        </member>
        <member name="F:dEngine.HandlesStyle.Resize">
            <summary>
            Displayes spheres for each axis.
            </summary>
        </member>
        <member name="T:dEngine.InputDeviceType">
            <summary>
            The type of the input device.
            </summary>
        </member>
        <member name="T:dEngine.SimulationType">
            <summary>
            Types of simulation.
            </summary>
        </member>
        <member name="F:dEngine.SimulationType.Play">
            <summary>
            The game is being simulated as a player.
            </summary>
        </member>
        <member name="F:dEngine.SimulationType.Run">
            <summary>
            The game is being simulated as a server.
            </summary>
        </member>
        <member name="T:dEngine.ExtendMode">
            <summary>
            Enum for bitmap extend modes.
            </summary>
        </member>
        <member name="F:dEngine.ExtendMode.Clamp">
            <summary>
            Clamps to the border of the image.
            </summary>
        </member>
        <member name="F:dEngine.ExtendMode.Wrap">
            <summary>
            Wraps the image.
            </summary>
        </member>
        <member name="F:dEngine.ExtendMode.Mirror">
            <summary>
            Mirrors the image.
            </summary>
        </member>
        <member name="F:dEngine.ExtendMode.Stretch">
            <summary>
            Stretches the image.
            </summary>
        </member>
        <member name="T:dEngine.InputState">
            <summary>
            Enum for input states.
            </summary>
        </member>
        <member name="T:dEngine.InputType">
            <summary>
            Enum for input types.
            </summary>
        </member>
        <member name="T:dEngine.MessageChannel">
            <summary>
            Enum for message networking channels.
            </summary>
        </member>
        <member name="F:dEngine.MessageChannel.Standard">
            <summary>
            The standard channel.
            </summary>
        </member>
        <member name="F:dEngine.MessageChannel.Replication">
            <summary>
            Channel for replication messages.
            </summary>
        </member>
        <member name="F:dEngine.MessageChannel.Remote">
            <summary>
            Channel for <see cref="T:dEngine.Instances.RemoteFunction" /> and <see cref="T:dEngine.Instances.RemoteEvent" />.
            </summary>
        </member>
        <member name="T:dEngine.CustomMessageType">
            <summary>
            Enum for custom network messages.
            </summary>
        </member>
        <member name="F:dEngine.CustomMessageType.ReplicateObject">
            <summary>
            A request to replicate an object
            </summary>
        </member>
        <member name="F:dEngine.CustomMessageType.ReplicateProperty">
            <summary>
            A request to replicate a property
            </summary>
        </member>
        <member name="F:dEngine.CustomMessageType.RequestObject">
            <summary></summary>
        </member>
        <member name="F:dEngine.CustomMessageType.RemoteEventFire">
            <summary>
            A request to fire a <see cref="T:dEngine.Instances.RemoteEvent" />.
            </summary>
        </member>
        <member name="F:dEngine.CustomMessageType.RemoteFunctionInvoke">
            <summary>
            A request to invoke a <see cref="T:dEngine.Instances.RemoteFunction" />.
            </summary>
        </member>
        <member name="F:dEngine.CustomMessageType.RemoteFunctionReturn">
            <summary>
            A response to a <see cref="F:dEngine.CustomMessageType.RemoteFunctionInvoke" />.
            </summary>
        </member>
        <member name="T:dEngine.InputMethod">
            <summary>
            Enum for mouse input methods.
            </summary>
        </member>
        <member name="F:dEngine.InputMethod.Windows">
            <summary>
            Uses WinForms events. (Win32 API)
            </summary>
        </member>
        <member name="F:dEngine.InputMethod.DirectInput">
            <summary>
            Uses the DirectInput API.
            </summary>
        </member>
        <member name="F:dEngine.InputMethod.RawInput">
            <summary>
            Uses the RawInput API.
            </summary>
        </member>
        <member name="T:dEngine.PeerType">
            <summary>
            Enum for peer types.
            </summary>
        </member>
        <member name="T:dEngine.Enums.MouseButton">
            <summary>
            Enum for mouse buttons.
            </summary>
        </member>
        <member name="T:dEngine.PlatformId">
            <summary>
            Enum for platforms.
            </summary>
        </member>
        <member name="T:dEngine.PlatformType">
            <summary>
            Enum for platform types.
            </summary>
        </member>
        <member name="T:dEngine.ReplicationUpdateType">
            <summary>
            Enum for replication updates.
            </summary>
        </member>
        <member name="T:dEngine.AlignmentY">
            <summary>
            Enum for vertical text alignment.
            </summary>
        </member>
        <member name="T:dEngine.AlignmentX">
            <summary>
            Enum for horizontal text alignment.
            </summary>
        </member>
        <member name="T:dEngine.WordWrapping">
            <summary>
            Word wrapping modes.
            </summary>
        </member>
        <member name="F:dEngine.WordWrapping.Wrap">
            <summary>
            Indicates that words are broken across lines to avoid text overflowing the layout box.
            </summary>
        </member>
        <member name="F:dEngine.WordWrapping.NoWrap">
            <summary>
            Indicates that words are kept within the same line even when it overflows the layout box. This option is often used
            with scrolling to reveal overflow text.
            </summary>
        </member>
        <member name="F:dEngine.WordWrapping.EmergencyBreak">
            <summary>
            Words are broken across lines to avoid text overflowing the layout box. Emergency wrapping occurs if the word is larger
            than the maximum width.
            </summary>
        </member>
        <member name="F:dEngine.WordWrapping.WholeWord">
            <summary>
            When emergency wrapping, only wrap whole words, never breaking words when the layout width is too small for even a
            single word.
            </summary>
        </member>
        <member name="F:dEngine.WordWrapping.Character">
            <summary>
            Wrap between any valid character clusters.
            </summary>
        </member>
        <member name="T:dEngine.CollisionFidelity">
            <summary>
            Determines how the collision models of a <see cref="!:CSGOperation" /> behave.
            </summary>
        </member>
        <member name="F:dEngine.CollisionFidelity.ConvexHull">
            <summary>
            Uses a convex hull for collision.
            </summary>
        </member>
        <member name="F:dEngine.CollisionFidelity.BoundingBox">
            <summary>
            Uses a bounding box for collision.
            </summary>
        </member>
        <member name="T:dEngine.Axis">
            <summary>
            Enum for the X, Y and Z axes.
            </summary>
        </member>
        <member name="F:dEngine.Axis.X">
            <summary>The X axis.</summary>
        </member>
        <member name="F:dEngine.Axis.Y">
            <summary>The Y axis.</summary>
        </member>
        <member name="F:dEngine.Axis.Z">
            <summary>The Z axis.</summary>
        </member>
        <member name="T:dEngine.InputObject">
            <summary>
            An object which describes an input action.
            </summary>
        </member>
        <member name="M:dEngine.InputObject.#ctor">
            <summary />
        </member>
        <member name="P:dEngine.InputObject.Handled">
            <summary>
            Determines if this input has been handled.
            </summary>
        </member>
        <member name="P:dEngine.InputObject.Key">
            <summary>
            The pressed key.
            </summary>
        </member>
        <member name="P:dEngine.InputObject.InputState">
            <summary>
            The state of the input.
            </summary>
        </member>
        <member name="P:dEngine.InputObject.InputType">
            <summary>
            The type of input.
            </summary>
        </member>
        <member name="P:dEngine.InputObject.Position">
            <summary>
            Describes the positional value.
            </summary>
        </member>
        <member name="P:dEngine.InputObject.Delta">
            <summary>
            Describes the delta for mouse/stick movements.
            </summary>
        </member>
        <member name="M:dEngine.InputObject.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.InputObject.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="T:dEngine.NormalId">
            <summary>
            An enum representing a normal direction.
            </summary>
        </member>
        <member name="T:dEngine.Engine">
            <summary>
            The main engine class.
            </summary>
        </member>
        <member name="P:dEngine.Engine.Commit">
            <summary>
            The short ID of the current commit.
            </summary>
        </member>
        <member name="P:dEngine.Engine.BuildType">
            <summary>
            The build type or branch, of the current commit.
            </summary>
        </member>
        <member name="P:dEngine.Engine.Version">
            <summary>
            The version of the engine.
            </summary>
        </member>
        <member name="P:dEngine.Engine.VersionWithMeta">
            <summary>
            The version of the engine with metadata.
            </summary>
        </member>
        <member name="P:dEngine.Engine.IsExiting">
            <summary>
            If true, the application is currently closing.
            </summary>
        </member>
        <member name="P:dEngine.Engine.PlatformId">
            <summary>
            The platform the process is running on.
            </summary>
        </member>
        <member name="P:dEngine.Engine.PlatformType">
            <summary>
            The type of platform the process is running on.
            </summary>
        </member>
        <member name="P:dEngine.Engine.Process">
            <summary>
            The current process.
            </summary>
        </member>
        <member name="P:dEngine.Engine.IsViewportFocused">
            <summary>
            Gets/sets whether or not the render control is focused.
            </summary>
        </member>
        <member name="P:dEngine.Engine.IsViewportActive">
            <summary>
            Gets/sets whether or not the render control is active.
            </summary>
        </member>
        <member name="P:dEngine.Engine.Control">
            <summary>
            The control of the <see cref="P:dEngine.Engine.Handle" />.
            </summary>
        </member>
        <member name="P:dEngine.Engine.TempPath">
            <summary>
            Gets the path to a temporary directory, which is deleted on engine shutdown.
            </summary>
        </member>
        <member name="P:dEngine.Engine.UserSettings">
            <summary>
            The user settings container.
            </summary>
        </member>
        <member name="P:dEngine.Engine.Settings">
            <summary>
            The global settings container.
            </summary>
        </member>
        <member name="P:dEngine.Engine.Mode">
            <summary>
            The mode to run the engine }
            </summary>
        </member>
        <member name="P:dEngine.Engine.AppId">
            <summary>
            The Steam App ID.
            </summary>
        </member>
        <member name="P:dEngine.Engine.SavePlace">
            <summary>
            A callback which is invoked when the place is saved.
            </summary>
        </member>
        <member name="P:dEngine.Engine.SaveGame">
            <summary>
            A callback which is invoked when the game is saved.
            </summary>
        </member>
        <member name="E:dEngine.Engine.OnShutdown">
            <summary>
            Fired after the <see cref="M:dEngine.Engine.Shutdown(System.Int32)"/> method has completed.
            </summary>
        </member>
        <member name="E:dEngine.Engine.Exiting">
            <summary>
            Fired when the application is closing.
            </summary>
        </member>
        <member name="M:dEngine.Engine.Start(dEngine.EngineMode)">
            <summary>
            Fires up the engine. And then it makes noise.
            </summary>
        </member>
        <member name="M:dEngine.Engine.Shutdown(System.Int32)">
            <summary>
            Shuts down the engine, cleaning up resources.
            </summary>
        </member>
        <member name="M:dEngine.Engine.SetHandle(System.IntPtr)">
            <summary>
            Sets the handle for rendering and input.
            </summary>
        </member>
        <member name="E:dEngine.Engine.HandleSet">
            <summary>
            Fired when <see cref="M:dEngine.Engine.SetHandle(System.IntPtr)" /> is called.
            </summary>
        </member>
        <member name="T:dEngine.GraphicsMode">
            <summary>
            Enumeration for graphics modes.
            </summary>
        </member>
        <member name="F:dEngine.GraphicsMode.Direct3D11">
            <summary>
            DirectX11.
            </summary>
        </member>
        <member name="F:dEngine.GraphicsMode.NoGraphics">
            <summary>
            No graphics.
            </summary>
        </member>
        <member name="T:dEngine.Game">
            <summary>
            Manager class for the scene.
            </summary>
        </member>
        <member name="F:dEngine.Game.IsInitialized">
            <summary>
            If true, <see cref="M:dEngine.Game.Init" /> has finished.
            </summary>
        </member>
        <member name="E:dEngine.Game.Initialized">
            <summary>
            Fired when Init() finishes.
            </summary>
        </member>
        <member name="E:dEngine.Game.InstanceAdded">
            <summary>
            Fired when fired when an instance is created.
            </summary>
        </member>
        <member name="E:dEngine.Game.InstanceRemoved">
            <summary>
            Fired when fired when an instance is destroyed.
            </summary>
        </member>
        <member name="M:dEngine.Game.CreateInstance(System.Type,dEngine.Instances.Instance)">
            <summary>
            Creates a new instance of the given type.
            </summary>
            <param name="type">A type inherriting from Instance</param>
            <param name="parent">The object to parent the new instance to.</param>
        </member>
        <member name="T:dEngine.Axes">
            <summary>
            A struct of booleans for 3 axes.
            </summary>
        </member>
        <member name="T:dEngine.CFrame">
            <summary>
            A type representing a position and orientation in 3D space.
            </summary>
        </member>
        <member name="F:dEngine.CFrame.p">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:dEngine.CFrame._rotation">
            <summary>
            The orientation.
            </summary>
        </member>
        <member name="F:dEngine.CFrame.Identity">
            <summary>
            A CFrame with an identity matrix.
            </summary>
        </member>
        <member name="F:dEngine.CFrame.Zero">
            <summary>
            A CFrame with a zeroed matrix.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a CFrame from position (x, y and z).
            </summary>
        </member>
        <member name="M:dEngine.CFrame.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a CFrame from a quaternion.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.#ctor(dEngine.Vector3)">
            <summary>
            Creates a CFrame from position.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.#ctor(dEngine.Vector3,dEngine.Vector3)">
            <summary>
            Creates a CFrame from position, looking at point.
            </summary>
            <remarks>
            Lua syntax for this method is broken:
            https://github.com/neolithos/neolua/issues/40
            </remarks>
        </member>
        <member name="M:dEngine.CFrame.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a CFrame from matrix components.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.#ctor(dEngine.Vector3,dEngine.Vector4)">
            <summary>
            Creates a CFrame from position with quaternion orientation.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.new(System.Single,System.Single,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.CFrame.new(dEngine.Vector3)">
            <summary>
            Creates a CFrame from position.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.new(dEngine.Vector3,dEngine.Vector3)">
            <summary>
            Creates a CFrame from position, look-at point.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.new(dEngine.Vector3,dEngine.Vector4)">
            <summary>
            Creates a CFrame from a vector position and quaternion orientation.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.new(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a CFrame from x, y, z position and x,y,z,w quaternion rotation.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.new(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a CFrame from x, y, z position and 3x3 matrix components.
            </summary>
        </member>
        <member name="P:dEngine.CFrame.isIdentity">
            <summary>
            Determines if the CFrame is an identity matrix.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.FromAxisAngle(dEngine.Vector3,System.Single)">
            <summary>
            Creates a CFrame from a unit vector rotated in radians.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.Angles(System.Single,System.Single,System.Single)">
            <summary>
            Creates a CFrame from euler angles in radians.
            </summary>
        </member>
        <member name="P:dEngine.CFrame.lookVector">
            <summary>
            The forward unit vector.
            </summary>
        </member>
        <member name="P:dEngine.CFrame.forward">
            <summary>
            The forward unit vector. (the same as lookVector)
            </summary>
        </member>
        <member name="P:dEngine.CFrame.backward">
            <summary>
            The backward unit vector.
            </summary>
        </member>
        <member name="P:dEngine.CFrame.left">
            <summary>
            The left unit vector.
            </summary>
        </member>
        <member name="P:dEngine.CFrame.right">
            <summary>
            The right unit vector.
            </summary>
        </member>
        <member name="P:dEngine.CFrame.down">
            <summary>
            The downward unit vector.
            </summary>
        </member>
        <member name="P:dEngine.CFrame.up">
            <summary>
            The upward unit vector.
            </summary>
        </member>
        <member name="P:dEngine.CFrame.X">
            <summary>The X component.</summary>
        </member>
        <member name="P:dEngine.CFrame.Y">
            <summary> The Y component.</summary>
        </member>
        <member name="P:dEngine.CFrame.Z">
            <summary>The Z component.</summary>
        </member>
        <member name="P:dEngine.CFrame.x">
            <summary>The X component.</summary>
        </member>
        <member name="P:dEngine.CFrame.y">
            <summary> The Y component.</summary>
        </member>
        <member name="P:dEngine.CFrame.z">
            <summary>The Z component.</summary>
        </member>
        <member name="M:dEngine.CFrame.validate">
            <summary>
            Returns false if the CFrame contain NaN/Infinite values.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.inverse">
            <summary>
            Returns the inverse CFrame.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.lerp(dEngine.CFrame,System.Single)">
            <summary>
            Returns a CFrame linearly interpolated towards end by amount.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.toWorldSpace(dEngine.CFrame)">
            <summary>
            Returns a <see cref="T:dEngine.CFrame" /> transformed from Object to World coordinates. Equivalent to `CFrame * cf`.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.toObjectSpace(dEngine.CFrame)">
            <summary>
            Returns a <see cref="T:dEngine.CFrame" /> transformed from World to Object coordinates. Equivalent to `CFrame:inverse() * cf`.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.pointToWorldSpace(dEngine.Vector3)">
            <summary>
            Returns a <see cref="T:dEngine.Vector3" /> transformed from Object to World coordinates. Equivalent to `CFrame * v3`
            </summary>
        </member>
        <member name="M:dEngine.CFrame.pointToObjectSpace(dEngine.Vector3)">
            <summary>
            Returns a <see cref="T:dEngine.Vector3" />  transformed from World to Object coordinates. Equivalent to `CFrame:inverse() * v3`
            </summary>
        </member>
        <member name="M:dEngine.CFrame.vectorToWorldSpace(dEngine.Vector3)">
            <summary>
            Returns a <see cref="T:dEngine.Vector3" /> rotated from Object to World coordinates. Equivalent to `(CFrame - CFrame.p) * v3`
            </summary>
        </member>
        <member name="M:dEngine.CFrame.vectorToObjectSpace(dEngine.Vector3)">
            <summary>
            Returns a <see cref="T:dEngine.Vector3" />  rotated from World to Object coordinates.Equivalent to `(CFrame - CFrame.p):inverse()
            * v3`
            </summary>
        </member>
        <member name="M:dEngine.CFrame.toWorldSpace(dEngine.Ray)">
            <summary>
            Returns a <see cref="T:dEngine.Ray" /> rotated from Object to World coordinates.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.toObjectSpace(dEngine.Ray)">
            <summary>
            Returns a <see cref="T:dEngine.Ray" /> rotated from World to Object coordinates.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.components">
            <summary>
            Returns a tuple of the matrix components that make up the CFrame.
            </summary>
            <returns> x, y, z, R11, R12, R13, R21, R22, R23, R31, R32, R33</returns>
        </member>
        <member name="M:dEngine.CFrame.GetComponents">
            <summary>
            Returns the matrix components as an array.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.GetRotationComponents">
            <summary>
            Returns the rotation matrix components as an array.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.getEulerAngles">
            <summary>
            Returns best-guess euler angles.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.ToString">
            <summary>
            Returns a comma-delimited string of the array components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.CFrame.Equals(dEngine.CFrame)">
            <summary>
            Determines if two CFrames are equal.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.CFrame.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:dEngine.CFrame.op_UnaryNegation(dEngine.CFrame)">
            <summary>
            Returns an inverse CFrame.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.op_Equality(dEngine.CFrame,dEngine.CFrame)">
            <summary>
            Returns true if two CFrame are equal.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.op_Inequality(dEngine.CFrame,dEngine.CFrame)">
            <summary>
            Returns true if two CFrame are not equal.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.op_Explicit(dEngine.CFrame)~SharpDX.Matrix">
            <summary>
            Converts CFrame to a SharpDX Matrix4x4.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.op_Explicit(SharpDX.Matrix)~dEngine.CFrame">
            <summary>
            Converts SharpDX Matrix4x4 to a CFrame.
            </summary>
            <param name="mat"></param>
        </member>
        <member name="M:dEngine.CFrame.op_Explicit(dEngine.CFrame)~BulletSharp.Math.Matrix">
            <summary>
            Converts CFrame to a BulletSharp Matrix4x4.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.op_Explicit(BulletSharp.Math.Matrix)~dEngine.CFrame">
            <summary>
            Converts BulletSharp Matrix4x4 to a CFrame.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.op_Multiply(dEngine.CFrame,System.Single)">
            <summary>
            Scales the CFrame.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.op_Multiply(dEngine.CFrame,dEngine.CFrame)">
            <summary>
            Multiplies two CFrames.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.op_Addition(dEngine.CFrame,dEngine.Vector3)">
            <summary>
            Adds Vector3 to CFrame Position.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.op_Subtraction(dEngine.CFrame,dEngine.Vector3)">
            <summary>
            Subtracts Vector3 to CFrame Position.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.op_Multiply(dEngine.CFrame,dEngine.Vector3)">
            <summary>
            Transforms a Vector3 from Object to World coordinates.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.getQuaternion">
            <summary>
            Gets the rotation of the CFrame as a quaternion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.CFrame.GetMatrix">
            <summary>
            Returns a model matrix for ray testing..
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.CFrame.GetModelMatrix">
            <summary>
            Returns a render model matrix for Direct3D.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.CFrame.GetViewMatrix(SharpDX.Matrix@)">
            <summary>
            Returns a render view matrix for Direct3D.
            </summary>
        </member>
        <member name="M:dEngine.CFrame.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.CFrame.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="T:dEngine.Colour">
            <summary>
            A type representing a colour.
            </summary>
        </member>
        <member name="F:dEngine.Colour.r">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:dEngine.Colour.g">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:dEngine.Colour.b">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:dEngine.Colour.a">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="P:dEngine.Colour.hue">
            <summary>Gets the computed hue.</summary>
        </member>
        <member name="P:dEngine.Colour.R">
            <summary>The red component.</summary>
        </member>
        <member name="P:dEngine.Colour.G">
            <summary>The green component.</summary>
        </member>
        <member name="P:dEngine.Colour.B">
            <summary>The blue component.</summary>
        </member>
        <member name="P:dEngine.Colour.A">
            <summary>The alpha component.</summary>
        </member>
        <member name="M:dEngine.Colour.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a colour from red, green, blue and alpha (opacity) components in the range of 0-1.
            </summary>
        </member>
        <member name="M:dEngine.Colour.new(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a colour from red, green, blue and alpha (opacity) components in the range of 0-1.
            </summary>
        </member>
        <member name="M:dEngine.Colour.fromRGB(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a colour from rgb (0-255) components.
            </summary>
        </member>
        <member name="M:dEngine.Colour.fromRGBA(System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Creates a colour from rgb (0-255) and alpha (0-1) components.
            </summary>
        </member>
        <member name="M:dEngine.Colour.fromHSLA(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a colour from HSL components in the range of 0-1.
            </summary>
            <param name="h">Hue</param>
            <param name="s">Saturation</param>
            <param name="l">Luminance</param>
            <param name="a">Alpha</param>
        </member>
        <member name="M:dEngine.Colour.fromHSL(System.Single,System.Single,System.Single)">
            <summary>
            Creates a colour from HSL components in the range of 0-1.
            </summary>
            <param name="h">Hue</param>
            <param name="s">Saturation</param>
            <param name="l">Luminance</param>
        </member>
        <member name="M:dEngine.Colour.fromHSV(System.Single,System.Single,System.Single)">
            <summary>
            Creates a colour from HSV components in the range of 0-1.
            </summary>
            <param name="h">Hue</param>
            <param name="s">Saturation</param>
            <param name="v">Value</param>
        </member>
        <member name="M:dEngine.Colour.fromHSVA(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a colour from HSV components in the range of 0-1.
            </summary>
            <param name="h">Hue</param>
            <param name="s">Saturation</param>
            <param name="v">Value</param>
            <param name="a">Alpha</param>
        </member>
        <member name="M:dEngine.Colour.random">
            <summary>
            Returns a random colour.
            </summary>
        </member>
        <member name="M:dEngine.Colour.fromBrickColorCode(System.UInt32)">
            <summary>
            Creates a colour from a Roblox BrickColor code.
            </summary>
        </member>
        <member name="M:dEngine.Colour.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Colour.Equals(dEngine.Colour)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Colour.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Colour.op_Equality(dEngine.Colour,dEngine.Colour)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Colour.op_Inequality(dEngine.Colour,dEngine.Colour)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Colour.op_Implicit(dEngine.Colour)~SharpDX.Color3">
            <summary />
        </member>
        <member name="M:dEngine.Colour.op_Implicit(dEngine.Colour)~SharpDX.Color4">
            <summary />
        </member>
        <member name="M:dEngine.Colour.op_Implicit(SharpDX.Mathematics.Interop.RawColor4)~dEngine.Colour">
            <summary />
        </member>
        <member name="M:dEngine.Colour.op_Implicit(dEngine.Colour)~SharpDX.Mathematics.Interop.RawColor4">
            <summary />
        </member>
        <member name="M:dEngine.Colour.op_Implicit(dEngine.Colour)~SharpDX.Color">
            <summary />
        </member>
        <member name="M:dEngine.Colour.op_Implicit(Assimp.Color4D)~dEngine.Colour">
            <summary />
        </member>
        <member name="M:dEngine.Colour.lerp(dEngine.Colour,System.Single)">
            <summary>
            Returns a linear interpolation between the two colours.
            </summary>
        </member>
        <member name="M:dEngine.Colour.ToHexString">
            <summary>
            Returns the colour as a hexidecimal string.
            </summary>
        </member>
        <member name="M:dEngine.Colour.ToString">
            <summary>
            Returns a string representation of the colour.
            </summary>
        </member>
        <member name="M:dEngine.Colour.op_Explicit(System.String)~dEngine.Colour">
            <summary />
        </member>
        <member name="M:dEngine.Colour.toHSV">
            <summary>
            Returns the Hue, Saturation and Value components.
            </summary>
        </member>
        <member name="M:dEngine.Colour.toHSL">
            <summary>
            Returns the Hue, Saturation and Lightness components.
            </summary>
        </member>
        <member name="M:dEngine.Colour.Lighten(System.Single)">
            <summary>
            Returns a lightened copy of the original colour.
            </summary>
            <param name="v">The value to lighten by.</param>
        </member>
        <member name="M:dEngine.Colour.Darken(System.Single)">
            <summary>
            Returns a darkened copy of the original colour.
            </summary>
            <param name="v">The value to darken by.</param>
        </member>
        <member name="M:dEngine.Colour.parseRGBA(System.String)">
            <summary>
            Tries to parse a string representation of a colour.
            </summary>
        </member>
        <member name="M:dEngine.Colour.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.Colour.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="M:dEngine.Colour.fromHex(System.String)">
            <summary>
            Returns a colour from a hex string.
            </summary>
        </member>
        <member name="T:dEngine.Connection">
            <summary>
            An object with represents the connection between a listener and a signal.
            </summary>
        </member>
        <member name="M:dEngine.Connection.Invoke">
            <summary>
            Invokes the listener.
            </summary>
        </member>
        <member name="M:dEngine.Connection.disconnect">
            <summary>
            Disconnects the listener from the signal.
            </summary>
        </member>
        <member name="T:dEngine.Connection`1">
            <summary>
            An object with represents the connection between a listener and a signal.
            </summary>
        </member>
        <member name="M:dEngine.Connection`1.Invoke(`0)">
            <summary>
            Invokes the listener.
            </summary>
        </member>
        <member name="M:dEngine.Connection`1.disconnect">
            <summary>
            Disconnects the listener from the signal.
            </summary>
        </member>
        <member name="T:dEngine.Connection`2">
            <summary>
            An object with represents the connection between a listener and a signal.
            </summary>
        </member>
        <member name="M:dEngine.Connection`2.Invoke(`0,`1)">
            <summary>
            Invokes the listener.
            </summary>
        </member>
        <member name="M:dEngine.Connection`2.disconnect">
            <summary>
            Disconnects the listener from the signal.
            </summary>
        </member>
        <member name="T:dEngine.Connection`3">
            <summary>
            An object with represents the connection between a listener and a signal.
            </summary>
        </member>
        <member name="M:dEngine.Connection`3.Invoke(`0,`1,`2)">
            <summary>
            Invokes the listener.
            </summary>
        </member>
        <member name="M:dEngine.Connection`3.disconnect">
            <summary>
            Disconnects the listener from the signal.
            </summary>
        </member>
        <member name="T:dEngine.Connection`4">
            <summary>
            An object with represents the connection between a listener and a signal.
            </summary>
        </member>
        <member name="M:dEngine.Connection`4.Invoke(`0,`1,`2,`3)">
            <summary>
            Invokes the listener.
            </summary>
        </member>
        <member name="M:dEngine.Connection`4.disconnect">
            <summary>
            Disconnects the listener from the signal.
            </summary>
        </member>
        <member name="T:dEngine.Connection`5">
            <summary>
            An object with represents the connection between a listener and a signal.
            </summary>
        </member>
        <member name="M:dEngine.Connection`5.Invoke(`0,`1,`2,`3,`4)">
            <summary>
            Invokes the listener.
            </summary>
        </member>
        <member name="M:dEngine.Connection`5.disconnect">
            <summary>
            Disconnects the listener from the signal.
            </summary>
        </member>
        <member name="T:dEngine.Connection`6">
            <summary>
            An object with represents the connection between a listener and a signal.
            </summary>
        </member>
        <member name="M:dEngine.Connection`6.Invoke(`0,`1,`2,`3,`4,`5)">
            <summary>
            Invokes the listener.
            </summary>
        </member>
        <member name="M:dEngine.Connection`6.disconnect">
            <summary>
            Disconnects the listener from the signal.
            </summary>
        </member>
        <member name="T:dEngine.Connection`7">
            <summary>
            An object with represents the connection between a listener and a signal.
            </summary>
        </member>
        <member name="M:dEngine.Connection`7.Invoke(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Invokes the listener.
            </summary>
        </member>
        <member name="M:dEngine.Connection`7.disconnect">
            <summary>
            Disconnects the listener from the signal.
            </summary>
        </member>
        <member name="T:dEngine.Content`1">
            <summary>
            A reference to a content resource.
            </summary>
        </member>
        <member name="F:dEngine.Content`1._onGot">
            <summary>
            Fired when the new content is fetched.
            </summary>
        </member>
        <member name="M:dEngine.Content`1.#ctor(System.String)">
            <summary>
            Creates a new content object with optional default uri.
            </summary>
        </member>
        <member name="P:dEngine.Content`1.Asset">
            <summary>
            The asset.
            </summary>
        </member>
        <member name="P:dEngine.Content`1.ContentId">
            <summary>
            The content URL to download from. When set will delete current data and start downloading.
            </summary>
        </member>
        <member name="P:dEngine.Content`1.IsLoaded">
            <summary>
            If true, Data exists and no download is happening.
            </summary>
        </member>
        <member name="M:dEngine.Content`1.Equals(dEngine.Content{`0})">
            <summary>
            Determines if two Contents have equal content IDs.
            </summary>
        </member>
        <member name="M:dEngine.Content`1.Equals(System.String)">
            <summary>
            Determines if this Content has the given content id.
            </summary>
        </member>
        <member name="M:dEngine.Content`1.Finalize">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Content`1.Subscribe(System.Object,System.Action{System.String,`0})">
            <summary>
            Sets the given object as the content owner, and subscribes with a callback.
            </summary>
        </member>
        <member name="M:dEngine.Content`1.ToString">
            <summary />
        </member>
        <member name="M:dEngine.Content`1.op_Implicit(dEngine.Content{`0})~System.String">
            <summary>
            Returns <see cref="P:dEngine.Content`1.ContentId" />.
            </summary>
        </member>
        <member name="M:dEngine.Content`1.op_Implicit(System.String)~dEngine.Content{`0}">
            <summary>
            Returns a <see cref="T:dEngine.Content`1" /> using the given content id.
            </summary>
        </member>
        <member name="M:dEngine.Content`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Content`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Shape">
            <summary>
            Enum for primitive shapes.
            </summary>
        </member>
        <member name="T:dEngine.DateTime">
            <summary>
            A structure for holding a date/time.
            </summary>
        </member>
        <member name="P:dEngine.DateTime.ticks">
            <summary>
            The number of ticks in the date.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.#ctor(System.Double)">
            <summary>
            Creates a date from miliseconds.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.#ctor(System.String)">
            <summary>
            Creates a date from miliseconds.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a date from the given date/time paramaters.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.new(System.Double)">
            <summary>
            Creates a date from miliseconds.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.new(System.String)">
            <summary>
            Creates a date from miliseconds.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.new(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a date from the given date/time paramaters.
            </summary>
        </member>
        <member name="P:dEngine.DateTime.day">
            <summary>
            Gets the day of the month.
            </summary>
        </member>
        <member name="P:dEngine.DateTime.dayOfWeek">
            <summary>
            Gets the day of the week.
            </summary>
        </member>
        <member name="P:dEngine.DateTime.dayOfYear">
            <summary>
            Gets the day of the year.
            </summary>
        </member>
        <member name="P:dEngine.DateTime.year">
            <summary>
            Gets the year.
            </summary>
        </member>
        <member name="P:dEngine.DateTime.millisecond">
            <summary>
            Gets the millisecond.
            </summary>
        </member>
        <member name="P:dEngine.DateTime.minute">
            <summary>
            Gets the minute.
            </summary>
        </member>
        <member name="P:dEngine.DateTime.month">
            <summary>
            Gets the month.
            </summary>
        </member>
        <member name="P:dEngine.DateTime.second">
            <summary>
            Gets the second.
            </summary>
        </member>
        <member name="P:dEngine.DateTime.time">
            <summary>
            Gets the time as a <see cref="T:dEngine.TimeSpan" />.
            </summary>
        </member>
        <member name="P:dEngine.DateTime.isUtc">
            <summary>
            Determines whether the date is in the UTC or local timezone.
            </summary>
        </member>
        <member name="P:dEngine.DateTime.utc">
            <summary>
            Gets the date converted to UTC-relative.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.getTimezoneOffset">
            <summary>
            Returns the UTC offset of the local timezone.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.format(System.String)">
            <summary>
            Returns a formatted string representation of the DateTime.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.addYears(System.Int32)">
            <summary>
            Returns the current time with added years.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.addMonths(System.Int32)">
            <summary>
            Returns the current time with added months.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.addDays(System.Double)">
            <summary>
            Returns the current time with added days.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.addHours(System.Double)">
            <summary>
            Returns the current time with added hours.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.addMinutes(System.Double)">
            <summary>
            Returns the current time with added minutes.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.addSeconds(System.Double)">
            <summary>
            Returns the current time with added seconds.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.addMilliseconds(System.Double)">
            <summary>
            Returns the current time with added milliseconds.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.isDaylightSavingTime">
            <summary>
            Determines if the time is within the daylight saving time for the local timezone.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.Today">
            <summary>
            Returns the current date.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.Now">
            <summary>
            Returns the current date and time.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.UtcNow">
            <summary>
            Returns the current date and time in UTC.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.UnixEpoch">
            <summary>
            Returns the Unix epoch date in UTC.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.UnixTimestamp">
            <summary>
            Returns the number of seconds since the Unix epoch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.DateTime.Equals(dEngine.DateTime)">
            <summary />
        </member>
        <member name="M:dEngine.DateTime.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.DateTime.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:dEngine.DateTime.ToString">
            <inheritdoc />
        </member>
        <member name="M:dEngine.DateTime.op_Explicit(System.DateTime)~dEngine.DateTime">
            <summary />
        </member>
        <member name="M:dEngine.DateTime.op_Subtraction(dEngine.DateTime,dEngine.DateTime)">
            <summary>
            Subtracts two dates.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.op_Subtraction(dEngine.DateTime,dEngine.TimeSpan)">
            <summary>
            Subtracts a <see cref="T:dEngine.TimeSpan" /> from the date.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.op_Addition(dEngine.DateTime,dEngine.TimeSpan)">
            <summary>
            Adds a <see cref="T:dEngine.TimeSpan" /> to the date.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.op_GreaterThan(dEngine.DateTime,dEngine.DateTime)">
            <summary>
            Determines if the left date is greater than the right date.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.op_GreaterThanOrEqual(dEngine.DateTime,dEngine.DateTime)">
            <summary>
            Determines if the left date is greater than or to the right date.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.op_LessThan(dEngine.DateTime,dEngine.DateTime)">
            <summary>
            Determines if the left date is lesser than the right date.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.op_LessThanOrEqual(dEngine.DateTime,dEngine.DateTime)">
            <summary>
            Determines if the left date is lesser than or equal to the right date.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.op_Equality(dEngine.DateTime,dEngine.DateTime)">
            <summary>
            Determines if the left timespan is lesser than or equal to the right timespan.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.op_Inequality(dEngine.DateTime,dEngine.DateTime)">
            <summary>
            Determines if the left timespan is lesser than or equal to the right timespan.
            </summary>
        </member>
        <member name="M:dEngine.DateTime.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.DateTime.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="T:dEngine.Faces">
            <summary>
            A struct of booleans for 6 sides.
            </summary>
        </member>
        <member name="T:dEngine.InstanceReference">
            <summary>
            A reference to an instance for networking.
            </summary>
        </member>
        <member name="F:dEngine.InstanceReference.InstanceId">
            <summary>
            The id of the instance to reference.
            </summary>
        </member>
        <member name="M:dEngine.Matrix3.Equals(dEngine.Matrix3)">
            <summary />
        </member>
        <member name="M:dEngine.PhysicalProperties.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new PhysicalProperties with the given paramaters.
            </summary>
            <param name="density">The <see cref="F:dEngine.PhysicalProperties.Density" /></param>
            <param name="friction">The <see cref="F:dEngine.PhysicalProperties.Friction" /></param>
            <param name="elasticity">The <see cref="F:dEngine.PhysicalProperties.Elasticity" /></param>
            <param name="frictionWeight">The<see cref="F:dEngine.PhysicalProperties.FrictionWeight" /></param>
            <param name="elasticityWeight">The <see cref="F:dEngine.PhysicalProperties.ElasticityWeight" /></param>
        </member>
        <member name="M:dEngine.PhysicalProperties.new(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary />
        </member>
        <member name="T:dEngine.Vector4">
            <summary>
            A quaternion type.
            </summary>
        </member>
        <member name="F:dEngine.Vector4.UnitX">
            <summary>Shorthand for Vector4.new(1, 0, 0, 0)</summary>
        </member>
        <member name="F:dEngine.Vector4.UnitY">
            <summary>Shorthand for Vector4.new(0, 1, 0, 0)</summary>
        </member>
        <member name="F:dEngine.Vector4.UnitZ">
            <summary>Shorthand for Vector4.new(0, 0, 1, 0)</summary>
        </member>
        <member name="F:dEngine.Vector4.UnitW">
            <summary>Shorthand for Vector4.new(0, 0, 0, 1)</summary>
        </member>
        <member name="F:dEngine.Vector4.Zero">
            <summary>Shorthand for Vector4.new(0, 0, 0, 0)</summary>
        </member>
        <member name="F:dEngine.Vector4.One">
            <summary>Shorthand for Vector4.new(1, 1, 1, 1)</summary>
        </member>
        <member name="F:dEngine.Vector4.Identity">
            <summary>Shorthand for Vector4.new(0, 0, 0, 1)</summary>
        </member>
        <member name="F:dEngine.Vector4.x">
            <summary>
            The X component.
            </summary>
        </member>
        <member name="F:dEngine.Vector4.y">
            <summary>
            The Y component.
            </summary>
        </member>
        <member name="F:dEngine.Vector4.z">
            <summary>
            The Z component.
            </summary>
        </member>
        <member name="F:dEngine.Vector4.w">
            <summary>
            The W component.
            </summary>
        </member>
        <member name="P:dEngine.Vector4.X">
            <summary>X component of the vector.</summary>
        </member>
        <member name="P:dEngine.Vector4.Y">
            <summary>Y component of the vector.</summary>
        </member>
        <member name="P:dEngine.Vector4.Z">
            <summary>Z component of the vector.</summary>
        </member>
        <member name="P:dEngine.Vector4.W">
            <summary>W component of the vector.</summary>
        </member>
        <member name="P:dEngine.Vector4.magnitude">
            <summary>
            Gets the length of this vector.
            </summary>
        </member>
        <member name="P:dEngine.Vector4.mag2">
            <summary>
            Gets the length of this vector.
            </summary>
        </member>
        <member name="P:dEngine.Vector4.xyz">
            <summary>
            Returns the x, y and z components as a <see cref="T:dEngine.Vector3" />.
            </summary>
        </member>
        <member name="M:dEngine.Vector4.Equals(dEngine.Vector4)">
            <summary>
            Determines if two vectors are equal.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:dEngine.Vector4.unit2">
            <summary>
            Returns the length of the quaternion squared.
            </summary>
        </member>
        <member name="M:dEngine.Vector4.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Vector4.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:dEngine.Region3">
            <summary>
            A Region3 is used to represent a size and a location in 3D space, given two corners.
            </summary>
        </member>
        <member name="M:dEngine.Region3.#ctor(dEngine.Vector3,dEngine.Vector3)">
            <summary>
            Creates a Region3 out of two Vector3s.
            </summary>
        </member>
        <member name="P:dEngine.Region3.Min">
            <summary>
            The minimum vector.
            </summary>
        </member>
        <member name="P:dEngine.Region3.Max">
            <summary>
            The maximum vector.
            </summary>
        </member>
        <member name="M:dEngine.Region3.ExpandToGrid(System.Single)">
            <summary>
            Expands the <see cref="T:dEngine.Region3" /> so that it is aligned with the voxel grid.
            </summary>
            <param name="resolution">The resolution of the grid alignment.</param>
            <returns>The expanded <see cref="T:dEngine.Region3" /></returns>
        </member>
        <member name="M:dEngine.Region3.Equals(dEngine.Region3)">
            <summary>
            Tests equality of two <see cref="T:dEngine.Region3" /> values.
            </summary>
        </member>
        <member name="M:dEngine.Region3.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.Region3.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="T:dEngine.Region3int16">
            <summary>
            A variant of <see cref="T:dEngine.Region3" /> which contains 16-bit integers intead of floats.
            </summary>
        </member>
        <member name="F:dEngine.Region3int16.Min">
            <summary>
            The min vector.
            </summary>
        </member>
        <member name="F:dEngine.Region3int16.Max">
            <summary>
            The max vector.
            </summary>
        </member>
        <member name="M:dEngine.Region3int16.#ctor(dEngine.Vector3int16,dEngine.Vector3int16)">
            <summary />
        </member>
        <member name="M:dEngine.Region3int16.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary />
        </member>
        <member name="M:dEngine.Region3int16.new(dEngine.Vector3int16,dEngine.Vector3int16)">
            <summary />
        </member>
        <member name="M:dEngine.Region3int16.new(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary />
        </member>
        <member name="M:dEngine.Region3int16.Equals(dEngine.Region3int16)">
            <summary />
        </member>
        <member name="M:dEngine.Region3int16.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Region3int16.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Region3int16.op_Equality(dEngine.Region3int16,dEngine.Region3int16)">
            <summary />
        </member>
        <member name="M:dEngine.Region3int16.op_Inequality(dEngine.Region3int16,dEngine.Region3int16)">
            <summary />
        </member>
        <member name="M:dEngine.Region3int16.ToString">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Region3int16.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.Region3int16.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="T:dEngine.Tags">
            <summary>
            A list of tags.
            </summary>
        </member>
        <member name="M:dEngine.Tags.#ctor(System.String[])">
            <summary />
        </member>
        <member name="M:dEngine.Tags.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.Tags.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="M:dEngine.Tags.GetEnumerator">
            <summary />
        </member>
        <member name="M:dEngine.Tags.new(System.String[])">
            <summary />
        </member>
        <member name="M:dEngine.Tags.Add(System.String)">
            <summary>
            Adds a tag.
            </summary>
        </member>
        <member name="M:dEngine.Tags.Remove(System.String)">
            <summary>
            Removes a tag.
            </summary>
        </member>
        <member name="M:dEngine.Tags.HasTag(System.String)">
            <summary>
            Determines if the tags include the given tag.
            </summary>
        </member>
        <member name="M:dEngine.Tags.ToArray">
            <summary>
            Returns an array of the tags.
            </summary>
        </member>
        <member name="M:dEngine.Tags.ToTable">
            <summary>
            Returns the tags in a table.
            </summary>
        </member>
        <member name="T:dEngine.TimeSpan">
            <summary>
            A type which represents a time span.
            </summary>
        </member>
        <member name="P:dEngine.TimeSpan.ticks">
            <summary>
            The number of ticks.
            </summary>
        </member>
        <member name="P:dEngine.TimeSpan.days">
            <summary>
            Gets the number of days.
            </summary>
        </member>
        <member name="P:dEngine.TimeSpan.hours">
            <summary>
            Gets the number of hours.
            </summary>
        </member>
        <member name="P:dEngine.TimeSpan.minutes">
            <summary>
            Gets the number of minutes.
            </summary>
        </member>
        <member name="P:dEngine.TimeSpan.seconds">
            <summary>
            Gets the number of seconds.
            </summary>
        </member>
        <member name="P:dEngine.TimeSpan.milliseconds">
            <summary>
            Gets the number of milliseconds.
            </summary>
        </member>
        <member name="P:dEngine.TimeSpan.totalDays">
            <summary>
            Gets the total number of days.
            </summary>
        </member>
        <member name="P:dEngine.TimeSpan.totalHours">
            <summary>
            Gets the total number of hours.
            </summary>
        </member>
        <member name="P:dEngine.TimeSpan.totalMinutes">
            <summary>
            Gets the total number of minutes.
            </summary>
        </member>
        <member name="P:dEngine.TimeSpan.totalSeconds">
            <summary>
            Gets the total number of seconds.
            </summary>
        </member>
        <member name="P:dEngine.TimeSpan.totalMilliseconds">
            <summary>
            Gets the total number of milliseconds.
            </summary>
        </member>
        <member name="F:dEngine.TimeSpan.Zero">
            <summary>
            A zeroed timespan.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.#ctor(System.Int64)">
            <summary />
        </member>
        <member name="M:dEngine.TimeSpan.#ctor(System.String)">
            <summary />
        </member>
        <member name="M:dEngine.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary />
        </member>
        <member name="M:dEngine.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary />
        </member>
        <member name="M:dEngine.TimeSpan.new(System.Int64)">
            <summary />
        </member>
        <member name="M:dEngine.TimeSpan.new(System.String)">
            <summary />
        </member>
        <member name="M:dEngine.TimeSpan.new(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary />
        </member>
        <member name="M:dEngine.TimeSpan.new(System.Int32,System.Int32,System.Int32)">
            <summary />
        </member>
        <member name="M:dEngine.TimeSpan.duration">
            <summary>
            Returns an absolute timespan.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.op_Explicit(System.TimeSpan)~dEngine.TimeSpan">
            <summary />
        </member>
        <member name="M:dEngine.TimeSpan.ToString">
            <inheritdoc />
        </member>
        <member name="M:dEngine.TimeSpan.op_Addition(dEngine.TimeSpan,dEngine.TimeSpan)">
            <summary>
            Adds two timespans.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.op_Subtraction(dEngine.TimeSpan,dEngine.TimeSpan)">
            <summary>
            Subtracts two timespans.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.op_Multiply(dEngine.TimeSpan,System.Single)">
            <summary>
            Scales the <see cref="T:dEngine.TimeSpan" />.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.op_GreaterThan(dEngine.TimeSpan,dEngine.TimeSpan)">
            <summary>
            Determines if the left timespan is greater than the right timespan.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.op_GreaterThanOrEqual(dEngine.TimeSpan,dEngine.TimeSpan)">
            <summary>
            Determines if the left timespan is greater than or equal to the right timespan.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.op_LessThan(dEngine.TimeSpan,dEngine.TimeSpan)">
            <summary>
            Determines if the left timespan is lesser than the right timespan.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.op_LessThanOrEqual(dEngine.TimeSpan,dEngine.TimeSpan)">
            <summary>
            Determines if the left timespan is lesser than or equal to the right timespan.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.op_Equality(dEngine.TimeSpan,dEngine.TimeSpan)">
            <summary>
            Determines if the left timespan is lesser than or equal to the right timespan.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.op_Inequality(dEngine.TimeSpan,dEngine.TimeSpan)">
            <summary>
            Determines if the left timespan is lesser than or equal to the right timespan.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.Equals(dEngine.TimeSpan)">
            <summary />
        </member>
        <member name="M:dEngine.TimeSpan.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.TimeSpan.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:dEngine.TimeSpan.FromDays(System.Double)">
            <summary>
            Returns a timespan from the given days.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.FromHours(System.Double)">
            <summary>
            Returns a timespan from the given hours.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.FromMinutes(System.Double)">
            <summary>
            Returns a timespan from the given minutes.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.FromSeconds(System.Double)">
            <summary>
            Returns a timespan from the given seconds.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.FromMilliseconds(System.Double)">
            <summary>
            Returns a timespan from the given milliseconds.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.op_Explicit(dEngine.TimeSpan)~System.TimeSpan">
            <summary>
            Returns a <see cref="T:System.TimeSpan" />.
            </summary>
        </member>
        <member name="M:dEngine.TimeSpan.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.TimeSpan.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="T:dEngine.Vector3int16">
            <summary>
            A variant of <see cref="T:dEngine.Vector3" /> which contains 16-bit integers intead of floats.
            </summary>
        </member>
        <member name="F:dEngine.Vector3int16.x">
            <summary>The X component.</summary>
        </member>
        <member name="F:dEngine.Vector3int16.y">
            <summary>The Y component.</summary>
        </member>
        <member name="F:dEngine.Vector3int16.z">
            <summary>The Z component.</summary>
        </member>
        <member name="M:dEngine.Vector3int16.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3int16.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary />
        </member>
        <member name="F:dEngine.Vector3int16.Right">
            <summary>
            Shorthand for Vector3int16.new(1, 0, 0)
            </summary>
        </member>
        <member name="F:dEngine.Vector3int16.Up">
            <summary>
            Shorthand for Vector3int16.new(0, 1, 0)
            </summary>
        </member>
        <member name="F:dEngine.Vector3int16.Backward">
            <summary>
            Shorthand for Vector3int16.new(0, 0, 1)
            </summary>
        </member>
        <member name="M:dEngine.Vector3int16.Equals(dEngine.Vector3int16)">
            <summary>
            Determines if two <see cref="T:dEngine.Vector3int16" /> are equal.
            </summary>
        </member>
        <member name="M:dEngine.Vector3int16.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Vector3int16.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Vector3int16.ToString">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Vector3int16.op_Equality(dEngine.Vector3int16,dEngine.Vector3int16)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3int16.op_Inequality(dEngine.Vector3int16,dEngine.Vector3int16)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3int16.op_GreaterThan(dEngine.Vector3int16,dEngine.Vector3int16)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3int16.op_GreaterThanOrEqual(dEngine.Vector3int16,dEngine.Vector3int16)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3int16.op_LessThan(dEngine.Vector3int16,dEngine.Vector3int16)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3int16.op_LessThanOrEqual(dEngine.Vector3int16,dEngine.Vector3int16)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3int16.op_Addition(dEngine.Vector3int16,dEngine.Vector3int16)">
            <summary>
            Adds together two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector3int16.op_Subtraction(dEngine.Vector3int16,dEngine.Vector3int16)">
            <summary>
            Subtracts two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector3int16.op_Multiply(dEngine.Vector3int16,dEngine.Vector3int16)">
            <summary>
            Multiplies two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector3int16.op_Division(dEngine.Vector3int16,dEngine.Vector3int16)">
            <summary>
            Divides two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector3int16.op_Multiply(dEngine.Vector3int16,System.Single)">
            <summary>
            Multiplies two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector3int16.op_Explicit(dEngine.Vector3int16)~dEngine.Vector3">
            <summary>
            Converts a <see cref="T:dEngine.Vector3int16" /> to a <see cref="T:dEngine.Vector3" />.
            </summary>
        </member>
        <member name="M:dEngine.Vector3int16.op_Explicit(dEngine.Vector3)~dEngine.Vector3int16">
            <summary>
            Converts a <see cref="T:dEngine.Vector3" /> to a <see cref="T:dEngine.Vector3int16" />.
            </summary>
        </member>
        <member name="T:dEngine.InstanceId">
            <summary>
            A GUID for an <see cref="T:dEngine.Instances.Instance" />.
            </summary>
        </member>
        <member name="F:dEngine.InstanceId.Empty">
            <summary>
            An empty instance ID.
            </summary>
        </member>
        <member name="M:dEngine.InstanceId.#ctor(System.Guid)">
            <summary>
            Creates an InstanceId from a GUID.
            </summary>
        </member>
        <member name="M:dEngine.InstanceId.#ctor(System.String)">
            <summary>
            Creates an InstanceId from a string.
            </summary>
        </member>
        <member name="M:dEngine.InstanceId.#ctor(System.String@)">
            <summary>
            Creates an InstanceId from a string.
            </summary>
        </member>
        <member name="M:dEngine.InstanceId.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="M:dEngine.InstanceId.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.InstanceId.ToString">
            <summary>
            Returns the ID as a string.
            </summary>
        </member>
        <member name="M:dEngine.InstanceId.op_Implicit(dEngine.InstanceId)~System.String">
            <summary>
            Converts a InstanceId to an string.
            </summary>
        </member>
        <member name="M:dEngine.InstanceId.op_Explicit(dEngine.InstanceId)~System.Guid">
            <summary>
            Converts a InstanceId to an string.
            </summary>
        </member>
        <member name="M:dEngine.InstanceId.op_Implicit(System.String)~dEngine.InstanceId">
            <summary>
            Converts a string to an InstanceId.
            </summary>
        </member>
        <member name="M:dEngine.InstanceId.Generate">
            <summary>
            Generates a new unique InstanceId.
            </summary>
        </member>
        <member name="M:dEngine.InstanceId.Equals(dEngine.InstanceId)">
            <summary>
            Determines of two IDs are equal.
            </summary>
        </member>
        <member name="M:dEngine.InstanceId.Equals(dEngine.InstanceId@)">
            <summary>
            Determines of two IDs are equal.
            </summary>
        </member>
        <member name="M:dEngine.InstanceId.Equals(System.Object)">
            <summary>
            Determines if the ID is equal to the given object.
            </summary>
        </member>
        <member name="M:dEngine.InstanceId.GetHashCode">
            <summary>
            Gets the hash of the ID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.InstanceId.op_Equality(dEngine.InstanceId,dEngine.InstanceId)">
            <summary>
            Determines if two IDs are equal.
            </summary>
        </member>
        <member name="M:dEngine.InstanceId.op_Inequality(dEngine.InstanceId,dEngine.InstanceId)">
            <summary>
            Determines if two IDs are not equal.
            </summary>
        </member>
        <member name="T:dEngine.Ray">
            <summary>
            A ray is an infinite line starting at <see cref="F:dEngine.Ray.Origin" /> and going towards <see cref="F:dEngine.Ray.Direction" />.
            </summary>
        </member>
        <member name="F:dEngine.Ray.Origin">
            <summary>
            The origin Position.
            </summary>
        </member>
        <member name="F:dEngine.Ray.Direction">
            <summary>
            The direction vector.
            </summary>
        </member>
        <member name="M:dEngine.Ray.#ctor(dEngine.Vector3,dEngine.Vector3)">
            <summary>
            Creates a ray with provided origin and direction.
            </summary>
        </member>
        <member name="M:dEngine.Ray.#ctor(dEngine.Vector3@,dEngine.Vector3@)">
            <summary>
            Creates a ray with provided origin and direction.
            </summary>
        </member>
        <member name="M:dEngine.Ray.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a ray with provided origin and direction.
            </summary>
        </member>
        <member name="P:dEngine.Ray.unit">
            <summary>
            Returns a copy of the ray with a normalized direction vector.
            </summary>
        </member>
        <member name="F:dEngine.Ray.Zero">
            <summary>
            A ray that uses <see cref="F:dEngine.Vector3.Zero" /> postion and direction.
            </summary>
        </member>
        <member name="M:dEngine.Ray.GetPoint(System.Single)">
            <summary>
            Gets a point along the ray at the specified length.
            </summary>
            <param name="length">The length along the ray from the ray Position in terms of the ray's direction.</param>
            <returns>The point along the ray at the given location.</returns>
        </member>
        <member name="M:dEngine.Ray.ClosestPoint(dEngine.Vector3)">
            <summary>
            Returns the closest point on the ray.
            </summary>
            <param name="point">The position to get the closest point to.</param>
            <returns></returns>
        </member>
        <member name="M:dEngine.Ray.Distance(dEngine.Vector3)">
            <summary>
            Returns the distance from the ray to the point.
            </summary>
        </member>
        <member name="M:dEngine.Ray.ToString">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Ray.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.Ray.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="M:dEngine.Ray.Equals(dEngine.Ray)">
            <summary />
        </member>
        <member name="M:dEngine.Ray.Equals(System.Object)">
            <summary />
        </member>
        <member name="M:dEngine.Ray.GetHashCode">
            <summary />
        </member>
        <member name="M:dEngine.Ray.op_Equality(dEngine.Ray,dEngine.Ray)">
            <summary />
        </member>
        <member name="M:dEngine.Ray.op_Inequality(dEngine.Ray,dEngine.Ray)">
            <summary />
        </member>
        <member name="T:dEngine.Signal">
            <summary>
            A signal allows listener functions to be connected, which are called when the signal is fired.
            </summary>
        </member>
        <member name="M:dEngine.Signal.#ctor(dEngine.Instances.Instance)">
            <summary>
            Initializes a new signal.
            </summary>
            <param name="host">The instance which this signal will be a member of.</param>
        </member>
        <member name="P:dEngine.Signal.Owner">
            <summary>
            The owner of this signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal.connect(dEngine.LuaAction)">
            <summary>
            Connects the given listener to the signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal.wait">
            <summary>
            Yields the current thread until this signal next fires.
            </summary>
        </member>
        <member name="M:dEngine.Signal.Dispose">
            <summary>
            Disconnects all connections and destroys the signal.
            </summary>
        </member>
        <member name="T:dEngine.Signal`1">
            <summary>
            A signal allows listener functions to be connected, which are called when the signal is fired.
            </summary>
        </member>
        <member name="M:dEngine.Signal`1.#ctor(dEngine.Instances.Instance)">
            <summary>
            Initializes a new signal.
            </summary>
            <param name="host">The instance which this signal will be a member of.</param>
        </member>
        <member name="P:dEngine.Signal`1.Owner">
            <summary>
            The owner of this signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`1.Dispose">
            <summary>
            Disconnects all connections and destroys the signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`1.connect(dEngine.LuaAction{`0})">
            <summary>
            Connects the given listener to the signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`1.wait">
            <summary>
            Yields the current thread until this signal next fires.
            </summary>
        </member>
        <member name="T:dEngine.Signal`2">
            <summary>
            A signal allows listener functions to be connected, which are called when the signal is fired.
            </summary>
        </member>
        <member name="M:dEngine.Signal`2.#ctor(dEngine.Instances.Instance)">
            <summary>
            Initializes a new signal.
            </summary>
            <param name="host">The instance which this signal will be a member of.</param>
        </member>
        <member name="P:dEngine.Signal`2.Owner">
            <summary>
            The owner of this signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`2.Dispose">
            <summary>
            Disconnects all connections and destroys the signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`2.connect(dEngine.LuaAction{`0,`1})">
            <summary>
            Connects the given listener to the signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`2.wait">
            <summary>
            Yields the current thread until this signal next fires.
            </summary>
        </member>
        <member name="T:dEngine.Signal`3">
            <summary>
            A signal allows listener functions to be connected, which are called when the signal is fired.
            </summary>
        </member>
        <member name="M:dEngine.Signal`3.#ctor(dEngine.Instances.Instance)">
            <summary>
            Initializes a new signal.
            </summary>
            <param name="host">The instance which this signal will be a member of.</param>
        </member>
        <member name="P:dEngine.Signal`3.Owner">
            <summary>
            The owner of this signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`3.Dispose">
            <summary>
            Disconnects all connections and destroys the signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`3.connect(dEngine.LuaAction{`0,`1,`2})">
            <summary>
            Connects the given listener to the signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`3.wait">
            <summary>
            Yields the current thread until this signal next fires.
            </summary>
        </member>
        <member name="T:dEngine.Signal`4">
            <summary>
            A signal allows listener functions to be connected, which are called when the signal is fired.
            </summary>
        </member>
        <member name="M:dEngine.Signal`4.#ctor(dEngine.Instances.Instance)">
            <summary>
            Initializes a new signal.
            </summary>
            <param name="host">The instance which this signal will be a member of.</param>
        </member>
        <member name="P:dEngine.Signal`4.Owner">
            <summary>
            The owner of this signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`4.Dispose">
            <summary>
            Disconnects all connections and destroys the signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`4.connect(dEngine.LuaAction{`0,`1,`2,`3})">
            <summary>
            Connects the given listener to the signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`4.wait">
            <summary>
            Yields the current thread until this signal next fires.
            </summary>
        </member>
        <member name="T:dEngine.Signal`5">
            <summary>
            A signal allows listener functions to be connected, which are called when the signal is fired.
            </summary>
        </member>
        <member name="M:dEngine.Signal`5.#ctor(dEngine.Instances.Instance)">
            <summary>
            Initializes a new signal.
            </summary>
            <param name="host">The instance which this signal will be a member of.</param>
        </member>
        <member name="P:dEngine.Signal`5.Owner">
            <summary>
            The owner of this signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`5.Dispose">
            <summary>
            Disconnects all connections and destroys the signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`5.connect(dEngine.LuaAction{`0,`1,`2,`3,`4})">
            <summary>
            Connects the given listener to the signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`5.wait">
            <summary>
            Yields the current thread until this signal next fires.
            </summary>
        </member>
        <member name="T:dEngine.Signal`6">
            <summary>
            A signal allows listener functions to be connected, which are called when the signal is fired.
            </summary>
        </member>
        <member name="M:dEngine.Signal`6.#ctor(dEngine.Instances.Instance)">
            <summary>
            Initializes a new signal.
            </summary>
            <param name="host">The instance which this signal will be a member of.</param>
        </member>
        <member name="P:dEngine.Signal`6.Owner">
            <summary>
            The owner of this signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`6.Dispose">
            <summary>
            Disconnects all connections and destroys the signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`6.connect(dEngine.LuaAction{`0,`1,`2,`3,`4,`5})">
            <summary>
            Connects the given listener to the signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`6.wait">
            <summary>
            Yields the current thread until this signal next fires.
            </summary>
        </member>
        <member name="T:dEngine.Signal`7">
            <summary>
            A signal allows listener functions to be connected, which are called when the signal is fired.
            </summary>
        </member>
        <member name="M:dEngine.Signal`7.#ctor(dEngine.Instances.Instance)">
            <summary>
            Initializes a new signal.
            </summary>
            <param name="host">The instance which this signal will be a member of.</param>
        </member>
        <member name="P:dEngine.Signal`7.Owner">
            <summary>
            The owner of this signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`7.Dispose">
            <summary>
            Disconnects all connections and destroys the signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`7.connect(dEngine.LuaAction{`0,`1,`2,`3,`4,`5,`6})">
            <summary>
            Connects the given listener to the signal.
            </summary>
        </member>
        <member name="M:dEngine.Signal`7.wait">
            <summary>
            Yields the current thread until this signal next fires.
            </summary>
        </member>
        <member name="T:dEngine.UDim2">
            <summary>
            A type representing 2D universal dimensions.
            </summary>
            <remarks>
            UDim2 has two vectors, Scale is relative to the parent element's size and Absolute is absolute.
            A size of UDim2(0.5, 0.5, 0, 0) would be half the width and half the height of the parent.
            The final sum of UDim2 is (Scale * Parent's Size + Absolute).
            </remarks>
        </member>
        <member name="F:dEngine.UDim2.Zero">
            <summary>
            Shorthand for UDim2(0, 0, 0, 0).
            </summary>
        </member>
        <member name="F:dEngine.UDim2.ScaleOne">
            <summary>
            Shorthand for UDim2(1, 0, 1, 0).
            </summary>
        </member>
        <member name="P:dEngine.UDim2.Scale">
            <summary>
            A 2D unit which scales the parent's size.
            </summary>
        </member>
        <member name="P:dEngine.UDim2.Absolute">
            <summary>
            A 2D unit which is added to the scale.
            </summary>
        </member>
        <member name="M:dEngine.UDim2.#ctor(System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            Creates a UDim2 with scale and offset values.
            </summary>
        </member>
        <member name="M:dEngine.UDim2.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a UDim2 with scale and offset values.
            </summary>
        </member>
        <member name="M:dEngine.UDim2.#ctor(dEngine.Vector2,dEngine.Vector2)">
            <summary>
            Creates a UDim2 with scale and offset vectors.
            </summary>
        </member>
        <member name="M:dEngine.UDim2.new(System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            Creates a UDim2 with scale and offset values.
            </summary>
        </member>
        <member name="M:dEngine.UDim2.new(dEngine.Vector2,dEngine.Vector2)">
            <summary>
            Creates a UDim2 with scale and offset vectors.
            </summary>
        </member>
        <member name="M:dEngine.UDim2.toAbsolute(dEngine.Vector2)">
            <summary>
            Returns the absolute value of this UDim2.
            </summary>
        </member>
        <member name="M:dEngine.UDim2.ToString">
            <inheritdoc />
        </member>
        <member name="M:dEngine.UDim2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:dEngine.UDim2.Equals(dEngine.UDim2)">
            <summary />
        </member>
        <member name="M:dEngine.UDim2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.UDim2.op_Equality(dEngine.UDim2,dEngine.UDim2)">
            <summary />
        </member>
        <member name="M:dEngine.UDim2.op_Inequality(dEngine.UDim2,dEngine.UDim2)">
            <summary />
        </member>
        <member name="M:dEngine.UDim2.op_Addition(dEngine.UDim2,dEngine.UDim2)">
            <summary />
        </member>
        <member name="M:dEngine.UDim2.op_Subtraction(dEngine.UDim2,dEngine.UDim2)">
            <summary />
        </member>
        <member name="M:dEngine.UDim2.op_Multiply(dEngine.UDim2,dEngine.UDim2)">
            <summary />
        </member>
        <member name="T:dEngine.Vector2">
            <summary>
            A vector with two components.
            </summary>
        </member>
        <member name="F:dEngine.Vector2.One">
            <summary>Shorthand for Vector2.new(1, 1)</summary>
        </member>
        <member name="F:dEngine.Vector2.Zero">
            <summary>Shorthand for Vector2.new(0, 0)</summary>
        </member>
        <member name="F:dEngine.Vector2.x">
            <summary>
            X component of the vector.
            </summary>
        </member>
        <member name="F:dEngine.Vector2.y">
            <summary>
            Y component of the vector.
            </summary>
        </member>
        <member name="P:dEngine.Vector2.X">
            <summary>
            X component of the vector.
            </summary>
        </member>
        <member name="P:dEngine.Vector2.Y">
            <summary>
            Y component of the vector.
            </summary>
        </member>
        <member name="P:dEngine.Vector2.magnitude">
            <summary>
            Gets the length of this vector.
            </summary>
        </member>
        <member name="P:dEngine.Vector2.unit">
            <summary>
            Gets a copy of this vector with a magnitude of 1.
            </summary>
        </member>
        <member name="F:dEngine.Vector2.Right">
            <summary>
            Shorthand for Vector2.new(1, 0).
            </summary>
        </member>
        <member name="F:dEngine.Vector2.Down">
            <summary>
            Shorthand for Vector2.new(0, 1).
            </summary>
        </member>
        <member name="M:dEngine.Vector2.#ctor(System.Single)">
            <summary>
            Initializes a Vector2 with all components set to value.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a Vector2 with the given x and y components.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.new(System.Single)">
            <summary>
            Initializes a Vector2 with all components set to value.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.new(System.Single,System.Single)">
            <summary>
            Initializes a Vector2 with the given x and y components.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.validate">
            <summary>
            Returns true if the Vector2 does not contain NaN/Infinite values.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.inverse">
            <summary>
            Returns an inverted vector.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.lerp(dEngine.Vector2,System.Single)">
            <summary>
            Returns a vector lerped towards target.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.dot(dEngine.Vector2)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.distance(dEngine.Vector2)">
            <summary>
            Returns the distance between two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.inverse(dEngine.Vector2)">
            <summary>
            Returns an inverted vector.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.round">
            <summary>
            Returns a copy of the vector with its components rounded.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.Lerp(dEngine.Vector2@,dEngine.Vector2@,System.Single@,dEngine.Vector2@)">
            <summary>
            Returns a vector lerped towards target.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.Dot(dEngine.Vector2@,dEngine.Vector2@,System.Single@)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.Distance(dEngine.Vector2@,dEngine.Vector2@,System.Single@)">
            <summary>
            Returns the distance between two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.ToString">
            <summary>
            Returns a string representation of the vector.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.Equals(dEngine.Vector2)">
            <summary>
            Determines if two vectors are equal.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Vector2.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Vector2.op_Equality(dEngine.Vector2,dEngine.Vector2)">
            <summary />
        </member>
        <member name="M:dEngine.Vector2.op_Inequality(dEngine.Vector2,dEngine.Vector2)">
            <summary />
        </member>
        <member name="M:dEngine.Vector2.op_GreaterThan(dEngine.Vector2,dEngine.Vector2)">
            <summary />
        </member>
        <member name="M:dEngine.Vector2.op_LessThan(dEngine.Vector2,dEngine.Vector2)">
            <summary />
        </member>
        <member name="M:dEngine.Vector2.op_Explicit(System.String)~dEngine.Vector2">
            <summary>
            Converts a string to a vector.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:dEngine.Vector2.op_Explicit(SharpDX.Vector2)~dEngine.Vector2">
            <summary>
            Converts SharpDX.Vector2 to dEngine.Vector2
            </summary>
            <param name="v">A SharpDX Vector2</param>
        </member>
        <member name="M:dEngine.Vector2.op_Explicit(dEngine.Vector2)~SharpDX.Vector2">
            <summary>
            Converts dEngine.Vector2 to SharpDX.Vector2
            </summary>
            <param name="v">A dEngine Vector2</param>
        </member>
        <member name="M:dEngine.Vector2.op_Explicit(SharpDX.Point)~dEngine.Vector2">
            <summary>
            Converts SharpDX.Point to dEngine.Vector2
            </summary>
            <param name="v">A SharpDX Vector2</param>
        </member>
        <member name="M:dEngine.Vector2.op_Explicit(dEngine.Vector2)~SharpDX.Point">
            <summary>
            Converts dEngine.Vector2 to SharpDX.Point
            </summary>
            <param name="v">A dEngine Vector2</param>
        </member>
        <member name="M:dEngine.Vector2.op_Addition(dEngine.Vector2,dEngine.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.op_Subtraction(dEngine.Vector2,dEngine.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <returns>The sum of the vectors.</returns>
        </member>
        <member name="M:dEngine.Vector2.op_Multiply(dEngine.Vector2,dEngine.Vector2)">
            <summary>
            Muliplies two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.op_UnaryNegation(dEngine.Vector2)">
            <summary>
            Returns a negated vector.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.op_Multiply(dEngine.Vector2,System.Single)">
            <summary>
            Returns a vector multiplied by number.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.op_Multiply(System.Single,dEngine.Vector2)">
            <summary>
            Returns a vector multiplied by number.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.op_Addition(dEngine.Vector2,System.Single)">
            <summary>
            Adds num to each component of vector.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.op_Subtraction(dEngine.Vector2,System.Single)">
            <summary>
            Subtracts num from each component of vector.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.op_Division(dEngine.Vector2,System.Single)">
            <summary>
            Divides each component of vector by num.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.Min(dEngine.Vector2@,dEngine.Vector2@,dEngine.Vector2@)">
            <summary>
            Returns a vector containing the smallest components of the two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.Max(dEngine.Vector2@,dEngine.Vector2@,dEngine.Vector2@)">
            <summary>
            Returns a vector containing the biggest components of the two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.Min(dEngine.Vector2,dEngine.Vector2)">
            <summary>
            Returns a vector containing the smallest components of the two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.Max(dEngine.Vector2,dEngine.Vector2)">
            <summary>
            Returns a vector containing the biggest components of the two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector2.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.Vector2.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="T:dEngine.Vector3">
            <summary>
            A vector with three components.
            </summary>
        </member>
        <member name="F:dEngine.Vector3.Up">
            <summary>Shorthand for Vector3.new(0, 1, 0)</summary>
        </member>
        <member name="F:dEngine.Vector3.Down">
            <summary>Shorthand for Vector3.new(0, -1, 0)</summary>
        </member>
        <member name="F:dEngine.Vector3.Backward">
            <summary>Shorthand for Vector3.new(0, 0, 1)</summary>
        </member>
        <member name="F:dEngine.Vector3.Forward">
            <summary>Shorthand for Vector3.new(0, 0, -1)</summary>
        </member>
        <member name="F:dEngine.Vector3.Left">
            <summary>Shorthand for Vector3.new(-1, 0, 0)</summary>
        </member>
        <member name="F:dEngine.Vector3.Right">
            <summary>Shorthand for Vector3.new(1, 0, 0)</summary>
        </member>
        <member name="F:dEngine.Vector3.Zero">
            <summary>Shorthand for Vector3.new(0, 0, 0)</summary>
        </member>
        <member name="F:dEngine.Vector3.One">
            <summary>Shorthand for Vector3.new(1, 1, 1)</summary>
        </member>
        <member name="F:dEngine.Vector3.x">
            <summary>
            X component of the vector.
            </summary>
        </member>
        <member name="F:dEngine.Vector3.y">
            <summary>
            Y component of the vector.
            </summary>
        </member>
        <member name="F:dEngine.Vector3.z">
            <summary>
            Z component of the vector.
            </summary>
        </member>
        <member name="P:dEngine.Vector3.X">
            <summary>
            X component of the vector.
            </summary>
        </member>
        <member name="P:dEngine.Vector3.Y">
            <summary>
            Y component of the vector.
            </summary>
        </member>
        <member name="P:dEngine.Vector3.Z">
            <summary>
            Z component of the vector.
            </summary>
        </member>
        <member name="P:dEngine.Vector3.magnitude">
            <summary>
            Gets the length of this vector.
            </summary>
        </member>
        <member name="P:dEngine.Vector3.mag2">
            <summary>
            Gets the length squared of this vector.
            </summary>
        </member>
        <member name="P:dEngine.Vector3.unit">
            <summary>
            Gets a normalized version of the vector.
            </summary>
        </member>
        <member name="P:dEngine.Vector3.xy">
            <summary>
            Returns a Vector2 of the x and y components.
            </summary>
        </member>
        <member name="P:dEngine.Vector3.XY">
            <summary>
            Returns a Vector2 of the x and y components.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.#ctor(System.Single)">
            <summary>
            Creates a new Vector3 with each component set to value.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new Vector3 with the given component values.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.#ctor(dEngine.Vector2,System.Single)">
            <summary>
            Creates a new Vector3 from a Vector2 and Z value.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.new(System.Single)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3.new(System.Single,System.Single,System.Single)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3.new(dEngine.Vector2,System.Single)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3.FromNormalId(dEngine.NormalId)">
            <summary>
            Creates a unit Vector3 from a NormalId.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Vector3.ToString">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Vector3.op_Explicit(System.String)~dEngine.Vector3">
            <summary>
            Converts a string to a vector.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:dEngine.Vector3.validate">
            <summary>
            Returns true if the Vector3 does not contain NaN/Infinite values.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.inverse">
            <summary>
            Returns an inverted vector.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.lerp(dEngine.Vector3,System.Single)">
            <summary>
            Returns a vector lerped towards target.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.dot(dEngine.Vector3)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.cross(dEngine.Vector3)">
            <summary>
            Returns the cross product of two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.distance(dEngine.Vector3)">
            <summary>
            Returns the distance between two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.Inverse(dEngine.Vector3@,dEngine.Vector3@)">
            <summary>
            Inverts a vector.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.Lerp(dEngine.Vector3@,dEngine.Vector3@,System.Single@,dEngine.Vector3@)">
            <summary>
            Lerps a vector.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.Dot(dEngine.Vector3@,dEngine.Vector3@,System.Single@)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.Distance(dEngine.Vector3@,dEngine.Vector3@,System.Single@)">
            <summary>
            Returns the distance between two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.Equals(dEngine.Vector3)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:dEngine.Vector3.op_Equality(dEngine.Vector3,dEngine.Vector3)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3.op_Inequality(dEngine.Vector3,dEngine.Vector3)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3.op_GreaterThan(dEngine.Vector3,dEngine.Vector3)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3.op_GreaterThanOrEqual(dEngine.Vector3,dEngine.Vector3)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3.op_LessThan(dEngine.Vector3,dEngine.Vector3)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3.op_LessThanOrEqual(dEngine.Vector3,dEngine.Vector3)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3.op_Addition(dEngine.Vector3,dEngine.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.op_Subtraction(dEngine.Vector3,dEngine.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.op_Multiply(dEngine.Vector3,dEngine.Vector3)">
            <summary>
            Muliplies two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.op_UnaryNegation(dEngine.Vector3)">
            <summary>
            Returns a negated vector.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.op_Multiply(dEngine.Vector3,System.Single)">
            <summary>
            Returns a vector multiplied by number.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.op_Multiply(System.Single,dEngine.Vector3)">
            <summary>
            Returns a vector multiplied by number.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.op_Addition(dEngine.Vector3,System.Single)">
            <summary>
            Adds num to each component of vector.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.op_Subtraction(dEngine.Vector3,System.Single)">
            <summary>
            Subtracts num from each component of vector.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.op_Division(dEngine.Vector3,System.Single)">
            <summary>
            Divides each component of vector by num.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.ToArray">
            <summary>
            Returns the vector components as an array of floats.
            </summary>
            <returns></returns>
        </member>
        <member name="M:dEngine.Vector3.Min(dEngine.Vector3@,dEngine.Vector3@,dEngine.Vector3@)">
            <summary>
            Returns a vector containing the smallest components of the two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.Max(dEngine.Vector3@,dEngine.Vector3@,dEngine.Vector3@)">
            <summary>
            Returns a vector containing the biggest components of the two vectors.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.Max(dEngine.Vector3@)">
            <summary>
            Returns the max component of the given vector.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.max">
            <summary>
            Returns the largest component of the vector.
            </summary>
        </member>
        <member name="M:dEngine.Vector3.Load(System.IO.BinaryReader)">
            <summary />
        </member>
        <member name="M:dEngine.Vector3.Save(System.IO.BinaryWriter)">
            <summary />
        </member>
        <member name="T:dEngine.IDataType">
            <summary>
            Interface for objects which are not inherited from that can be serialized.
            </summary>
        </member>
        <member name="M:dEngine.IDataType.Save(System.IO.BinaryWriter)">
            <summary>
            Serializes the type to binary.
            </summary>
        </member>
        <member name="M:dEngine.IDataType.Load(System.IO.BinaryReader)">
            <summary>
            Deserializes the type from binary.
            </summary>
        </member>
    </members>
</doc>
