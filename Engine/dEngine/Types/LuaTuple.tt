<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#  const int maxParametersCount = 12; #>
// <auto-generated>
// This code was generated by LuaTuple.tt
// <#= DateTime.Now.ToString("R") #>
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;
using Neo.IronLua;

namespace dEngine
{
<# for(int parametersCount = 1; parametersCount <= maxParametersCount; parametersCount++) {
   string parameters = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "T" + i));
   string arguments = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "T" + i +" arg" + i + " = default(T" + i + ")"));
   string argumentsCall = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "arg" + i));
   string resultProperties = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "(T"+i+")tuple._result["+(i-1)+"]"));
   string tupleProperties = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "tuple.Item"+i));
#>
	/// <summary>
	/// Represents multiple return values.
	/// </summary>
	public sealed class LuaTuple<<#= parameters #>>
	{
		private readonly LuaResult _result;

		internal LuaTuple(<#= arguments #>)
		{
			_result = new LuaResult(<#= argumentsCall #>);
		}
		
		/// <summary/>
		public static implicit operator LuaResult(LuaTuple<<#= parameters #>> tuple)
		{
			return tuple._result;
		}
		
		/// <summary/>
		public static implicit operator T1(LuaTuple<<#= parameters #>> tuple)
		{
			return (T1)tuple._result[0];
		}
<# if (parametersCount < 7) { #>

		/// <summary/>
		public static implicit operator Tuple<<#= parameters #>>(LuaTuple<<#= parameters #>> tuple)
		{
			return new Tuple<<#= parameters #>>(<#= resultProperties #>);
		}
		
		/// <summary/>
		public static implicit operator LuaTuple<<#= parameters #>>(Tuple<<#= parameters #>> tuple)
		{
			return new LuaTuple<<#= parameters #>>(<#= tupleProperties #>);
		}
<#}#>
	}
<#}#>
}
