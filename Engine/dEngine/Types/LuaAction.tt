<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#  const int maxParametersCount = 7; #>
// <auto-generated>
// This code was generated by LuaAction.tt
// <#= DateTime.Now.ToString("R") #>
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;
using Dynamitey;
using Neo.IronLua;
using System.Runtime.CompilerServices;

namespace dEngine
{
	/// <summary>
	/// Represents a function in Lua.
	/// </summary>
	public sealed class LuaAction
	{
		private readonly Delegate _delegate;
		
		/// <summary/>
		public LuaAction(Delegate del)
		{
			_delegate = del;
		}
		
		/// <summary>
		/// Invokes the action.
		/// </summary>
		public void Invoke()
		{
			_delegate.FastDynamicInvoke();
		}

		/// <summary/>
		public static implicit operator Action(LuaAction action)
		{
			return action.Invoke;
		}

		/// <summary/>
		public static implicit operator LuaAction(Action action)
		{
			return new LuaAction(action);
		}
		
		/// <summary/>
		public static implicit operator LuaAction(Delegate del)
		{
			return new LuaAction(del);
		}
		
		/// <summary/>
		public static implicit operator LuaAction(Func<LuaResult> del)
		{
			return new LuaAction(del);
		}
	}

<# for(int parametersCount = 1; parametersCount <= maxParametersCount; parametersCount++) {
   string parameters = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "T" + i));
   string arguments = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "T" + i +" arg" + i + " = default(T" + i + ")"));
   string argumentsCall = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "arg" + i));
   string resultProperties = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "(T"+i+")tuple._result["+(i-1)+"]"));
   string tupleProperties = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "tuple.Item"+i));
   string funcParameters = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => 
   { 
		if (i == parametersCount) 
			return ("LuaResult");
		return ("object");
   }));
#>

	/// <summary>
	/// Represents multiple return values.
	/// </summary>
	public sealed class LuaAction<<#= parameters #>>
	{
		private readonly Delegate _delegate;
		private readonly bool _isAction;
		private readonly bool _isParams;
		
		/// <summary/>
		public LuaAction(Delegate del)
		{
			var paramaters = del.Method.GetParameters();
			var paramCount = paramaters.Length;

		    if (paramCount > 0)
		    {
		        if (paramaters[0].ParameterType == typeof(Closure))
		        {
		            paramCount--;
		        }
		    }

			_isAction = paramCount == 0;
			_isParams = paramCount == 1 && paramaters[0].ParameterType == typeof(object[]);

			_delegate = del;
		}
		
		/// <summary>
		/// Invokes the action.
		/// </summary>
		public void Invoke(<#= arguments #>)
		{
			if (_isAction)
				_delegate.FastDynamicInvoke();
			else if (_isParams)
				_delegate.FastDynamicInvoke(new object[] {new object[] {<#= argumentsCall #>}});
			else
				_delegate.FastDynamicInvoke(<#= argumentsCall #>);
		}

		/// <summary/>
		public static implicit operator Action<<#= parameters #>>(LuaAction<<#= parameters #>> action)
		{
			return action.Invoke;
		}

		/// <summary/>
		public static implicit operator LuaAction<<#= parameters #>>(Delegate del)
		{
			return new LuaAction<<#= parameters #>>(del);
		}
		
		/// <summary/>
		public static implicit operator LuaAction<<#= parameters #>>(MulticastDelegate del)
		{
			return new LuaAction<<#= parameters #>>(del);
		}
		
		<# for(int paramCount = 1; paramCount <= maxParametersCount; paramCount++) { 
		string funcParameters2 = String.Join(", ", Enumerable.Range(1, paramCount).Select(i => 
	   { 
			if (i == paramCount) 
				return ("LuaResult");
			return ("object");
	   }));
		#>
		/// <summary/>
		public static implicit operator LuaAction<<#= parameters #>>(Func<<#= funcParameters2 #>> del)
		{
			return new LuaAction<<#= parameters #>>(del);
		}
		<# } #>

	}

<#}#>
}
