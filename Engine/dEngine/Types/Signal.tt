<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#  const int maxParametersCount = 7; #>
// <auto-generated>
// This code was generated by Signal.tt
// <#= DateTime.Now.ToString("R") #>
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Diagnostics;
using Neo.IronLua;

namespace dEngine
{
	using Services;
	using Instances;
	using Instances.Attributes;

	/// <summary>
	/// A signal allows listener functions to be connected, which are called when the signal is fired.
	/// </summary>
	public class Signal
	{
		internal readonly object Locker = new object();
		internal List<Connection> Connections;
		internal event Action Event;

		/// <summary>
		/// Initializes a new signal.
		/// </summary>
		/// <param name="host">The instance which this signal will be a member of.</param>
		public Signal(Instance host)
		{
			Connections = new List<Connection>();
			Owner = host;
			
			if (host.Destroyed != null) // if host.Destroyed is null, then this is the Destroyed signal.
				host.Destroyed.Event += Dispose;
		}

		/// <summary>
		/// The owner of this signal.
		/// </summary>
		public Instance Owner { get; protected set; }

		internal void Fire()
		{
			var connections = Connections;
			var count = connections.Count;

			for (var i = 0; i < count; i++)
			{
				connections[i].Invoke();
			}

			Event?.Invoke();
		}

		internal void Connect(Action action)
		{
			Event += action;
		}

		internal void Disconnect(Action action)
		{
			Event -= action;
		}

		/// <summary>
		/// Connects the given listener to the signal.
		/// </summary>
		public Connection connect(LuaAction listener)
		{
			if (listener == null)
				throw new ArgumentNullException(nameof(listener), "Listener function was null.");

			var connection = new Connection(this, listener);
			lock(Locker)
			{
				Connections.Add(connection);
			}
			return connection;
		}

		
		/// <summary>
		/// Yields the current thread until this signal next fires.
		/// </summary>
		[YieldFunction]
		public double wait()
		{
			var thread = (LuaThread)LuaThread.running().Values[0];
			var sw = Stopwatch.StartNew();

			Action callback = null;
			callback = () => 
			{
                ScriptService.ResumeThread(thread);
				Disconnect(callback);
			};

			Connect(callback);
			ScriptService.YieldThread();
			return sw.Elapsed.TotalSeconds;
		}
		
		/// <summary>
		/// Disconnects all connections and destroys the signal.
		/// </summary>
		public void Dispose()
		{
			lock(Locker)
			{
			    var connections = Connections;
                for (var i = connections.Count - 1; i >= 0; i--)
                {
                    connections[i].disconnect();
                }
			}
			var e = Event;
			if (e == null) return;
				foreach (var d in e.GetInvocationList())
					Event -= (Action)d;
		}
	}

<# for(int parametersCount = 1; parametersCount <= maxParametersCount; parametersCount++) {
   string parameters = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "T" + i));
   string arguments = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "T" + i +" arg" + i + " = default(T" + i + ")"));
   string refArguments = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => $"ref T{i} arg{i}"));
   string argumentsCall = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "arg" + i));
   string dynamicparameters = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "dynamic"));
   string objectparameters = String.Join(", ", Enumerable.Range(1, parametersCount).Select(i => "object"));
#>
	/// <summary>
	/// A signal allows listener functions to be connected, which are called when the signal is fired.
	/// </summary>
	public class Signal<<#= parameters #>> : IDisposable
	{
		internal readonly object Locker = new object();
		internal List<Connection<<#= parameters #>>> Connections;
		internal event Action<<#= parameters #>> Event;

		/// <summary>
		/// The owner of this signal.
		/// </summary>
		public Instance Owner { get; protected set; }

		/// <summary>
		/// Initializes a new signal.
		/// </summary>
		/// <param name="host">The instance which this signal will be a member of.</param>
		public Signal(Instance host)
		{
			Connections = new List<Connection<<#= parameters #>>>();
			Owner = host;
			host.Destroyed.Event += Dispose;
		}

		internal void Connect(Action<<#= parameters #>> action)
		{
			Event += action;
		}

		internal void Disconnect(Action<<#= parameters #>> action)
		{
			Event -= action;
		}

		internal void Fire(<#= arguments #>)
		{
			lock(Locker)
			{
				var connections = Connections;
				var count = connections.Count;
				for (var i = 0; i < count; i++)
				{
					connections[i].Invoke(<#= argumentsCall #>);
				}
			}

			Event?.Invoke(<#= argumentsCall #>);
		}

		internal void Fire(<#= refArguments #>)
		{
			lock(Locker)
			{
				var connections = Connections;
				var count = connections.Count;
				for (int i = 0; i < count; i++)
				{
					connections[i].Invoke(<#= argumentsCall #>);
				}
			}

			Event?.Invoke(<#= argumentsCall #>);
		}
		
		/// <summary>
		/// Connects the given listener to the signal.
		/// </summary>
		public Connection<<#= parameters #>> connect(LuaAction<<#= parameters #>> listener)
		{
			if (listener == null)
				throw new ArgumentNullException(nameof(listener), "Listener function was null.");

			var connection = new Connection<<#= parameters #>>(this, listener);

			lock(Locker)
			{
				Connections.Add(connection);
			}

			return connection;
		}

		/// <summary>
		/// Yields the current thread until this signal next fires.
		/// </summary>
		[YieldFunction]
		public double wait()
		{
			var thread = (LuaThread)LuaThread.running().Values[0];
			var sw = Stopwatch.StartNew();

			Action<<#= parameters #>> callback = null;
			callback = (<#= argumentsCall #>) => 
			{
                ScriptService.ResumeThread(thread);
				Disconnect(callback);
			};

			Connect(callback);
			ScriptService.YieldThread();
			return sw.Elapsed.TotalSeconds;
		}

		/// <summary>
		/// Disconnects all connections and destroys the signal.
		/// </summary>
		public void Dispose()
		{
			lock(Locker)
			{
			    var connections = Connections;
                for (var i = connections.Count - 1; i >= 0; i--)
                {
                    connections[i].disconnect();
                }
			}

			var e = Event;
			if (e == null) return;
				foreach (var d in e.GetInvocationList())
					Event -= (d as Action<<#= parameters #>>);
		}
	}

<#}#>
}
