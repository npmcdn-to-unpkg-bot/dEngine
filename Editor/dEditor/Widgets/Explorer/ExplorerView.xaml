<UserControl x:Class="dEditor.Widgets.Explorer.ExplorerView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:dEditor.Widgets.Explorer"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300" d:DataContext="{d:DesignInstance local:ExplorerViewModel}">
    <UserControl.Resources>
        <Style x:Key="MaterialDesignExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Width" Value="16"/>
            <Setter Property="Height" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="Transparent" Height="16" Width="16">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CheckStates">
                                    <VisualStateGroup.Transitions>
                                        <VisualTransition From="Unchecked" To="Checked">
                                            <VisualTransition.GeneratedEasingFunction>
                                                <QuarticEase EasingMode="EaseOut"/>
                                            </VisualTransition.GeneratedEasingFunction>
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="45"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualTransition>
                                        <VisualTransition GeneratedDuration="0" To="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="45"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualTransition>
                                        <VisualTransition GeneratedDuration="0" To="Checked">
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualTransition>
                                        <VisualTransition From="Checked" GeneratedDuration="0" To="Unchecked">
                                            <VisualTransition.GeneratedEasingFunction>
                                                <QuarticEase EasingMode="EaseOut"/>
                                            </VisualTransition.GeneratedEasingFunction>
                                            <Storyboard>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                    <EasingDoubleKeyFrame KeyTime="0" Value="45"/>
                                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </VisualTransition>
                                    </VisualStateGroup.Transitions>
                                    <VisualState x:Name="Checked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="45"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                    <VisualState x:Name="Unchecked">
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="ExpandPath">
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualState>
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Viewbox>
                                <Canvas Width="24" Height="24">
                                    <Path Data="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z" 
                                              x:Name="ExpandPath"
                                              SnapsToDevicePixels="True"
                                              Fill="{TemplateBinding Foreground}" 
                                              Stroke="{TemplateBinding Foreground}" RenderTransformOrigin=".5,.5">
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform Angle="0" CenterX="4" CenterY="4"/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Path.RenderTransform>
                                    </Path>
                                </Canvas>
                            </Viewbox>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="TreeViewItemControlTemplate1" TargetType="{x:Type TreeViewItem}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="19" Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <ToggleButton x:Name="Expander" Style="{StaticResource MaterialDesignExpandCollapseToggleStyle}" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}">

                </ToggleButton>
                <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                    <ContentPresenter x:Name="PART_Header" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" ContentStringFormat="{TemplateBinding HeaderStringFormat}" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                </Border>
                <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsExpanded" Value="False">
                    <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                </Trigger>
                <Trigger Property="HasItems" Value="False">
                    <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsSelected" Value="True"/>
                        <Condition Property="IsSelectionActive" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                </MultiTrigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </UserControl.Resources>
    <Grid x:Name="Grid" Background="White">
        <TreeView x:Name="TreeView" ItemsSource="{Binding Path=RootItem.Items}"
				VirtualizingPanel.IsVirtualizing="True" 
				VirtualizingPanel.VirtualizationMode="Recycling"
				VirtualizingPanel.ScrollUnit="Item"
				ScrollViewer.CanContentScroll="True"
				Background="Transparent"
				BorderThickness="0" 
                MouseLeftButtonDown="TreeView_OnMouseLeftButtonDown"
                MouseRightButtonDown="TreeView_OnMouseLeftButtonDown"
                MouseDoubleClick="TreeView_OnMouseDoubleClick"
				HorizontalAlignment="Stretch">
            <TreeView.ItemContainerStyle>
                <Style TargetType="{x:Type TreeViewItem}">
                    <Setter Property="HorizontalAlignment" Value="Stretch" />
                    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=OneWay}" />
                    <Setter Property="Template" Value="{StaticResource TreeViewItemControlTemplate1}"/>
                    <Setter Property="Focusable" Value="False"/>
                    <EventSetter Event="MouseLeftButtonDown" Handler="TreeViewItem_OnMouseLeftButtonDown"/>
                    <EventSetter Event="MouseLeftButtonUp" Handler="TreeViewItem_OnMouseLeftButtonUp"/>
                </Style>
            </TreeView.ItemContainerStyle>
            <TreeView.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="Black" />
                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}"  Color="Transparent" />
                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}"  Color="Black" />
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.ControlTextBrushKey}" Color="Black" />
                <HierarchicalDataTemplate DataType="{x:Type local:ExplorerItem}" ItemsSource="{Binding Items}">
                    <Border x:Name="Border" BorderThickness="4, 2" Margin="-1" AllowDrop="True" CornerRadius="3">
                        <Border.Style>
                            <Style TargetType="Border">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsSelected}" Value="False">
                                        <Setter Property="Background" Value="Transparent"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ElementName=Border, Path=IsMouseOver}" Value="true">
                                        <Setter Property="Background" Value="#D9D9D9"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                        <Setter Property="Background" Value="{StaticResource AccentPrimary}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                        <StackPanel x:Name="Sp" Orientation="Horizontal" Height="23" Margin="0"  UseLayoutRounding="False">
                            <Image Source="{Binding Path=Icon, Mode=OneWay}" UseLayoutRounding="True" Stretch="None"  Margin="4, 0" Width="16" Height="16" VerticalAlignment="Center"/>
                            <TextBlock Text="{Binding Path=Name,Mode=OneWay}" Margin="0,0,5,0" VerticalAlignment="Center" FontSize="13">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                                <Setter Property="Foreground" Value="White"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding IsSelected}" Value="False">
                                                <Setter Property="Foreground" Value="Black"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                    </Border>
                </HierarchicalDataTemplate>
            </TreeView.Resources>
            <TreeView.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="Cut">
                        <MenuItem.Icon>
                            <Image Source="/dEditor;component/Content/Icons/Toolbar/Cut_6523.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Copy" Command="{Binding CopyCommand}">
                        <MenuItem.Icon>
                            <Image Source="/dEditor;component/Content/Icons/Toolbar/Copy_6524.png">
                            </Image>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Paste" Command="{Binding PasteCommand}">
                        <MenuItem.Icon>
                            <Image Source="/dEditor;component/Content/Icons/Toolbar/clipboard_16xLG.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Paste Into" Command="{Binding PasteIntoCommand}"/>
                    <MenuItem Header="Duplicate" Command="{Binding DuplicateCommand}">
                        <MenuItem.Icon>
                            <Image Source="/dEditor;component/Content/Icons/Toolbar/Copy_6524.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Delete" Command="{Binding DeleteCommand}">
                        <MenuItem.Icon>
                            <Image Source="/dEditor;component/Content/Icons/Toolbar/Delete.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Rename"/>
                    <Separator/>
                    <MenuItem Header="Group" Command="{Binding GroupCommand}">
                        <MenuItem.Icon>
                            <Image Source="/dEditor;component/Content/Icons/Toolbar/Group.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Ungroup" Command="{Binding UngroupCommand}">
                        <MenuItem.Icon>
                            <Image Source="/dEditor;component/Content/Icons/Toolbar/Ungroup.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Select Children" Command="{Binding SelectChildrenCommand}">
                        <MenuItem.Icon>
                            <Image Source="/dEditor;component/Content/Icons/Toolbar/Hierarchy_16x.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Zoom To" Command="{Binding ZoomToCommand}">
                        <MenuItem.Icon>
                            <Image Source="/dEditor;component/Content/Icons/Toolbar/Focus.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <Separator/>
                    <MenuItem Header="Insert Part" Command="{Binding InsertPartCommand}">
                        <MenuItem.Icon>
                            <Image Source="/dEditor;component/Content/Icons/Objects/brick.png"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <local:InsertObjectMenuItem/>
                    <Separator/>
                    <MenuItem Header="Make Plugin" Command="{Binding MakePluginCommand}" Visibility="{Binding IsFolderSelected}">
                        
                    </MenuItem>
                </ContextMenu>
            </TreeView.ContextMenu>
        </TreeView>

        <Canvas HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <Rectangle
				x:Name="SelectionRectangle"
				Visibility="Collapsed"
				Fill="#64277DD3"
				Stroke="#1A8CFF"
				StrokeThickness="1"
				UseLayoutRounding="True"
				SnapsToDevicePixels="True"
				/>
        </Canvas>
    </Grid>
</UserControl>
